
Hackathon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e54  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003fec  08003fec  00004fec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004004  08004004  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  08004004  08004004  00005004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800400c  0800400c  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800400c  0800400c  0000500c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004010  08004010  00005010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004014  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ec  2000000c  08004020  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001f8  08004020  000061f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000daaa  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f19  00000000  00000000  00013ae6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c58  00000000  00000000  00015a00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009ad  00000000  00000000  00016658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016582  00000000  00000000  00017005  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f8ca  00000000  00000000  0002d587  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008dbf7  00000000  00000000  0003ce51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000caa48  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003380  00000000  00000000  000caa8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000cde0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003fd4 	.word	0x08003fd4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08003fd4 	.word	0x08003fd4

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <set_pwm_us>:
 #include "Braccio.h"

static void set_pwm_us(TIM_HandleTypeDef* htim, uint32_t channel, uint16_t us) {
 80004c8:	b480      	push	{r7}
 80004ca:	b085      	sub	sp, #20
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	60f8      	str	r0, [r7, #12]
 80004d0:	60b9      	str	r1, [r7, #8]
 80004d2:	4613      	mov	r3, r2
 80004d4:	80fb      	strh	r3, [r7, #6]
    if (us < 500) us = 500;
 80004d6:	88fb      	ldrh	r3, [r7, #6]
 80004d8:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80004dc:	d202      	bcs.n	80004e4 <set_pwm_us+0x1c>
 80004de:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80004e2:	80fb      	strh	r3, [r7, #6]
    if (us > 2500) us = 2500;
 80004e4:	88fb      	ldrh	r3, [r7, #6]
 80004e6:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 80004ea:	4293      	cmp	r3, r2
 80004ec:	d902      	bls.n	80004f4 <set_pwm_us+0x2c>
 80004ee:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80004f2:	80fb      	strh	r3, [r7, #6]

    __HAL_TIM_SET_COMPARE(htim, channel, us);
 80004f4:	68bb      	ldr	r3, [r7, #8]
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d104      	bne.n	8000504 <set_pwm_us+0x3c>
 80004fa:	68fb      	ldr	r3, [r7, #12]
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	88fa      	ldrh	r2, [r7, #6]
 8000500:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000502:	e013      	b.n	800052c <set_pwm_us+0x64>
    __HAL_TIM_SET_COMPARE(htim, channel, us);
 8000504:	68bb      	ldr	r3, [r7, #8]
 8000506:	2b04      	cmp	r3, #4
 8000508:	d104      	bne.n	8000514 <set_pwm_us+0x4c>
 800050a:	68fb      	ldr	r3, [r7, #12]
 800050c:	681a      	ldr	r2, [r3, #0]
 800050e:	88fb      	ldrh	r3, [r7, #6]
 8000510:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000512:	e00b      	b.n	800052c <set_pwm_us+0x64>
    __HAL_TIM_SET_COMPARE(htim, channel, us);
 8000514:	68bb      	ldr	r3, [r7, #8]
 8000516:	2b08      	cmp	r3, #8
 8000518:	d104      	bne.n	8000524 <set_pwm_us+0x5c>
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	681a      	ldr	r2, [r3, #0]
 800051e:	88fb      	ldrh	r3, [r7, #6]
 8000520:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8000522:	e003      	b.n	800052c <set_pwm_us+0x64>
    __HAL_TIM_SET_COMPARE(htim, channel, us);
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	681a      	ldr	r2, [r3, #0]
 8000528:	88fb      	ldrh	r3, [r7, #6]
 800052a:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800052c:	bf00      	nop
 800052e:	3714      	adds	r7, #20
 8000530:	46bd      	mov	sp, r7
 8000532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000536:	4770      	bx	lr

08000538 <Braccio_Init>:

void Braccio_Init(Braccio* arm)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
    HAL_TIM_PWM_Start(arm->timBase	  , TIM_CHANNEL_2);     // PA7
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	2104      	movs	r1, #4
 8000546:	4618      	mov	r0, r3
 8000548:	f002 f92c 	bl	80027a4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(arm->timShoulder, TIM_CHANNEL_1); 	// PB6
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	685b      	ldr	r3, [r3, #4]
 8000550:	2100      	movs	r1, #0
 8000552:	4618      	mov	r0, r3
 8000554:	f002 f926 	bl	80027a4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(arm->timElbow	  , TIM_CHANNEL_1);     // PA8
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	689b      	ldr	r3, [r3, #8]
 800055c:	2100      	movs	r1, #0
 800055e:	4618      	mov	r0, r3
 8000560:	f002 f920 	bl	80027a4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(arm->timWristV  , TIM_CHANNEL_3);     // PB10
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	68db      	ldr	r3, [r3, #12]
 8000568:	2108      	movs	r1, #8
 800056a:	4618      	mov	r0, r3
 800056c:	f002 f91a 	bl	80027a4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(arm->timWristR  , TIM_CHANNEL_1);     // PB4
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	691b      	ldr	r3, [r3, #16]
 8000574:	2100      	movs	r1, #0
 8000576:	4618      	mov	r0, r3
 8000578:	f002 f914 	bl	80027a4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(arm->timGripper , TIM_CHANNEL_2);     // PB3
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	695b      	ldr	r3, [r3, #20]
 8000580:	2104      	movs	r1, #4
 8000582:	4618      	mov	r0, r3
 8000584:	f002 f90e 	bl	80027a4 <HAL_TIM_PWM_Start>
}
 8000588:	bf00      	nop
 800058a:	3708      	adds	r7, #8
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}

08000590 <Braccio_Move>:

void Braccio_Move(Braccio* arm, int base, int shoulder, int elbow, int wristV, int wristR, int gripper)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b084      	sub	sp, #16
 8000594:	af00      	add	r7, sp, #0
 8000596:	60f8      	str	r0, [r7, #12]
 8000598:	60b9      	str	r1, [r7, #8]
 800059a:	607a      	str	r2, [r7, #4]
 800059c:	603b      	str	r3, [r7, #0]
    set_pwm_us(arm->timBase		, TIM_CHANNEL_2,     base);
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	68ba      	ldr	r2, [r7, #8]
 80005a4:	b292      	uxth	r2, r2
 80005a6:	2104      	movs	r1, #4
 80005a8:	4618      	mov	r0, r3
 80005aa:	f7ff ff8d 	bl	80004c8 <set_pwm_us>
    set_pwm_us(arm->timShoulder , TIM_CHANNEL_1, shoulder);
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	685b      	ldr	r3, [r3, #4]
 80005b2:	687a      	ldr	r2, [r7, #4]
 80005b4:	b292      	uxth	r2, r2
 80005b6:	2100      	movs	r1, #0
 80005b8:	4618      	mov	r0, r3
 80005ba:	f7ff ff85 	bl	80004c8 <set_pwm_us>
    set_pwm_us(arm->timElbow	, TIM_CHANNEL_1,    elbow);
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	689b      	ldr	r3, [r3, #8]
 80005c2:	683a      	ldr	r2, [r7, #0]
 80005c4:	b292      	uxth	r2, r2
 80005c6:	2100      	movs	r1, #0
 80005c8:	4618      	mov	r0, r3
 80005ca:	f7ff ff7d 	bl	80004c8 <set_pwm_us>
    set_pwm_us(arm->timWristV	, TIM_CHANNEL_3,   wristV);
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	68db      	ldr	r3, [r3, #12]
 80005d2:	69ba      	ldr	r2, [r7, #24]
 80005d4:	b292      	uxth	r2, r2
 80005d6:	2108      	movs	r1, #8
 80005d8:	4618      	mov	r0, r3
 80005da:	f7ff ff75 	bl	80004c8 <set_pwm_us>
    set_pwm_us(arm->timWristR	, TIM_CHANNEL_1,   wristR);
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	691b      	ldr	r3, [r3, #16]
 80005e2:	69fa      	ldr	r2, [r7, #28]
 80005e4:	b292      	uxth	r2, r2
 80005e6:	2100      	movs	r1, #0
 80005e8:	4618      	mov	r0, r3
 80005ea:	f7ff ff6d 	bl	80004c8 <set_pwm_us>
    set_pwm_us(arm->timGripper	, TIM_CHANNEL_2,  gripper);
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	695b      	ldr	r3, [r3, #20]
 80005f2:	6a3a      	ldr	r2, [r7, #32]
 80005f4:	b292      	uxth	r2, r2
 80005f6:	2104      	movs	r1, #4
 80005f8:	4618      	mov	r0, r3
 80005fa:	f7ff ff65 	bl	80004c8 <set_pwm_us>
}
 80005fe:	bf00      	nop
 8000600:	3710      	adds	r7, #16
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
	...

08000608 <Ultrasonic_ReadDistance>:
#include "Ultra.h"

extern TIM_HandleTypeDef htim11;

uint16_t Ultrasonic_ReadDistance(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
    uint32_t start, stop, duration;

    // Trigger pulse (10 us)
    HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);
 800060e:	2200      	movs	r2, #0
 8000610:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000614:	4826      	ldr	r0, [pc, #152]	@ (80006b0 <Ultrasonic_ReadDistance+0xa8>)
 8000616:	f001 fa85 	bl	8001b24 <HAL_GPIO_WritePin>
    HAL_Delay(2);
 800061a:	2002      	movs	r0, #2
 800061c:	f000 ffb0 	bl	8001580 <HAL_Delay>
    HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);
 8000620:	2201      	movs	r2, #1
 8000622:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000626:	4822      	ldr	r0, [pc, #136]	@ (80006b0 <Ultrasonic_ReadDistance+0xa8>)
 8000628:	f001 fa7c 	bl	8001b24 <HAL_GPIO_WritePin>
    HAL_Delay(0.01);  // 10 µs
 800062c:	2000      	movs	r0, #0
 800062e:	f000 ffa7 	bl	8001580 <HAL_Delay>
    HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);
 8000632:	2200      	movs	r2, #0
 8000634:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000638:	481d      	ldr	r0, [pc, #116]	@ (80006b0 <Ultrasonic_ReadDistance+0xa8>)
 800063a:	f001 fa73 	bl	8001b24 <HAL_GPIO_WritePin>

    // Wait for echo to go HIGH
    while (!HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN));
 800063e:	bf00      	nop
 8000640:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000644:	481b      	ldr	r0, [pc, #108]	@ (80006b4 <Ultrasonic_ReadDistance+0xac>)
 8000646:	f001 fa55 	bl	8001af4 <HAL_GPIO_ReadPin>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d0f7      	beq.n	8000640 <Ultrasonic_ReadDistance+0x38>

    __HAL_TIM_SET_COUNTER(&htim11, 0);
 8000650:	4b19      	ldr	r3, [pc, #100]	@ (80006b8 <Ultrasonic_ReadDistance+0xb0>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	2200      	movs	r2, #0
 8000656:	625a      	str	r2, [r3, #36]	@ 0x24
    HAL_TIM_IC_Start(&htim11, TIM_CHANNEL_1);
 8000658:	2100      	movs	r1, #0
 800065a:	4817      	ldr	r0, [pc, #92]	@ (80006b8 <Ultrasonic_ReadDistance+0xb0>)
 800065c:	f002 f9ac 	bl	80029b8 <HAL_TIM_IC_Start>

    // Wait for echo to go LOW
    while (HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN));
 8000660:	bf00      	nop
 8000662:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000666:	4813      	ldr	r0, [pc, #76]	@ (80006b4 <Ultrasonic_ReadDistance+0xac>)
 8000668:	f001 fa44 	bl	8001af4 <HAL_GPIO_ReadPin>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d1f7      	bne.n	8000662 <Ultrasonic_ReadDistance+0x5a>

    HAL_TIM_IC_Stop(&htim11, TIM_CHANNEL_1);
 8000672:	2100      	movs	r1, #0
 8000674:	4810      	ldr	r0, [pc, #64]	@ (80006b8 <Ultrasonic_ReadDistance+0xb0>)
 8000676:	f002 fa6d 	bl	8002b54 <HAL_TIM_IC_Stop>

    duration = HAL_TIM_ReadCapturedValue(&htim11, TIM_CHANNEL_1);
 800067a:	2100      	movs	r1, #0
 800067c:	480e      	ldr	r0, [pc, #56]	@ (80006b8 <Ultrasonic_ReadDistance+0xb0>)
 800067e:	f002 fd19 	bl	80030b4 <HAL_TIM_ReadCapturedValue>
 8000682:	6078      	str	r0, [r7, #4]

    // Distance in cm = (duration * speed of sound) / 2
    return (uint16_t)((duration * 0.0343f) / 2.0f);
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	ee07 3a90 	vmov	s15, r3
 800068a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800068e:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 80006bc <Ultrasonic_ReadDistance+0xb4>
 8000692:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000696:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800069a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800069e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80006a2:	ee17 3a90 	vmov	r3, s15
 80006a6:	b29b      	uxth	r3, r3
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	3708      	adds	r7, #8
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	40020000 	.word	0x40020000
 80006b4:	40020400 	.word	0x40020400
 80006b8:	20000148 	.word	0x20000148
 80006bc:	3d0c7e28 	.word	0x3d0c7e28

080006c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006c6:	f000 fee9 	bl	800149c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ca:	f000 f919 	bl	8000900 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ce:	f000 fbc1 	bl	8000e54 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006d2:	f000 fb95 	bl	8000e00 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80006d6:	f000 fa27 	bl	8000b28 <MX_TIM2_Init>
  MX_TIM3_Init();
 80006da:	f000 fa89 	bl	8000bf0 <MX_TIM3_Init>
  MX_TIM4_Init();
 80006de:	f000 faed 	bl	8000cbc <MX_TIM4_Init>
  MX_TIM1_Init();
 80006e2:	f000 f979 	bl	80009d8 <MX_TIM1_Init>
  MX_TIM11_Init();
 80006e6:	f000 fb43 	bl	8000d70 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */

  /* Initialize the Braccio arm struct with the appropriate TIM handles */
  arm.timBase 	  = &htim3;
 80006ea:	4b7e      	ldr	r3, [pc, #504]	@ (80008e4 <main+0x224>)
 80006ec:	4a7e      	ldr	r2, [pc, #504]	@ (80008e8 <main+0x228>)
 80006ee:	601a      	str	r2, [r3, #0]
  arm.timShoulder = &htim4;
 80006f0:	4b7c      	ldr	r3, [pc, #496]	@ (80008e4 <main+0x224>)
 80006f2:	4a7e      	ldr	r2, [pc, #504]	@ (80008ec <main+0x22c>)
 80006f4:	605a      	str	r2, [r3, #4]
  arm.timElbow 	  = &htim1;
 80006f6:	4b7b      	ldr	r3, [pc, #492]	@ (80008e4 <main+0x224>)
 80006f8:	4a7d      	ldr	r2, [pc, #500]	@ (80008f0 <main+0x230>)
 80006fa:	609a      	str	r2, [r3, #8]
  arm.timWristV   = &htim2;
 80006fc:	4b79      	ldr	r3, [pc, #484]	@ (80008e4 <main+0x224>)
 80006fe:	4a7d      	ldr	r2, [pc, #500]	@ (80008f4 <main+0x234>)
 8000700:	60da      	str	r2, [r3, #12]
  arm.timWristR   = &htim3;
 8000702:	4b78      	ldr	r3, [pc, #480]	@ (80008e4 <main+0x224>)
 8000704:	4a78      	ldr	r2, [pc, #480]	@ (80008e8 <main+0x228>)
 8000706:	611a      	str	r2, [r3, #16]
  arm.timGripper  = &htim2;
 8000708:	4b76      	ldr	r3, [pc, #472]	@ (80008e4 <main+0x224>)
 800070a:	4a7a      	ldr	r2, [pc, #488]	@ (80008f4 <main+0x234>)
 800070c:	615a      	str	r2, [r3, #20]

  /* Initialize Braccio servos (start PWM) */
  Braccio_Init(&arm);
 800070e:	4875      	ldr	r0, [pc, #468]	@ (80008e4 <main+0x224>)
 8000710:	f7ff ff12 	bl	8000538 <Braccio_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  dist = Ultrasonic_ReadDistance();
 8000714:	f7ff ff78 	bl	8000608 <Ultrasonic_ReadDistance>
 8000718:	4603      	mov	r3, r0
 800071a:	461a      	mov	r2, r3
 800071c:	4b76      	ldr	r3, [pc, #472]	@ (80008f8 <main+0x238>)
 800071e:	801a      	strh	r2, [r3, #0]
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000720:	2201      	movs	r2, #1
 8000722:	2140      	movs	r1, #64	@ 0x40
 8000724:	4875      	ldr	r0, [pc, #468]	@ (80008fc <main+0x23c>)
 8000726:	f001 f9fd 	bl	8001b24 <HAL_GPIO_WritePin>
	  Braccio_Move(&arm, 1500, 1500, 1500, 1500, 1500, 1500); //Default
 800072a:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800072e:	9302      	str	r3, [sp, #8]
 8000730:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000734:	9301      	str	r3, [sp, #4]
 8000736:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800073a:	9300      	str	r3, [sp, #0]
 800073c:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000740:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000744:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 8000748:	4866      	ldr	r0, [pc, #408]	@ (80008e4 <main+0x224>)
 800074a:	f7ff ff21 	bl	8000590 <Braccio_Move>
	  HAL_Delay(1000);
 800074e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000752:	f000 ff15 	bl	8001580 <HAL_Delay>
	  dist = Ultrasonic_ReadDistance();
 8000756:	f7ff ff57 	bl	8000608 <Ultrasonic_ReadDistance>
 800075a:	4603      	mov	r3, r0
 800075c:	461a      	mov	r2, r3
 800075e:	4b66      	ldr	r3, [pc, #408]	@ (80008f8 <main+0x238>)
 8000760:	801a      	strh	r2, [r3, #0]
	  Braccio_Move(&arm, 1000, 1500, 1500, 1500, 1500, 1500); // Base
 8000762:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000766:	9302      	str	r3, [sp, #8]
 8000768:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800076c:	9301      	str	r3, [sp, #4]
 800076e:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000772:	9300      	str	r3, [sp, #0]
 8000774:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000778:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800077c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000780:	4858      	ldr	r0, [pc, #352]	@ (80008e4 <main+0x224>)
 8000782:	f7ff ff05 	bl	8000590 <Braccio_Move>
	  HAL_Delay(1000);
 8000786:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800078a:	f000 fef9 	bl	8001580 <HAL_Delay>
	  dist = Ultrasonic_ReadDistance();
 800078e:	f7ff ff3b 	bl	8000608 <Ultrasonic_ReadDistance>
 8000792:	4603      	mov	r3, r0
 8000794:	461a      	mov	r2, r3
 8000796:	4b58      	ldr	r3, [pc, #352]	@ (80008f8 <main+0x238>)
 8000798:	801a      	strh	r2, [r3, #0]
	  Braccio_Move(&arm, 1500, 1000, 1500, 1500, 1500, 1500); // Shoulder
 800079a:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800079e:	9302      	str	r3, [sp, #8]
 80007a0:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 80007a4:	9301      	str	r3, [sp, #4]
 80007a6:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 80007aa:	9300      	str	r3, [sp, #0]
 80007ac:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 80007b0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80007b4:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 80007b8:	484a      	ldr	r0, [pc, #296]	@ (80008e4 <main+0x224>)
 80007ba:	f7ff fee9 	bl	8000590 <Braccio_Move>
	  HAL_Delay(1000);
 80007be:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007c2:	f000 fedd 	bl	8001580 <HAL_Delay>
	  dist = Ultrasonic_ReadDistance();
 80007c6:	f7ff ff1f 	bl	8000608 <Ultrasonic_ReadDistance>
 80007ca:	4603      	mov	r3, r0
 80007cc:	461a      	mov	r2, r3
 80007ce:	4b4a      	ldr	r3, [pc, #296]	@ (80008f8 <main+0x238>)
 80007d0:	801a      	strh	r2, [r3, #0]
	  Braccio_Move(&arm, 1500, 1500, 1000, 1500, 1500, 1500); // Elbow
 80007d2:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 80007d6:	9302      	str	r3, [sp, #8]
 80007d8:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 80007dc:	9301      	str	r3, [sp, #4]
 80007de:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 80007e2:	9300      	str	r3, [sp, #0]
 80007e4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007e8:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80007ec:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 80007f0:	483c      	ldr	r0, [pc, #240]	@ (80008e4 <main+0x224>)
 80007f2:	f7ff fecd 	bl	8000590 <Braccio_Move>
	  HAL_Delay(1000);
 80007f6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007fa:	f000 fec1 	bl	8001580 <HAL_Delay>
	  dist = Ultrasonic_ReadDistance();
 80007fe:	f7ff ff03 	bl	8000608 <Ultrasonic_ReadDistance>
 8000802:	4603      	mov	r3, r0
 8000804:	461a      	mov	r2, r3
 8000806:	4b3c      	ldr	r3, [pc, #240]	@ (80008f8 <main+0x238>)
 8000808:	801a      	strh	r2, [r3, #0]
	  Braccio_Move(&arm, 1500, 1500, 1500, 1000, 1500, 1500); // Wrist Vertical
 800080a:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800080e:	9302      	str	r3, [sp, #8]
 8000810:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000814:	9301      	str	r3, [sp, #4]
 8000816:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800081a:	9300      	str	r3, [sp, #0]
 800081c:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000820:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000824:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 8000828:	482e      	ldr	r0, [pc, #184]	@ (80008e4 <main+0x224>)
 800082a:	f7ff feb1 	bl	8000590 <Braccio_Move>
	  HAL_Delay(1000);
 800082e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000832:	f000 fea5 	bl	8001580 <HAL_Delay>
	  dist = Ultrasonic_ReadDistance();
 8000836:	f7ff fee7 	bl	8000608 <Ultrasonic_ReadDistance>
 800083a:	4603      	mov	r3, r0
 800083c:	461a      	mov	r2, r3
 800083e:	4b2e      	ldr	r3, [pc, #184]	@ (80008f8 <main+0x238>)
 8000840:	801a      	strh	r2, [r3, #0]
	  Braccio_Move(&arm, 1500, 1500, 1500, 1500, 1000, 1500); // Wrist Rotation
 8000842:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000846:	9302      	str	r3, [sp, #8]
 8000848:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800084c:	9301      	str	r3, [sp, #4]
 800084e:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000852:	9300      	str	r3, [sp, #0]
 8000854:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000858:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800085c:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 8000860:	4820      	ldr	r0, [pc, #128]	@ (80008e4 <main+0x224>)
 8000862:	f7ff fe95 	bl	8000590 <Braccio_Move>
	  HAL_Delay(1000);
 8000866:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800086a:	f000 fe89 	bl	8001580 <HAL_Delay>
	  dist = Ultrasonic_ReadDistance();
 800086e:	f7ff fecb 	bl	8000608 <Ultrasonic_ReadDistance>
 8000872:	4603      	mov	r3, r0
 8000874:	461a      	mov	r2, r3
 8000876:	4b20      	ldr	r3, [pc, #128]	@ (80008f8 <main+0x238>)
 8000878:	801a      	strh	r2, [r3, #0]
	  Braccio_Move(&arm, 1500, 1500, 1500, 1500, 1500, 1000); // Gripper
 800087a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800087e:	9302      	str	r3, [sp, #8]
 8000880:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000884:	9301      	str	r3, [sp, #4]
 8000886:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800088a:	9300      	str	r3, [sp, #0]
 800088c:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000890:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000894:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 8000898:	4812      	ldr	r0, [pc, #72]	@ (80008e4 <main+0x224>)
 800089a:	f7ff fe79 	bl	8000590 <Braccio_Move>
	  HAL_Delay(1000);
 800089e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008a2:	f000 fe6d 	bl	8001580 <HAL_Delay>
	  dist = Ultrasonic_ReadDistance();
 80008a6:	f7ff feaf 	bl	8000608 <Ultrasonic_ReadDistance>
 80008aa:	4603      	mov	r3, r0
 80008ac:	461a      	mov	r2, r3
 80008ae:	4b12      	ldr	r3, [pc, #72]	@ (80008f8 <main+0x238>)
 80008b0:	801a      	strh	r2, [r3, #0]
	  Braccio_Move(&arm, 1500, 1500, 1500, 1500, 1500, 1500); //Default
 80008b2:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 80008b6:	9302      	str	r3, [sp, #8]
 80008b8:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 80008bc:	9301      	str	r3, [sp, #4]
 80008be:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 80008c2:	9300      	str	r3, [sp, #0]
 80008c4:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 80008c8:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80008cc:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 80008d0:	4804      	ldr	r0, [pc, #16]	@ (80008e4 <main+0x224>)
 80008d2:	f7ff fe5d 	bl	8000590 <Braccio_Move>
	  HAL_Delay(1000);
 80008d6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008da:	f000 fe51 	bl	8001580 <HAL_Delay>
	  dist = Ultrasonic_ReadDistance();
 80008de:	bf00      	nop
 80008e0:	e718      	b.n	8000714 <main+0x54>
 80008e2:	bf00      	nop
 80008e4:	200001d8 	.word	0x200001d8
 80008e8:	200000b8 	.word	0x200000b8
 80008ec:	20000100 	.word	0x20000100
 80008f0:	20000028 	.word	0x20000028
 80008f4:	20000070 	.word	0x20000070
 80008f8:	200001f0 	.word	0x200001f0
 80008fc:	40020000 	.word	0x40020000

08000900 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b094      	sub	sp, #80	@ 0x50
 8000904:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000906:	f107 0320 	add.w	r3, r7, #32
 800090a:	2230      	movs	r2, #48	@ 0x30
 800090c:	2100      	movs	r1, #0
 800090e:	4618      	mov	r0, r3
 8000910:	f003 fb34 	bl	8003f7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000914:	f107 030c 	add.w	r3, r7, #12
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	605a      	str	r2, [r3, #4]
 800091e:	609a      	str	r2, [r3, #8]
 8000920:	60da      	str	r2, [r3, #12]
 8000922:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000924:	2300      	movs	r3, #0
 8000926:	60bb      	str	r3, [r7, #8]
 8000928:	4b29      	ldr	r3, [pc, #164]	@ (80009d0 <SystemClock_Config+0xd0>)
 800092a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800092c:	4a28      	ldr	r2, [pc, #160]	@ (80009d0 <SystemClock_Config+0xd0>)
 800092e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000932:	6413      	str	r3, [r2, #64]	@ 0x40
 8000934:	4b26      	ldr	r3, [pc, #152]	@ (80009d0 <SystemClock_Config+0xd0>)
 8000936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000938:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800093c:	60bb      	str	r3, [r7, #8]
 800093e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000940:	2300      	movs	r3, #0
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	4b23      	ldr	r3, [pc, #140]	@ (80009d4 <SystemClock_Config+0xd4>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a22      	ldr	r2, [pc, #136]	@ (80009d4 <SystemClock_Config+0xd4>)
 800094a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800094e:	6013      	str	r3, [r2, #0]
 8000950:	4b20      	ldr	r3, [pc, #128]	@ (80009d4 <SystemClock_Config+0xd4>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000958:	607b      	str	r3, [r7, #4]
 800095a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800095c:	2303      	movs	r3, #3
 800095e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000960:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000964:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000966:	2301      	movs	r3, #1
 8000968:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800096a:	2310      	movs	r3, #16
 800096c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800096e:	2302      	movs	r3, #2
 8000970:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000972:	2300      	movs	r3, #0
 8000974:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000976:	2310      	movs	r3, #16
 8000978:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800097a:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800097e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000980:	2304      	movs	r3, #4
 8000982:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000984:	2304      	movs	r3, #4
 8000986:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000988:	f107 0320 	add.w	r3, r7, #32
 800098c:	4618      	mov	r0, r3
 800098e:	f001 f8e3 	bl	8001b58 <HAL_RCC_OscConfig>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000998:	f000 facc 	bl	8000f34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800099c:	230f      	movs	r3, #15
 800099e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009a0:	2302      	movs	r3, #2
 80009a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009a4:	2300      	movs	r3, #0
 80009a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009ae:	2300      	movs	r3, #0
 80009b0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009b2:	f107 030c 	add.w	r3, r7, #12
 80009b6:	2102      	movs	r1, #2
 80009b8:	4618      	mov	r0, r3
 80009ba:	f001 fb45 	bl	8002048 <HAL_RCC_ClockConfig>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80009c4:	f000 fab6 	bl	8000f34 <Error_Handler>
  }
}
 80009c8:	bf00      	nop
 80009ca:	3750      	adds	r7, #80	@ 0x50
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	40023800 	.word	0x40023800
 80009d4:	40007000 	.word	0x40007000

080009d8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b096      	sub	sp, #88	@ 0x58
 80009dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009de:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80009e2:	2200      	movs	r2, #0
 80009e4:	601a      	str	r2, [r3, #0]
 80009e6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009e8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	605a      	str	r2, [r3, #4]
 80009f2:	609a      	str	r2, [r3, #8]
 80009f4:	60da      	str	r2, [r3, #12]
 80009f6:	611a      	str	r2, [r3, #16]
 80009f8:	615a      	str	r2, [r3, #20]
 80009fa:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80009fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
 8000a04:	605a      	str	r2, [r3, #4]
 8000a06:	609a      	str	r2, [r3, #8]
 8000a08:	60da      	str	r2, [r3, #12]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a0a:	1d3b      	adds	r3, r7, #4
 8000a0c:	2220      	movs	r2, #32
 8000a0e:	2100      	movs	r1, #0
 8000a10:	4618      	mov	r0, r3
 8000a12:	f003 fab3 	bl	8003f7c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a16:	4b42      	ldr	r3, [pc, #264]	@ (8000b20 <MX_TIM1_Init+0x148>)
 8000a18:	4a42      	ldr	r2, [pc, #264]	@ (8000b24 <MX_TIM1_Init+0x14c>)
 8000a1a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 8000a1c:	4b40      	ldr	r3, [pc, #256]	@ (8000b20 <MX_TIM1_Init+0x148>)
 8000a1e:	2253      	movs	r2, #83	@ 0x53
 8000a20:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a22:	4b3f      	ldr	r3, [pc, #252]	@ (8000b20 <MX_TIM1_Init+0x148>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000;
 8000a28:	4b3d      	ldr	r3, [pc, #244]	@ (8000b20 <MX_TIM1_Init+0x148>)
 8000a2a:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000a2e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a30:	4b3b      	ldr	r3, [pc, #236]	@ (8000b20 <MX_TIM1_Init+0x148>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a36:	4b3a      	ldr	r3, [pc, #232]	@ (8000b20 <MX_TIM1_Init+0x148>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a3c:	4b38      	ldr	r3, [pc, #224]	@ (8000b20 <MX_TIM1_Init+0x148>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a42:	4837      	ldr	r0, [pc, #220]	@ (8000b20 <MX_TIM1_Init+0x148>)
 8000a44:	f001 fe5f 	bl	8002706 <HAL_TIM_PWM_Init>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000a4e:	f000 fa71 	bl	8000f34 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000a52:	4833      	ldr	r0, [pc, #204]	@ (8000b20 <MX_TIM1_Init+0x148>)
 8000a54:	f001 ff56 	bl	8002904 <HAL_TIM_IC_Init>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000a5e:	f000 fa69 	bl	8000f34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a62:	2300      	movs	r3, #0
 8000a64:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a66:	2300      	movs	r3, #0
 8000a68:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a6a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000a6e:	4619      	mov	r1, r3
 8000a70:	482b      	ldr	r0, [pc, #172]	@ (8000b20 <MX_TIM1_Init+0x148>)
 8000a72:	f002 feeb 	bl	800384c <HAL_TIMEx_MasterConfigSynchronization>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000a7c:	f000 fa5a 	bl	8000f34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a80:	2360      	movs	r3, #96	@ 0x60
 8000a82:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 1500;
 8000a84:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000a88:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a92:	2300      	movs	r3, #0
 8000a94:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a96:	2300      	movs	r3, #0
 8000a98:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a9e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	481e      	ldr	r0, [pc, #120]	@ (8000b20 <MX_TIM1_Init+0x148>)
 8000aa8:	f002 fa42 	bl	8002f30 <HAL_TIM_PWM_ConfigChannel>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_TIM1_Init+0xde>
  {
    Error_Handler();
 8000ab2:	f000 fa3f 	bl	8000f34 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000aba:	2301      	movs	r3, #1
 8000abc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigIC.ICFilter = 0;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000ac6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aca:	2208      	movs	r2, #8
 8000acc:	4619      	mov	r1, r3
 8000ace:	4814      	ldr	r0, [pc, #80]	@ (8000b20 <MX_TIM1_Init+0x148>)
 8000ad0:	f002 f991 	bl	8002df6 <HAL_TIM_IC_ConfigChannel>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8000ada:	f000 fa2b 	bl	8000f34 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000aea:	2300      	movs	r3, #0
 8000aec:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000aee:	2300      	movs	r3, #0
 8000af0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000af2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000af6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000af8:	2300      	movs	r3, #0
 8000afa:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000afc:	1d3b      	adds	r3, r7, #4
 8000afe:	4619      	mov	r1, r3
 8000b00:	4807      	ldr	r0, [pc, #28]	@ (8000b20 <MX_TIM1_Init+0x148>)
 8000b02:	f002 ff11 	bl	8003928 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8000b0c:	f000 fa12 	bl	8000f34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b10:	4803      	ldr	r0, [pc, #12]	@ (8000b20 <MX_TIM1_Init+0x148>)
 8000b12:	f000 fb35 	bl	8001180 <HAL_TIM_MspPostInit>

}
 8000b16:	bf00      	nop
 8000b18:	3758      	adds	r7, #88	@ 0x58
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	20000028 	.word	0x20000028
 8000b24:	40010000 	.word	0x40010000

08000b28 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b08a      	sub	sp, #40	@ 0x28
 8000b2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b2e:	f107 0320 	add.w	r3, r7, #32
 8000b32:	2200      	movs	r2, #0
 8000b34:	601a      	str	r2, [r3, #0]
 8000b36:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b38:	1d3b      	adds	r3, r7, #4
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	601a      	str	r2, [r3, #0]
 8000b3e:	605a      	str	r2, [r3, #4]
 8000b40:	609a      	str	r2, [r3, #8]
 8000b42:	60da      	str	r2, [r3, #12]
 8000b44:	611a      	str	r2, [r3, #16]
 8000b46:	615a      	str	r2, [r3, #20]
 8000b48:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b4a:	4b28      	ldr	r3, [pc, #160]	@ (8000bec <MX_TIM2_Init+0xc4>)
 8000b4c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b50:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8000b52:	4b26      	ldr	r3, [pc, #152]	@ (8000bec <MX_TIM2_Init+0xc4>)
 8000b54:	2253      	movs	r2, #83	@ 0x53
 8000b56:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b58:	4b24      	ldr	r3, [pc, #144]	@ (8000bec <MX_TIM2_Init+0xc4>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000;
 8000b5e:	4b23      	ldr	r3, [pc, #140]	@ (8000bec <MX_TIM2_Init+0xc4>)
 8000b60:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000b64:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b66:	4b21      	ldr	r3, [pc, #132]	@ (8000bec <MX_TIM2_Init+0xc4>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b6c:	4b1f      	ldr	r3, [pc, #124]	@ (8000bec <MX_TIM2_Init+0xc4>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000b72:	481e      	ldr	r0, [pc, #120]	@ (8000bec <MX_TIM2_Init+0xc4>)
 8000b74:	f001 fdc7 	bl	8002706 <HAL_TIM_PWM_Init>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000b7e:	f000 f9d9 	bl	8000f34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b82:	2300      	movs	r3, #0
 8000b84:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b86:	2300      	movs	r3, #0
 8000b88:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b8a:	f107 0320 	add.w	r3, r7, #32
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4816      	ldr	r0, [pc, #88]	@ (8000bec <MX_TIM2_Init+0xc4>)
 8000b92:	f002 fe5b 	bl	800384c <HAL_TIMEx_MasterConfigSynchronization>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000b9c:	f000 f9ca 	bl	8000f34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ba0:	2360      	movs	r3, #96	@ 0x60
 8000ba2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500;
 8000ba4:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000ba8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000baa:	2300      	movs	r3, #0
 8000bac:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000bb2:	1d3b      	adds	r3, r7, #4
 8000bb4:	2204      	movs	r2, #4
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	480c      	ldr	r0, [pc, #48]	@ (8000bec <MX_TIM2_Init+0xc4>)
 8000bba:	f002 f9b9 	bl	8002f30 <HAL_TIM_PWM_ConfigChannel>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000bc4:	f000 f9b6 	bl	8000f34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000bc8:	1d3b      	adds	r3, r7, #4
 8000bca:	2208      	movs	r2, #8
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4807      	ldr	r0, [pc, #28]	@ (8000bec <MX_TIM2_Init+0xc4>)
 8000bd0:	f002 f9ae 	bl	8002f30 <HAL_TIM_PWM_ConfigChannel>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000bda:	f000 f9ab 	bl	8000f34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000bde:	4803      	ldr	r0, [pc, #12]	@ (8000bec <MX_TIM2_Init+0xc4>)
 8000be0:	f000 face 	bl	8001180 <HAL_TIM_MspPostInit>

}
 8000be4:	bf00      	nop
 8000be6:	3728      	adds	r7, #40	@ 0x28
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	20000070 	.word	0x20000070

08000bf0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b08a      	sub	sp, #40	@ 0x28
 8000bf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bf6:	f107 0320 	add.w	r3, r7, #32
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	601a      	str	r2, [r3, #0]
 8000bfe:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c00:	1d3b      	adds	r3, r7, #4
 8000c02:	2200      	movs	r2, #0
 8000c04:	601a      	str	r2, [r3, #0]
 8000c06:	605a      	str	r2, [r3, #4]
 8000c08:	609a      	str	r2, [r3, #8]
 8000c0a:	60da      	str	r2, [r3, #12]
 8000c0c:	611a      	str	r2, [r3, #16]
 8000c0e:	615a      	str	r2, [r3, #20]
 8000c10:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c12:	4b28      	ldr	r3, [pc, #160]	@ (8000cb4 <MX_TIM3_Init+0xc4>)
 8000c14:	4a28      	ldr	r2, [pc, #160]	@ (8000cb8 <MX_TIM3_Init+0xc8>)
 8000c16:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8000c18:	4b26      	ldr	r3, [pc, #152]	@ (8000cb4 <MX_TIM3_Init+0xc4>)
 8000c1a:	2253      	movs	r2, #83	@ 0x53
 8000c1c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c1e:	4b25      	ldr	r3, [pc, #148]	@ (8000cb4 <MX_TIM3_Init+0xc4>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000;
 8000c24:	4b23      	ldr	r3, [pc, #140]	@ (8000cb4 <MX_TIM3_Init+0xc4>)
 8000c26:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000c2a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c2c:	4b21      	ldr	r3, [pc, #132]	@ (8000cb4 <MX_TIM3_Init+0xc4>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c32:	4b20      	ldr	r3, [pc, #128]	@ (8000cb4 <MX_TIM3_Init+0xc4>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000c38:	481e      	ldr	r0, [pc, #120]	@ (8000cb4 <MX_TIM3_Init+0xc4>)
 8000c3a:	f001 fd64 	bl	8002706 <HAL_TIM_PWM_Init>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000c44:	f000 f976 	bl	8000f34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c50:	f107 0320 	add.w	r3, r7, #32
 8000c54:	4619      	mov	r1, r3
 8000c56:	4817      	ldr	r0, [pc, #92]	@ (8000cb4 <MX_TIM3_Init+0xc4>)
 8000c58:	f002 fdf8 	bl	800384c <HAL_TIMEx_MasterConfigSynchronization>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000c62:	f000 f967 	bl	8000f34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c66:	2360      	movs	r3, #96	@ 0x60
 8000c68:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500;
 8000c6a:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000c6e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c70:	2300      	movs	r3, #0
 8000c72:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c74:	2300      	movs	r3, #0
 8000c76:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c78:	1d3b      	adds	r3, r7, #4
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	480d      	ldr	r0, [pc, #52]	@ (8000cb4 <MX_TIM3_Init+0xc4>)
 8000c80:	f002 f956 	bl	8002f30 <HAL_TIM_PWM_ConfigChannel>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000c8a:	f000 f953 	bl	8000f34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c8e:	1d3b      	adds	r3, r7, #4
 8000c90:	2204      	movs	r2, #4
 8000c92:	4619      	mov	r1, r3
 8000c94:	4807      	ldr	r0, [pc, #28]	@ (8000cb4 <MX_TIM3_Init+0xc4>)
 8000c96:	f002 f94b 	bl	8002f30 <HAL_TIM_PWM_ConfigChannel>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000ca0:	f000 f948 	bl	8000f34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000ca4:	4803      	ldr	r0, [pc, #12]	@ (8000cb4 <MX_TIM3_Init+0xc4>)
 8000ca6:	f000 fa6b 	bl	8001180 <HAL_TIM_MspPostInit>

}
 8000caa:	bf00      	nop
 8000cac:	3728      	adds	r7, #40	@ 0x28
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	200000b8 	.word	0x200000b8
 8000cb8:	40000400 	.word	0x40000400

08000cbc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b08a      	sub	sp, #40	@ 0x28
 8000cc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cc2:	f107 0320 	add.w	r3, r7, #32
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	601a      	str	r2, [r3, #0]
 8000cca:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ccc:	1d3b      	adds	r3, r7, #4
 8000cce:	2200      	movs	r2, #0
 8000cd0:	601a      	str	r2, [r3, #0]
 8000cd2:	605a      	str	r2, [r3, #4]
 8000cd4:	609a      	str	r2, [r3, #8]
 8000cd6:	60da      	str	r2, [r3, #12]
 8000cd8:	611a      	str	r2, [r3, #16]
 8000cda:	615a      	str	r2, [r3, #20]
 8000cdc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000cde:	4b22      	ldr	r3, [pc, #136]	@ (8000d68 <MX_TIM4_Init+0xac>)
 8000ce0:	4a22      	ldr	r2, [pc, #136]	@ (8000d6c <MX_TIM4_Init+0xb0>)
 8000ce2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 8000ce4:	4b20      	ldr	r3, [pc, #128]	@ (8000d68 <MX_TIM4_Init+0xac>)
 8000ce6:	2253      	movs	r2, #83	@ 0x53
 8000ce8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cea:	4b1f      	ldr	r3, [pc, #124]	@ (8000d68 <MX_TIM4_Init+0xac>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000;
 8000cf0:	4b1d      	ldr	r3, [pc, #116]	@ (8000d68 <MX_TIM4_Init+0xac>)
 8000cf2:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000cf6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cf8:	4b1b      	ldr	r3, [pc, #108]	@ (8000d68 <MX_TIM4_Init+0xac>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cfe:	4b1a      	ldr	r3, [pc, #104]	@ (8000d68 <MX_TIM4_Init+0xac>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000d04:	4818      	ldr	r0, [pc, #96]	@ (8000d68 <MX_TIM4_Init+0xac>)
 8000d06:	f001 fcfe 	bl	8002706 <HAL_TIM_PWM_Init>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8000d10:	f000 f910 	bl	8000f34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d14:	2300      	movs	r3, #0
 8000d16:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d1c:	f107 0320 	add.w	r3, r7, #32
 8000d20:	4619      	mov	r1, r3
 8000d22:	4811      	ldr	r0, [pc, #68]	@ (8000d68 <MX_TIM4_Init+0xac>)
 8000d24:	f002 fd92 	bl	800384c <HAL_TIMEx_MasterConfigSynchronization>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8000d2e:	f000 f901 	bl	8000f34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d32:	2360      	movs	r3, #96	@ 0x60
 8000d34:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500;
 8000d36:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000d3a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d40:	2300      	movs	r3, #0
 8000d42:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d44:	1d3b      	adds	r3, r7, #4
 8000d46:	2200      	movs	r2, #0
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4807      	ldr	r0, [pc, #28]	@ (8000d68 <MX_TIM4_Init+0xac>)
 8000d4c:	f002 f8f0 	bl	8002f30 <HAL_TIM_PWM_ConfigChannel>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8000d56:	f000 f8ed 	bl	8000f34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000d5a:	4803      	ldr	r0, [pc, #12]	@ (8000d68 <MX_TIM4_Init+0xac>)
 8000d5c:	f000 fa10 	bl	8001180 <HAL_TIM_MspPostInit>

}
 8000d60:	bf00      	nop
 8000d62:	3728      	adds	r7, #40	@ 0x28
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	20000100 	.word	0x20000100
 8000d6c:	40000800 	.word	0x40000800

08000d70 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8000d76:	463b      	mov	r3, r7
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	605a      	str	r2, [r3, #4]
 8000d7e:	609a      	str	r2, [r3, #8]
 8000d80:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8000d82:	4b1d      	ldr	r3, [pc, #116]	@ (8000df8 <MX_TIM11_Init+0x88>)
 8000d84:	4a1d      	ldr	r2, [pc, #116]	@ (8000dfc <MX_TIM11_Init+0x8c>)
 8000d86:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 83;
 8000d88:	4b1b      	ldr	r3, [pc, #108]	@ (8000df8 <MX_TIM11_Init+0x88>)
 8000d8a:	2253      	movs	r2, #83	@ 0x53
 8000d8c:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d8e:	4b1a      	ldr	r3, [pc, #104]	@ (8000df8 <MX_TIM11_Init+0x88>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8000d94:	4b18      	ldr	r3, [pc, #96]	@ (8000df8 <MX_TIM11_Init+0x88>)
 8000d96:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d9a:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d9c:	4b16      	ldr	r3, [pc, #88]	@ (8000df8 <MX_TIM11_Init+0x88>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000da2:	4b15      	ldr	r3, [pc, #84]	@ (8000df8 <MX_TIM11_Init+0x88>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000da8:	4813      	ldr	r0, [pc, #76]	@ (8000df8 <MX_TIM11_Init+0x88>)
 8000daa:	f001 fc5d 	bl	8002668 <HAL_TIM_Base_Init>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <MX_TIM11_Init+0x48>
  {
    Error_Handler();
 8000db4:	f000 f8be 	bl	8000f34 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim11) != HAL_OK)
 8000db8:	480f      	ldr	r0, [pc, #60]	@ (8000df8 <MX_TIM11_Init+0x88>)
 8000dba:	f001 fda3 	bl	8002904 <HAL_TIM_IC_Init>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_TIM11_Init+0x58>
  {
    Error_Handler();
 8000dc4:	f000 f8b6 	bl	8000f34 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim11, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000dd8:	463b      	mov	r3, r7
 8000dda:	2200      	movs	r2, #0
 8000ddc:	4619      	mov	r1, r3
 8000dde:	4806      	ldr	r0, [pc, #24]	@ (8000df8 <MX_TIM11_Init+0x88>)
 8000de0:	f002 f809 	bl	8002df6 <HAL_TIM_IC_ConfigChannel>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <MX_TIM11_Init+0x7e>
  {
    Error_Handler();
 8000dea:	f000 f8a3 	bl	8000f34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8000dee:	bf00      	nop
 8000df0:	3710      	adds	r7, #16
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	20000148 	.word	0x20000148
 8000dfc:	40014800 	.word	0x40014800

08000e00 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e04:	4b11      	ldr	r3, [pc, #68]	@ (8000e4c <MX_USART2_UART_Init+0x4c>)
 8000e06:	4a12      	ldr	r2, [pc, #72]	@ (8000e50 <MX_USART2_UART_Init+0x50>)
 8000e08:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e0a:	4b10      	ldr	r3, [pc, #64]	@ (8000e4c <MX_USART2_UART_Init+0x4c>)
 8000e0c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e10:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e12:	4b0e      	ldr	r3, [pc, #56]	@ (8000e4c <MX_USART2_UART_Init+0x4c>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e18:	4b0c      	ldr	r3, [pc, #48]	@ (8000e4c <MX_USART2_UART_Init+0x4c>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e1e:	4b0b      	ldr	r3, [pc, #44]	@ (8000e4c <MX_USART2_UART_Init+0x4c>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e24:	4b09      	ldr	r3, [pc, #36]	@ (8000e4c <MX_USART2_UART_Init+0x4c>)
 8000e26:	220c      	movs	r2, #12
 8000e28:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e2a:	4b08      	ldr	r3, [pc, #32]	@ (8000e4c <MX_USART2_UART_Init+0x4c>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e30:	4b06      	ldr	r3, [pc, #24]	@ (8000e4c <MX_USART2_UART_Init+0x4c>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e36:	4805      	ldr	r0, [pc, #20]	@ (8000e4c <MX_USART2_UART_Init+0x4c>)
 8000e38:	f002 fddc 	bl	80039f4 <HAL_UART_Init>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e42:	f000 f877 	bl	8000f34 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e46:	bf00      	nop
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	20000190 	.word	0x20000190
 8000e50:	40004400 	.word	0x40004400

08000e54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b08a      	sub	sp, #40	@ 0x28
 8000e58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e5a:	f107 0314 	add.w	r3, r7, #20
 8000e5e:	2200      	movs	r2, #0
 8000e60:	601a      	str	r2, [r3, #0]
 8000e62:	605a      	str	r2, [r3, #4]
 8000e64:	609a      	str	r2, [r3, #8]
 8000e66:	60da      	str	r2, [r3, #12]
 8000e68:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	613b      	str	r3, [r7, #16]
 8000e6e:	4b2e      	ldr	r3, [pc, #184]	@ (8000f28 <MX_GPIO_Init+0xd4>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e72:	4a2d      	ldr	r2, [pc, #180]	@ (8000f28 <MX_GPIO_Init+0xd4>)
 8000e74:	f043 0304 	orr.w	r3, r3, #4
 8000e78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e7a:	4b2b      	ldr	r3, [pc, #172]	@ (8000f28 <MX_GPIO_Init+0xd4>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7e:	f003 0304 	and.w	r3, r3, #4
 8000e82:	613b      	str	r3, [r7, #16]
 8000e84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	60fb      	str	r3, [r7, #12]
 8000e8a:	4b27      	ldr	r3, [pc, #156]	@ (8000f28 <MX_GPIO_Init+0xd4>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8e:	4a26      	ldr	r2, [pc, #152]	@ (8000f28 <MX_GPIO_Init+0xd4>)
 8000e90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e96:	4b24      	ldr	r3, [pc, #144]	@ (8000f28 <MX_GPIO_Init+0xd4>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60bb      	str	r3, [r7, #8]
 8000ea6:	4b20      	ldr	r3, [pc, #128]	@ (8000f28 <MX_GPIO_Init+0xd4>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eaa:	4a1f      	ldr	r2, [pc, #124]	@ (8000f28 <MX_GPIO_Init+0xd4>)
 8000eac:	f043 0301 	orr.w	r3, r3, #1
 8000eb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eb2:	4b1d      	ldr	r3, [pc, #116]	@ (8000f28 <MX_GPIO_Init+0xd4>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb6:	f003 0301 	and.w	r3, r3, #1
 8000eba:	60bb      	str	r3, [r7, #8]
 8000ebc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	607b      	str	r3, [r7, #4]
 8000ec2:	4b19      	ldr	r3, [pc, #100]	@ (8000f28 <MX_GPIO_Init+0xd4>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec6:	4a18      	ldr	r2, [pc, #96]	@ (8000f28 <MX_GPIO_Init+0xd4>)
 8000ec8:	f043 0302 	orr.w	r3, r3, #2
 8000ecc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ece:	4b16      	ldr	r3, [pc, #88]	@ (8000f28 <MX_GPIO_Init+0xd4>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed2:	f003 0302 	and.w	r3, r3, #2
 8000ed6:	607b      	str	r3, [r7, #4]
 8000ed8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_9, GPIO_PIN_RESET);
 8000eda:	2200      	movs	r2, #0
 8000edc:	f44f 7110 	mov.w	r1, #576	@ 0x240
 8000ee0:	4812      	ldr	r0, [pc, #72]	@ (8000f2c <MX_GPIO_Init+0xd8>)
 8000ee2:	f000 fe1f 	bl	8001b24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ee6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000eea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000eec:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000ef0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ef6:	f107 0314 	add.w	r3, r7, #20
 8000efa:	4619      	mov	r1, r3
 8000efc:	480c      	ldr	r0, [pc, #48]	@ (8000f30 <MX_GPIO_Init+0xdc>)
 8000efe:	f000 fc75 	bl	80017ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000f02:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000f06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f10:	2300      	movs	r3, #0
 8000f12:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f14:	f107 0314 	add.w	r3, r7, #20
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4804      	ldr	r0, [pc, #16]	@ (8000f2c <MX_GPIO_Init+0xd8>)
 8000f1c:	f000 fc66 	bl	80017ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f20:	bf00      	nop
 8000f22:	3728      	adds	r7, #40	@ 0x28
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	40023800 	.word	0x40023800
 8000f2c:	40020000 	.word	0x40020000
 8000f30:	40020800 	.word	0x40020800

08000f34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f38:	b672      	cpsid	i
}
 8000f3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f3c:	bf00      	nop
 8000f3e:	e7fd      	b.n	8000f3c <Error_Handler+0x8>

08000f40 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	607b      	str	r3, [r7, #4]
 8000f4a:	4b10      	ldr	r3, [pc, #64]	@ (8000f8c <HAL_MspInit+0x4c>)
 8000f4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f4e:	4a0f      	ldr	r2, [pc, #60]	@ (8000f8c <HAL_MspInit+0x4c>)
 8000f50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f54:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f56:	4b0d      	ldr	r3, [pc, #52]	@ (8000f8c <HAL_MspInit+0x4c>)
 8000f58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f5e:	607b      	str	r3, [r7, #4]
 8000f60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	603b      	str	r3, [r7, #0]
 8000f66:	4b09      	ldr	r3, [pc, #36]	@ (8000f8c <HAL_MspInit+0x4c>)
 8000f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f6a:	4a08      	ldr	r2, [pc, #32]	@ (8000f8c <HAL_MspInit+0x4c>)
 8000f6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f70:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f72:	4b06      	ldr	r3, [pc, #24]	@ (8000f8c <HAL_MspInit+0x4c>)
 8000f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f7a:	603b      	str	r3, [r7, #0]
 8000f7c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f7e:	2007      	movs	r0, #7
 8000f80:	f000 fbf2 	bl	8001768 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f84:	bf00      	nop
 8000f86:	3708      	adds	r7, #8
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	40023800 	.word	0x40023800

08000f90 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b08c      	sub	sp, #48	@ 0x30
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f98:	f107 031c 	add.w	r3, r7, #28
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	60da      	str	r2, [r3, #12]
 8000fa6:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a3b      	ldr	r2, [pc, #236]	@ (800109c <HAL_TIM_PWM_MspInit+0x10c>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d135      	bne.n	800101e <HAL_TIM_PWM_MspInit+0x8e>
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	61bb      	str	r3, [r7, #24]
 8000fb6:	4b3a      	ldr	r3, [pc, #232]	@ (80010a0 <HAL_TIM_PWM_MspInit+0x110>)
 8000fb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fba:	4a39      	ldr	r2, [pc, #228]	@ (80010a0 <HAL_TIM_PWM_MspInit+0x110>)
 8000fbc:	f043 0301 	orr.w	r3, r3, #1
 8000fc0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fc2:	4b37      	ldr	r3, [pc, #220]	@ (80010a0 <HAL_TIM_PWM_MspInit+0x110>)
 8000fc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fc6:	f003 0301 	and.w	r3, r3, #1
 8000fca:	61bb      	str	r3, [r7, #24]
 8000fcc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	617b      	str	r3, [r7, #20]
 8000fd2:	4b33      	ldr	r3, [pc, #204]	@ (80010a0 <HAL_TIM_PWM_MspInit+0x110>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd6:	4a32      	ldr	r2, [pc, #200]	@ (80010a0 <HAL_TIM_PWM_MspInit+0x110>)
 8000fd8:	f043 0301 	orr.w	r3, r3, #1
 8000fdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fde:	4b30      	ldr	r3, [pc, #192]	@ (80010a0 <HAL_TIM_PWM_MspInit+0x110>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	617b      	str	r3, [r7, #20]
 8000fe8:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000fea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000fee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001000:	f107 031c 	add.w	r3, r7, #28
 8001004:	4619      	mov	r1, r3
 8001006:	4827      	ldr	r0, [pc, #156]	@ (80010a4 <HAL_TIM_PWM_MspInit+0x114>)
 8001008:	f000 fbf0 	bl	80017ec <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800100c:	2200      	movs	r2, #0
 800100e:	2100      	movs	r1, #0
 8001010:	201a      	movs	r0, #26
 8001012:	f000 fbb4 	bl	800177e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001016:	201a      	movs	r0, #26
 8001018:	f000 fbcd 	bl	80017b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800101c:	e03a      	b.n	8001094 <HAL_TIM_PWM_MspInit+0x104>
  else if(htim_pwm->Instance==TIM2)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001026:	d10e      	bne.n	8001046 <HAL_TIM_PWM_MspInit+0xb6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001028:	2300      	movs	r3, #0
 800102a:	613b      	str	r3, [r7, #16]
 800102c:	4b1c      	ldr	r3, [pc, #112]	@ (80010a0 <HAL_TIM_PWM_MspInit+0x110>)
 800102e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001030:	4a1b      	ldr	r2, [pc, #108]	@ (80010a0 <HAL_TIM_PWM_MspInit+0x110>)
 8001032:	f043 0301 	orr.w	r3, r3, #1
 8001036:	6413      	str	r3, [r2, #64]	@ 0x40
 8001038:	4b19      	ldr	r3, [pc, #100]	@ (80010a0 <HAL_TIM_PWM_MspInit+0x110>)
 800103a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800103c:	f003 0301 	and.w	r3, r3, #1
 8001040:	613b      	str	r3, [r7, #16]
 8001042:	693b      	ldr	r3, [r7, #16]
}
 8001044:	e026      	b.n	8001094 <HAL_TIM_PWM_MspInit+0x104>
  else if(htim_pwm->Instance==TIM3)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a17      	ldr	r2, [pc, #92]	@ (80010a8 <HAL_TIM_PWM_MspInit+0x118>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d10e      	bne.n	800106e <HAL_TIM_PWM_MspInit+0xde>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001050:	2300      	movs	r3, #0
 8001052:	60fb      	str	r3, [r7, #12]
 8001054:	4b12      	ldr	r3, [pc, #72]	@ (80010a0 <HAL_TIM_PWM_MspInit+0x110>)
 8001056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001058:	4a11      	ldr	r2, [pc, #68]	@ (80010a0 <HAL_TIM_PWM_MspInit+0x110>)
 800105a:	f043 0302 	orr.w	r3, r3, #2
 800105e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001060:	4b0f      	ldr	r3, [pc, #60]	@ (80010a0 <HAL_TIM_PWM_MspInit+0x110>)
 8001062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001064:	f003 0302 	and.w	r3, r3, #2
 8001068:	60fb      	str	r3, [r7, #12]
 800106a:	68fb      	ldr	r3, [r7, #12]
}
 800106c:	e012      	b.n	8001094 <HAL_TIM_PWM_MspInit+0x104>
  else if(htim_pwm->Instance==TIM4)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a0e      	ldr	r2, [pc, #56]	@ (80010ac <HAL_TIM_PWM_MspInit+0x11c>)
 8001074:	4293      	cmp	r3, r2
 8001076:	d10d      	bne.n	8001094 <HAL_TIM_PWM_MspInit+0x104>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001078:	2300      	movs	r3, #0
 800107a:	60bb      	str	r3, [r7, #8]
 800107c:	4b08      	ldr	r3, [pc, #32]	@ (80010a0 <HAL_TIM_PWM_MspInit+0x110>)
 800107e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001080:	4a07      	ldr	r2, [pc, #28]	@ (80010a0 <HAL_TIM_PWM_MspInit+0x110>)
 8001082:	f043 0304 	orr.w	r3, r3, #4
 8001086:	6413      	str	r3, [r2, #64]	@ 0x40
 8001088:	4b05      	ldr	r3, [pc, #20]	@ (80010a0 <HAL_TIM_PWM_MspInit+0x110>)
 800108a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800108c:	f003 0304 	and.w	r3, r3, #4
 8001090:	60bb      	str	r3, [r7, #8]
 8001092:	68bb      	ldr	r3, [r7, #8]
}
 8001094:	bf00      	nop
 8001096:	3730      	adds	r7, #48	@ 0x30
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40010000 	.word	0x40010000
 80010a0:	40023800 	.word	0x40023800
 80010a4:	40020000 	.word	0x40020000
 80010a8:	40000400 	.word	0x40000400
 80010ac:	40000800 	.word	0x40000800

080010b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b090      	sub	sp, #64	@ 0x40
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	609a      	str	r2, [r3, #8]
 80010c4:	60da      	str	r2, [r3, #12]
 80010c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010c8:	f107 0314 	add.w	r3, r7, #20
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	605a      	str	r2, [r3, #4]
 80010d2:	609a      	str	r2, [r3, #8]
 80010d4:	60da      	str	r2, [r3, #12]
 80010d6:	611a      	str	r2, [r3, #16]
 80010d8:	615a      	str	r2, [r3, #20]
  if(htim_base->Instance==TIM11)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a25      	ldr	r2, [pc, #148]	@ (8001174 <HAL_TIM_Base_MspInit+0xc4>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d143      	bne.n	800116c <HAL_TIM_Base_MspInit+0xbc>

  /* USER CODE END TIM11_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80010e4:	2302      	movs	r3, #2
 80010e6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80010e8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80010ec:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010ee:	f107 0314 	add.w	r3, r7, #20
 80010f2:	4618      	mov	r0, r3
 80010f4:	f001 f9c8 	bl	8002488 <HAL_RCCEx_PeriphCLKConfig>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <HAL_TIM_Base_MspInit+0x52>
    {
      Error_Handler();
 80010fe:	f7ff ff19 	bl	8000f34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001102:	2300      	movs	r3, #0
 8001104:	613b      	str	r3, [r7, #16]
 8001106:	4b1c      	ldr	r3, [pc, #112]	@ (8001178 <HAL_TIM_Base_MspInit+0xc8>)
 8001108:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800110a:	4a1b      	ldr	r2, [pc, #108]	@ (8001178 <HAL_TIM_Base_MspInit+0xc8>)
 800110c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001110:	6453      	str	r3, [r2, #68]	@ 0x44
 8001112:	4b19      	ldr	r3, [pc, #100]	@ (8001178 <HAL_TIM_Base_MspInit+0xc8>)
 8001114:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001116:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800111a:	613b      	str	r3, [r7, #16]
 800111c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800111e:	2300      	movs	r3, #0
 8001120:	60fb      	str	r3, [r7, #12]
 8001122:	4b15      	ldr	r3, [pc, #84]	@ (8001178 <HAL_TIM_Base_MspInit+0xc8>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001126:	4a14      	ldr	r2, [pc, #80]	@ (8001178 <HAL_TIM_Base_MspInit+0xc8>)
 8001128:	f043 0302 	orr.w	r3, r3, #2
 800112c:	6313      	str	r3, [r2, #48]	@ 0x30
 800112e:	4b12      	ldr	r3, [pc, #72]	@ (8001178 <HAL_TIM_Base_MspInit+0xc8>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001132:	f003 0302 	and.w	r3, r3, #2
 8001136:	60fb      	str	r3, [r7, #12]
 8001138:	68fb      	ldr	r3, [r7, #12]
    /**TIM11 GPIO Configuration
    PB9     ------> TIM11_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800113a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800113e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001140:	2302      	movs	r3, #2
 8001142:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001144:	2300      	movs	r3, #0
 8001146:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001148:	2300      	movs	r3, #0
 800114a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 800114c:	2303      	movs	r3, #3
 800114e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001150:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001154:	4619      	mov	r1, r3
 8001156:	4809      	ldr	r0, [pc, #36]	@ (800117c <HAL_TIM_Base_MspInit+0xcc>)
 8001158:	f000 fb48 	bl	80017ec <HAL_GPIO_Init>

    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800115c:	2200      	movs	r2, #0
 800115e:	2100      	movs	r1, #0
 8001160:	201a      	movs	r0, #26
 8001162:	f000 fb0c 	bl	800177e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001166:	201a      	movs	r0, #26
 8001168:	f000 fb25 	bl	80017b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 800116c:	bf00      	nop
 800116e:	3740      	adds	r7, #64	@ 0x40
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	40014800 	.word	0x40014800
 8001178:	40023800 	.word	0x40023800
 800117c:	40020400 	.word	0x40020400

08001180 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b08c      	sub	sp, #48	@ 0x30
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001188:	f107 031c 	add.w	r3, r7, #28
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	605a      	str	r2, [r3, #4]
 8001192:	609a      	str	r2, [r3, #8]
 8001194:	60da      	str	r2, [r3, #12]
 8001196:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a58      	ldr	r2, [pc, #352]	@ (8001300 <HAL_TIM_MspPostInit+0x180>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d11f      	bne.n	80011e2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	61bb      	str	r3, [r7, #24]
 80011a6:	4b57      	ldr	r3, [pc, #348]	@ (8001304 <HAL_TIM_MspPostInit+0x184>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011aa:	4a56      	ldr	r2, [pc, #344]	@ (8001304 <HAL_TIM_MspPostInit+0x184>)
 80011ac:	f043 0301 	orr.w	r3, r3, #1
 80011b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011b2:	4b54      	ldr	r3, [pc, #336]	@ (8001304 <HAL_TIM_MspPostInit+0x184>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b6:	f003 0301 	and.w	r3, r3, #1
 80011ba:	61bb      	str	r3, [r7, #24]
 80011bc:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80011be:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c4:	2302      	movs	r3, #2
 80011c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c8:	2300      	movs	r3, #0
 80011ca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011cc:	2300      	movs	r3, #0
 80011ce:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80011d0:	2301      	movs	r3, #1
 80011d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d4:	f107 031c 	add.w	r3, r7, #28
 80011d8:	4619      	mov	r1, r3
 80011da:	484b      	ldr	r0, [pc, #300]	@ (8001308 <HAL_TIM_MspPostInit+0x188>)
 80011dc:	f000 fb06 	bl	80017ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80011e0:	e089      	b.n	80012f6 <HAL_TIM_MspPostInit+0x176>
  else if(htim->Instance==TIM2)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80011ea:	d11f      	bne.n	800122c <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ec:	2300      	movs	r3, #0
 80011ee:	617b      	str	r3, [r7, #20]
 80011f0:	4b44      	ldr	r3, [pc, #272]	@ (8001304 <HAL_TIM_MspPostInit+0x184>)
 80011f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f4:	4a43      	ldr	r2, [pc, #268]	@ (8001304 <HAL_TIM_MspPostInit+0x184>)
 80011f6:	f043 0302 	orr.w	r3, r3, #2
 80011fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80011fc:	4b41      	ldr	r3, [pc, #260]	@ (8001304 <HAL_TIM_MspPostInit+0x184>)
 80011fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001200:	f003 0302 	and.w	r3, r3, #2
 8001204:	617b      	str	r3, [r7, #20]
 8001206:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
 8001208:	f44f 6381 	mov.w	r3, #1032	@ 0x408
 800120c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120e:	2302      	movs	r3, #2
 8001210:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001212:	2300      	movs	r3, #0
 8001214:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001216:	2300      	movs	r3, #0
 8001218:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800121a:	2301      	movs	r3, #1
 800121c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800121e:	f107 031c 	add.w	r3, r7, #28
 8001222:	4619      	mov	r1, r3
 8001224:	4839      	ldr	r0, [pc, #228]	@ (800130c <HAL_TIM_MspPostInit+0x18c>)
 8001226:	f000 fae1 	bl	80017ec <HAL_GPIO_Init>
}
 800122a:	e064      	b.n	80012f6 <HAL_TIM_MspPostInit+0x176>
  else if(htim->Instance==TIM3)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a37      	ldr	r2, [pc, #220]	@ (8001310 <HAL_TIM_MspPostInit+0x190>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d13c      	bne.n	80012b0 <HAL_TIM_MspPostInit+0x130>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001236:	2300      	movs	r3, #0
 8001238:	613b      	str	r3, [r7, #16]
 800123a:	4b32      	ldr	r3, [pc, #200]	@ (8001304 <HAL_TIM_MspPostInit+0x184>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800123e:	4a31      	ldr	r2, [pc, #196]	@ (8001304 <HAL_TIM_MspPostInit+0x184>)
 8001240:	f043 0301 	orr.w	r3, r3, #1
 8001244:	6313      	str	r3, [r2, #48]	@ 0x30
 8001246:	4b2f      	ldr	r3, [pc, #188]	@ (8001304 <HAL_TIM_MspPostInit+0x184>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	613b      	str	r3, [r7, #16]
 8001250:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001252:	2300      	movs	r3, #0
 8001254:	60fb      	str	r3, [r7, #12]
 8001256:	4b2b      	ldr	r3, [pc, #172]	@ (8001304 <HAL_TIM_MspPostInit+0x184>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125a:	4a2a      	ldr	r2, [pc, #168]	@ (8001304 <HAL_TIM_MspPostInit+0x184>)
 800125c:	f043 0302 	orr.w	r3, r3, #2
 8001260:	6313      	str	r3, [r2, #48]	@ 0x30
 8001262:	4b28      	ldr	r3, [pc, #160]	@ (8001304 <HAL_TIM_MspPostInit+0x184>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001266:	f003 0302 	and.w	r3, r3, #2
 800126a:	60fb      	str	r3, [r7, #12]
 800126c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800126e:	2380      	movs	r3, #128	@ 0x80
 8001270:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001272:	2302      	movs	r3, #2
 8001274:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001276:	2300      	movs	r3, #0
 8001278:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127a:	2300      	movs	r3, #0
 800127c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800127e:	2302      	movs	r3, #2
 8001280:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001282:	f107 031c 	add.w	r3, r7, #28
 8001286:	4619      	mov	r1, r3
 8001288:	481f      	ldr	r0, [pc, #124]	@ (8001308 <HAL_TIM_MspPostInit+0x188>)
 800128a:	f000 faaf 	bl	80017ec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800128e:	2310      	movs	r3, #16
 8001290:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001292:	2302      	movs	r3, #2
 8001294:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001296:	2300      	movs	r3, #0
 8001298:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129a:	2300      	movs	r3, #0
 800129c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800129e:	2302      	movs	r3, #2
 80012a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a2:	f107 031c 	add.w	r3, r7, #28
 80012a6:	4619      	mov	r1, r3
 80012a8:	4818      	ldr	r0, [pc, #96]	@ (800130c <HAL_TIM_MspPostInit+0x18c>)
 80012aa:	f000 fa9f 	bl	80017ec <HAL_GPIO_Init>
}
 80012ae:	e022      	b.n	80012f6 <HAL_TIM_MspPostInit+0x176>
  else if(htim->Instance==TIM4)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a17      	ldr	r2, [pc, #92]	@ (8001314 <HAL_TIM_MspPostInit+0x194>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d11d      	bne.n	80012f6 <HAL_TIM_MspPostInit+0x176>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	60bb      	str	r3, [r7, #8]
 80012be:	4b11      	ldr	r3, [pc, #68]	@ (8001304 <HAL_TIM_MspPostInit+0x184>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c2:	4a10      	ldr	r2, [pc, #64]	@ (8001304 <HAL_TIM_MspPostInit+0x184>)
 80012c4:	f043 0302 	orr.w	r3, r3, #2
 80012c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001304 <HAL_TIM_MspPostInit+0x184>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ce:	f003 0302 	and.w	r3, r3, #2
 80012d2:	60bb      	str	r3, [r7, #8]
 80012d4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80012d6:	2340      	movs	r3, #64	@ 0x40
 80012d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012da:	2302      	movs	r3, #2
 80012dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012de:	2300      	movs	r3, #0
 80012e0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e2:	2300      	movs	r3, #0
 80012e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80012e6:	2302      	movs	r3, #2
 80012e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ea:	f107 031c 	add.w	r3, r7, #28
 80012ee:	4619      	mov	r1, r3
 80012f0:	4806      	ldr	r0, [pc, #24]	@ (800130c <HAL_TIM_MspPostInit+0x18c>)
 80012f2:	f000 fa7b 	bl	80017ec <HAL_GPIO_Init>
}
 80012f6:	bf00      	nop
 80012f8:	3730      	adds	r7, #48	@ 0x30
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	40010000 	.word	0x40010000
 8001304:	40023800 	.word	0x40023800
 8001308:	40020000 	.word	0x40020000
 800130c:	40020400 	.word	0x40020400
 8001310:	40000400 	.word	0x40000400
 8001314:	40000800 	.word	0x40000800

08001318 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b08a      	sub	sp, #40	@ 0x28
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001320:	f107 0314 	add.w	r3, r7, #20
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	60da      	str	r2, [r3, #12]
 800132e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a19      	ldr	r2, [pc, #100]	@ (800139c <HAL_UART_MspInit+0x84>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d12b      	bne.n	8001392 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800133a:	2300      	movs	r3, #0
 800133c:	613b      	str	r3, [r7, #16]
 800133e:	4b18      	ldr	r3, [pc, #96]	@ (80013a0 <HAL_UART_MspInit+0x88>)
 8001340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001342:	4a17      	ldr	r2, [pc, #92]	@ (80013a0 <HAL_UART_MspInit+0x88>)
 8001344:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001348:	6413      	str	r3, [r2, #64]	@ 0x40
 800134a:	4b15      	ldr	r3, [pc, #84]	@ (80013a0 <HAL_UART_MspInit+0x88>)
 800134c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800134e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001352:	613b      	str	r3, [r7, #16]
 8001354:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	60fb      	str	r3, [r7, #12]
 800135a:	4b11      	ldr	r3, [pc, #68]	@ (80013a0 <HAL_UART_MspInit+0x88>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800135e:	4a10      	ldr	r2, [pc, #64]	@ (80013a0 <HAL_UART_MspInit+0x88>)
 8001360:	f043 0301 	orr.w	r3, r3, #1
 8001364:	6313      	str	r3, [r2, #48]	@ 0x30
 8001366:	4b0e      	ldr	r3, [pc, #56]	@ (80013a0 <HAL_UART_MspInit+0x88>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	60fb      	str	r3, [r7, #12]
 8001370:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001372:	230c      	movs	r3, #12
 8001374:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001376:	2302      	movs	r3, #2
 8001378:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137a:	2300      	movs	r3, #0
 800137c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800137e:	2303      	movs	r3, #3
 8001380:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001382:	2307      	movs	r3, #7
 8001384:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001386:	f107 0314 	add.w	r3, r7, #20
 800138a:	4619      	mov	r1, r3
 800138c:	4805      	ldr	r0, [pc, #20]	@ (80013a4 <HAL_UART_MspInit+0x8c>)
 800138e:	f000 fa2d 	bl	80017ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001392:	bf00      	nop
 8001394:	3728      	adds	r7, #40	@ 0x28
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	40004400 	.word	0x40004400
 80013a0:	40023800 	.word	0x40023800
 80013a4:	40020000 	.word	0x40020000

080013a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013ac:	bf00      	nop
 80013ae:	e7fd      	b.n	80013ac <NMI_Handler+0x4>

080013b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013b4:	bf00      	nop
 80013b6:	e7fd      	b.n	80013b4 <HardFault_Handler+0x4>

080013b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013bc:	bf00      	nop
 80013be:	e7fd      	b.n	80013bc <MemManage_Handler+0x4>

080013c0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013c4:	bf00      	nop
 80013c6:	e7fd      	b.n	80013c4 <BusFault_Handler+0x4>

080013c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013cc:	bf00      	nop
 80013ce:	e7fd      	b.n	80013cc <UsageFault_Handler+0x4>

080013d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013d4:	bf00      	nop
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr

080013de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013de:	b480      	push	{r7}
 80013e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013e2:	bf00      	nop
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013f0:	bf00      	nop
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr

080013fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013fa:	b580      	push	{r7, lr}
 80013fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013fe:	f000 f89f 	bl	8001540 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001402:	bf00      	nop
 8001404:	bd80      	pop	{r7, pc}
	...

08001408 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800140c:	4803      	ldr	r0, [pc, #12]	@ (800141c <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 800140e:	f001 fc02 	bl	8002c16 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8001412:	4803      	ldr	r0, [pc, #12]	@ (8001420 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8001414:	f001 fbff 	bl	8002c16 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001418:	bf00      	nop
 800141a:	bd80      	pop	{r7, pc}
 800141c:	20000028 	.word	0x20000028
 8001420:	20000148 	.word	0x20000148

08001424 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001428:	4b06      	ldr	r3, [pc, #24]	@ (8001444 <SystemInit+0x20>)
 800142a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800142e:	4a05      	ldr	r2, [pc, #20]	@ (8001444 <SystemInit+0x20>)
 8001430:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001434:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001438:	bf00      	nop
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	e000ed00 	.word	0xe000ed00

08001448 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001448:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001480 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800144c:	f7ff ffea 	bl	8001424 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001450:	480c      	ldr	r0, [pc, #48]	@ (8001484 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001452:	490d      	ldr	r1, [pc, #52]	@ (8001488 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001454:	4a0d      	ldr	r2, [pc, #52]	@ (800148c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001456:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001458:	e002      	b.n	8001460 <LoopCopyDataInit>

0800145a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800145a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800145c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800145e:	3304      	adds	r3, #4

08001460 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001460:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001462:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001464:	d3f9      	bcc.n	800145a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001466:	4a0a      	ldr	r2, [pc, #40]	@ (8001490 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001468:	4c0a      	ldr	r4, [pc, #40]	@ (8001494 <LoopFillZerobss+0x22>)
  movs r3, #0
 800146a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800146c:	e001      	b.n	8001472 <LoopFillZerobss>

0800146e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800146e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001470:	3204      	adds	r2, #4

08001472 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001472:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001474:	d3fb      	bcc.n	800146e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001476:	f002 fd89 	bl	8003f8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800147a:	f7ff f921 	bl	80006c0 <main>
  bx  lr    
 800147e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001480:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001484:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001488:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800148c:	08004014 	.word	0x08004014
  ldr r2, =_sbss
 8001490:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001494:	200001f8 	.word	0x200001f8

08001498 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001498:	e7fe      	b.n	8001498 <ADC_IRQHandler>
	...

0800149c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014a0:	4b0e      	ldr	r3, [pc, #56]	@ (80014dc <HAL_Init+0x40>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a0d      	ldr	r2, [pc, #52]	@ (80014dc <HAL_Init+0x40>)
 80014a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80014aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014ac:	4b0b      	ldr	r3, [pc, #44]	@ (80014dc <HAL_Init+0x40>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a0a      	ldr	r2, [pc, #40]	@ (80014dc <HAL_Init+0x40>)
 80014b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80014b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014b8:	4b08      	ldr	r3, [pc, #32]	@ (80014dc <HAL_Init+0x40>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a07      	ldr	r2, [pc, #28]	@ (80014dc <HAL_Init+0x40>)
 80014be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014c4:	2003      	movs	r0, #3
 80014c6:	f000 f94f 	bl	8001768 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014ca:	2000      	movs	r0, #0
 80014cc:	f000 f808 	bl	80014e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014d0:	f7ff fd36 	bl	8000f40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014d4:	2300      	movs	r3, #0
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	40023c00 	.word	0x40023c00

080014e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014e8:	4b12      	ldr	r3, [pc, #72]	@ (8001534 <HAL_InitTick+0x54>)
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	4b12      	ldr	r3, [pc, #72]	@ (8001538 <HAL_InitTick+0x58>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	4619      	mov	r1, r3
 80014f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80014fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80014fe:	4618      	mov	r0, r3
 8001500:	f000 f967 	bl	80017d2 <HAL_SYSTICK_Config>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e00e      	b.n	800152c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2b0f      	cmp	r3, #15
 8001512:	d80a      	bhi.n	800152a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001514:	2200      	movs	r2, #0
 8001516:	6879      	ldr	r1, [r7, #4]
 8001518:	f04f 30ff 	mov.w	r0, #4294967295
 800151c:	f000 f92f 	bl	800177e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001520:	4a06      	ldr	r2, [pc, #24]	@ (800153c <HAL_InitTick+0x5c>)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001526:	2300      	movs	r3, #0
 8001528:	e000      	b.n	800152c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
}
 800152c:	4618      	mov	r0, r3
 800152e:	3708      	adds	r7, #8
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	20000000 	.word	0x20000000
 8001538:	20000008 	.word	0x20000008
 800153c:	20000004 	.word	0x20000004

08001540 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001544:	4b06      	ldr	r3, [pc, #24]	@ (8001560 <HAL_IncTick+0x20>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	461a      	mov	r2, r3
 800154a:	4b06      	ldr	r3, [pc, #24]	@ (8001564 <HAL_IncTick+0x24>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4413      	add	r3, r2
 8001550:	4a04      	ldr	r2, [pc, #16]	@ (8001564 <HAL_IncTick+0x24>)
 8001552:	6013      	str	r3, [r2, #0]
}
 8001554:	bf00      	nop
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	20000008 	.word	0x20000008
 8001564:	200001f4 	.word	0x200001f4

08001568 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  return uwTick;
 800156c:	4b03      	ldr	r3, [pc, #12]	@ (800157c <HAL_GetTick+0x14>)
 800156e:	681b      	ldr	r3, [r3, #0]
}
 8001570:	4618      	mov	r0, r3
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	200001f4 	.word	0x200001f4

08001580 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b084      	sub	sp, #16
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001588:	f7ff ffee 	bl	8001568 <HAL_GetTick>
 800158c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001598:	d005      	beq.n	80015a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800159a:	4b0a      	ldr	r3, [pc, #40]	@ (80015c4 <HAL_Delay+0x44>)
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	461a      	mov	r2, r3
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	4413      	add	r3, r2
 80015a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80015a6:	bf00      	nop
 80015a8:	f7ff ffde 	bl	8001568 <HAL_GetTick>
 80015ac:	4602      	mov	r2, r0
 80015ae:	68bb      	ldr	r3, [r7, #8]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	68fa      	ldr	r2, [r7, #12]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d8f7      	bhi.n	80015a8 <HAL_Delay+0x28>
  {
  }
}
 80015b8:	bf00      	nop
 80015ba:	bf00      	nop
 80015bc:	3710      	adds	r7, #16
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	20000008 	.word	0x20000008

080015c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b085      	sub	sp, #20
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	f003 0307 	and.w	r3, r3, #7
 80015d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015d8:	4b0c      	ldr	r3, [pc, #48]	@ (800160c <__NVIC_SetPriorityGrouping+0x44>)
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015de:	68ba      	ldr	r2, [r7, #8]
 80015e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015e4:	4013      	ands	r3, r2
 80015e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80015f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015fa:	4a04      	ldr	r2, [pc, #16]	@ (800160c <__NVIC_SetPriorityGrouping+0x44>)
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	60d3      	str	r3, [r2, #12]
}
 8001600:	bf00      	nop
 8001602:	3714      	adds	r7, #20
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr
 800160c:	e000ed00 	.word	0xe000ed00

08001610 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001614:	4b04      	ldr	r3, [pc, #16]	@ (8001628 <__NVIC_GetPriorityGrouping+0x18>)
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	0a1b      	lsrs	r3, r3, #8
 800161a:	f003 0307 	and.w	r3, r3, #7
}
 800161e:	4618      	mov	r0, r3
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr
 8001628:	e000ed00 	.word	0xe000ed00

0800162c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	4603      	mov	r3, r0
 8001634:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163a:	2b00      	cmp	r3, #0
 800163c:	db0b      	blt.n	8001656 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800163e:	79fb      	ldrb	r3, [r7, #7]
 8001640:	f003 021f 	and.w	r2, r3, #31
 8001644:	4907      	ldr	r1, [pc, #28]	@ (8001664 <__NVIC_EnableIRQ+0x38>)
 8001646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800164a:	095b      	lsrs	r3, r3, #5
 800164c:	2001      	movs	r0, #1
 800164e:	fa00 f202 	lsl.w	r2, r0, r2
 8001652:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001656:	bf00      	nop
 8001658:	370c      	adds	r7, #12
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	e000e100 	.word	0xe000e100

08001668 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	4603      	mov	r3, r0
 8001670:	6039      	str	r1, [r7, #0]
 8001672:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001674:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001678:	2b00      	cmp	r3, #0
 800167a:	db0a      	blt.n	8001692 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	b2da      	uxtb	r2, r3
 8001680:	490c      	ldr	r1, [pc, #48]	@ (80016b4 <__NVIC_SetPriority+0x4c>)
 8001682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001686:	0112      	lsls	r2, r2, #4
 8001688:	b2d2      	uxtb	r2, r2
 800168a:	440b      	add	r3, r1
 800168c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001690:	e00a      	b.n	80016a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	b2da      	uxtb	r2, r3
 8001696:	4908      	ldr	r1, [pc, #32]	@ (80016b8 <__NVIC_SetPriority+0x50>)
 8001698:	79fb      	ldrb	r3, [r7, #7]
 800169a:	f003 030f 	and.w	r3, r3, #15
 800169e:	3b04      	subs	r3, #4
 80016a0:	0112      	lsls	r2, r2, #4
 80016a2:	b2d2      	uxtb	r2, r2
 80016a4:	440b      	add	r3, r1
 80016a6:	761a      	strb	r2, [r3, #24]
}
 80016a8:	bf00      	nop
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr
 80016b4:	e000e100 	.word	0xe000e100
 80016b8:	e000ed00 	.word	0xe000ed00

080016bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016bc:	b480      	push	{r7}
 80016be:	b089      	sub	sp, #36	@ 0x24
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	60f8      	str	r0, [r7, #12]
 80016c4:	60b9      	str	r1, [r7, #8]
 80016c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	f003 0307 	and.w	r3, r3, #7
 80016ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	f1c3 0307 	rsb	r3, r3, #7
 80016d6:	2b04      	cmp	r3, #4
 80016d8:	bf28      	it	cs
 80016da:	2304      	movcs	r3, #4
 80016dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	3304      	adds	r3, #4
 80016e2:	2b06      	cmp	r3, #6
 80016e4:	d902      	bls.n	80016ec <NVIC_EncodePriority+0x30>
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	3b03      	subs	r3, #3
 80016ea:	e000      	b.n	80016ee <NVIC_EncodePriority+0x32>
 80016ec:	2300      	movs	r3, #0
 80016ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f0:	f04f 32ff 	mov.w	r2, #4294967295
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	fa02 f303 	lsl.w	r3, r2, r3
 80016fa:	43da      	mvns	r2, r3
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	401a      	ands	r2, r3
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001704:	f04f 31ff 	mov.w	r1, #4294967295
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	fa01 f303 	lsl.w	r3, r1, r3
 800170e:	43d9      	mvns	r1, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001714:	4313      	orrs	r3, r2
         );
}
 8001716:	4618      	mov	r0, r3
 8001718:	3724      	adds	r7, #36	@ 0x24
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
	...

08001724 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	3b01      	subs	r3, #1
 8001730:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001734:	d301      	bcc.n	800173a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001736:	2301      	movs	r3, #1
 8001738:	e00f      	b.n	800175a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800173a:	4a0a      	ldr	r2, [pc, #40]	@ (8001764 <SysTick_Config+0x40>)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	3b01      	subs	r3, #1
 8001740:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001742:	210f      	movs	r1, #15
 8001744:	f04f 30ff 	mov.w	r0, #4294967295
 8001748:	f7ff ff8e 	bl	8001668 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800174c:	4b05      	ldr	r3, [pc, #20]	@ (8001764 <SysTick_Config+0x40>)
 800174e:	2200      	movs	r2, #0
 8001750:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001752:	4b04      	ldr	r3, [pc, #16]	@ (8001764 <SysTick_Config+0x40>)
 8001754:	2207      	movs	r2, #7
 8001756:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001758:	2300      	movs	r3, #0
}
 800175a:	4618      	mov	r0, r3
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	e000e010 	.word	0xe000e010

08001768 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	f7ff ff29 	bl	80015c8 <__NVIC_SetPriorityGrouping>
}
 8001776:	bf00      	nop
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}

0800177e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800177e:	b580      	push	{r7, lr}
 8001780:	b086      	sub	sp, #24
 8001782:	af00      	add	r7, sp, #0
 8001784:	4603      	mov	r3, r0
 8001786:	60b9      	str	r1, [r7, #8]
 8001788:	607a      	str	r2, [r7, #4]
 800178a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800178c:	2300      	movs	r3, #0
 800178e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001790:	f7ff ff3e 	bl	8001610 <__NVIC_GetPriorityGrouping>
 8001794:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001796:	687a      	ldr	r2, [r7, #4]
 8001798:	68b9      	ldr	r1, [r7, #8]
 800179a:	6978      	ldr	r0, [r7, #20]
 800179c:	f7ff ff8e 	bl	80016bc <NVIC_EncodePriority>
 80017a0:	4602      	mov	r2, r0
 80017a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017a6:	4611      	mov	r1, r2
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7ff ff5d 	bl	8001668 <__NVIC_SetPriority>
}
 80017ae:	bf00      	nop
 80017b0:	3718      	adds	r7, #24
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017b6:	b580      	push	{r7, lr}
 80017b8:	b082      	sub	sp, #8
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	4603      	mov	r3, r0
 80017be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7ff ff31 	bl	800162c <__NVIC_EnableIRQ>
}
 80017ca:	bf00      	nop
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}

080017d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017d2:	b580      	push	{r7, lr}
 80017d4:	b082      	sub	sp, #8
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f7ff ffa2 	bl	8001724 <SysTick_Config>
 80017e0:	4603      	mov	r3, r0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
	...

080017ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b089      	sub	sp, #36	@ 0x24
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017f6:	2300      	movs	r3, #0
 80017f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017fa:	2300      	movs	r3, #0
 80017fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017fe:	2300      	movs	r3, #0
 8001800:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001802:	2300      	movs	r3, #0
 8001804:	61fb      	str	r3, [r7, #28]
 8001806:	e159      	b.n	8001abc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001808:	2201      	movs	r2, #1
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	fa02 f303 	lsl.w	r3, r2, r3
 8001810:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	697a      	ldr	r2, [r7, #20]
 8001818:	4013      	ands	r3, r2
 800181a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800181c:	693a      	ldr	r2, [r7, #16]
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	429a      	cmp	r2, r3
 8001822:	f040 8148 	bne.w	8001ab6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f003 0303 	and.w	r3, r3, #3
 800182e:	2b01      	cmp	r3, #1
 8001830:	d005      	beq.n	800183e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800183a:	2b02      	cmp	r3, #2
 800183c:	d130      	bne.n	80018a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	2203      	movs	r2, #3
 800184a:	fa02 f303 	lsl.w	r3, r2, r3
 800184e:	43db      	mvns	r3, r3
 8001850:	69ba      	ldr	r2, [r7, #24]
 8001852:	4013      	ands	r3, r2
 8001854:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	68da      	ldr	r2, [r3, #12]
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	005b      	lsls	r3, r3, #1
 800185e:	fa02 f303 	lsl.w	r3, r2, r3
 8001862:	69ba      	ldr	r2, [r7, #24]
 8001864:	4313      	orrs	r3, r2
 8001866:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	69ba      	ldr	r2, [r7, #24]
 800186c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001874:	2201      	movs	r2, #1
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	43db      	mvns	r3, r3
 800187e:	69ba      	ldr	r2, [r7, #24]
 8001880:	4013      	ands	r3, r2
 8001882:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	091b      	lsrs	r3, r3, #4
 800188a:	f003 0201 	and.w	r2, r3, #1
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	4313      	orrs	r3, r2
 8001898:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	69ba      	ldr	r2, [r7, #24]
 800189e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f003 0303 	and.w	r3, r3, #3
 80018a8:	2b03      	cmp	r3, #3
 80018aa:	d017      	beq.n	80018dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	2203      	movs	r2, #3
 80018b8:	fa02 f303 	lsl.w	r3, r2, r3
 80018bc:	43db      	mvns	r3, r3
 80018be:	69ba      	ldr	r2, [r7, #24]
 80018c0:	4013      	ands	r3, r2
 80018c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	689a      	ldr	r2, [r3, #8]
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	005b      	lsls	r3, r3, #1
 80018cc:	fa02 f303 	lsl.w	r3, r2, r3
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	69ba      	ldr	r2, [r7, #24]
 80018da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f003 0303 	and.w	r3, r3, #3
 80018e4:	2b02      	cmp	r3, #2
 80018e6:	d123      	bne.n	8001930 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	08da      	lsrs	r2, r3, #3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	3208      	adds	r2, #8
 80018f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	f003 0307 	and.w	r3, r3, #7
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	220f      	movs	r2, #15
 8001900:	fa02 f303 	lsl.w	r3, r2, r3
 8001904:	43db      	mvns	r3, r3
 8001906:	69ba      	ldr	r2, [r7, #24]
 8001908:	4013      	ands	r3, r2
 800190a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	691a      	ldr	r2, [r3, #16]
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	f003 0307 	and.w	r3, r3, #7
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	4313      	orrs	r3, r2
 8001920:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	08da      	lsrs	r2, r3, #3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	3208      	adds	r2, #8
 800192a:	69b9      	ldr	r1, [r7, #24]
 800192c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	2203      	movs	r2, #3
 800193c:	fa02 f303 	lsl.w	r3, r2, r3
 8001940:	43db      	mvns	r3, r3
 8001942:	69ba      	ldr	r2, [r7, #24]
 8001944:	4013      	ands	r3, r2
 8001946:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f003 0203 	and.w	r2, r3, #3
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	005b      	lsls	r3, r3, #1
 8001954:	fa02 f303 	lsl.w	r3, r2, r3
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	4313      	orrs	r3, r2
 800195c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800196c:	2b00      	cmp	r3, #0
 800196e:	f000 80a2 	beq.w	8001ab6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001972:	2300      	movs	r3, #0
 8001974:	60fb      	str	r3, [r7, #12]
 8001976:	4b57      	ldr	r3, [pc, #348]	@ (8001ad4 <HAL_GPIO_Init+0x2e8>)
 8001978:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800197a:	4a56      	ldr	r2, [pc, #344]	@ (8001ad4 <HAL_GPIO_Init+0x2e8>)
 800197c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001980:	6453      	str	r3, [r2, #68]	@ 0x44
 8001982:	4b54      	ldr	r3, [pc, #336]	@ (8001ad4 <HAL_GPIO_Init+0x2e8>)
 8001984:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001986:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800198a:	60fb      	str	r3, [r7, #12]
 800198c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800198e:	4a52      	ldr	r2, [pc, #328]	@ (8001ad8 <HAL_GPIO_Init+0x2ec>)
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	089b      	lsrs	r3, r3, #2
 8001994:	3302      	adds	r3, #2
 8001996:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800199a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800199c:	69fb      	ldr	r3, [r7, #28]
 800199e:	f003 0303 	and.w	r3, r3, #3
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	220f      	movs	r2, #15
 80019a6:	fa02 f303 	lsl.w	r3, r2, r3
 80019aa:	43db      	mvns	r3, r3
 80019ac:	69ba      	ldr	r2, [r7, #24]
 80019ae:	4013      	ands	r3, r2
 80019b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4a49      	ldr	r2, [pc, #292]	@ (8001adc <HAL_GPIO_Init+0x2f0>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d019      	beq.n	80019ee <HAL_GPIO_Init+0x202>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4a48      	ldr	r2, [pc, #288]	@ (8001ae0 <HAL_GPIO_Init+0x2f4>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d013      	beq.n	80019ea <HAL_GPIO_Init+0x1fe>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4a47      	ldr	r2, [pc, #284]	@ (8001ae4 <HAL_GPIO_Init+0x2f8>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d00d      	beq.n	80019e6 <HAL_GPIO_Init+0x1fa>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4a46      	ldr	r2, [pc, #280]	@ (8001ae8 <HAL_GPIO_Init+0x2fc>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d007      	beq.n	80019e2 <HAL_GPIO_Init+0x1f6>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4a45      	ldr	r2, [pc, #276]	@ (8001aec <HAL_GPIO_Init+0x300>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d101      	bne.n	80019de <HAL_GPIO_Init+0x1f2>
 80019da:	2304      	movs	r3, #4
 80019dc:	e008      	b.n	80019f0 <HAL_GPIO_Init+0x204>
 80019de:	2307      	movs	r3, #7
 80019e0:	e006      	b.n	80019f0 <HAL_GPIO_Init+0x204>
 80019e2:	2303      	movs	r3, #3
 80019e4:	e004      	b.n	80019f0 <HAL_GPIO_Init+0x204>
 80019e6:	2302      	movs	r3, #2
 80019e8:	e002      	b.n	80019f0 <HAL_GPIO_Init+0x204>
 80019ea:	2301      	movs	r3, #1
 80019ec:	e000      	b.n	80019f0 <HAL_GPIO_Init+0x204>
 80019ee:	2300      	movs	r3, #0
 80019f0:	69fa      	ldr	r2, [r7, #28]
 80019f2:	f002 0203 	and.w	r2, r2, #3
 80019f6:	0092      	lsls	r2, r2, #2
 80019f8:	4093      	lsls	r3, r2
 80019fa:	69ba      	ldr	r2, [r7, #24]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a00:	4935      	ldr	r1, [pc, #212]	@ (8001ad8 <HAL_GPIO_Init+0x2ec>)
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	089b      	lsrs	r3, r3, #2
 8001a06:	3302      	adds	r3, #2
 8001a08:	69ba      	ldr	r2, [r7, #24]
 8001a0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a0e:	4b38      	ldr	r3, [pc, #224]	@ (8001af0 <HAL_GPIO_Init+0x304>)
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	43db      	mvns	r3, r3
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d003      	beq.n	8001a32 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001a2a:	69ba      	ldr	r2, [r7, #24]
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a32:	4a2f      	ldr	r2, [pc, #188]	@ (8001af0 <HAL_GPIO_Init+0x304>)
 8001a34:	69bb      	ldr	r3, [r7, #24]
 8001a36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a38:	4b2d      	ldr	r3, [pc, #180]	@ (8001af0 <HAL_GPIO_Init+0x304>)
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	43db      	mvns	r3, r3
 8001a42:	69ba      	ldr	r2, [r7, #24]
 8001a44:	4013      	ands	r3, r2
 8001a46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d003      	beq.n	8001a5c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a5c:	4a24      	ldr	r2, [pc, #144]	@ (8001af0 <HAL_GPIO_Init+0x304>)
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a62:	4b23      	ldr	r3, [pc, #140]	@ (8001af0 <HAL_GPIO_Init+0x304>)
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	43db      	mvns	r3, r3
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	4013      	ands	r3, r2
 8001a70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d003      	beq.n	8001a86 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001a7e:	69ba      	ldr	r2, [r7, #24]
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a86:	4a1a      	ldr	r2, [pc, #104]	@ (8001af0 <HAL_GPIO_Init+0x304>)
 8001a88:	69bb      	ldr	r3, [r7, #24]
 8001a8a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a8c:	4b18      	ldr	r3, [pc, #96]	@ (8001af0 <HAL_GPIO_Init+0x304>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	43db      	mvns	r3, r3
 8001a96:	69ba      	ldr	r2, [r7, #24]
 8001a98:	4013      	ands	r3, r2
 8001a9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d003      	beq.n	8001ab0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ab0:	4a0f      	ldr	r2, [pc, #60]	@ (8001af0 <HAL_GPIO_Init+0x304>)
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	61fb      	str	r3, [r7, #28]
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	2b0f      	cmp	r3, #15
 8001ac0:	f67f aea2 	bls.w	8001808 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ac4:	bf00      	nop
 8001ac6:	bf00      	nop
 8001ac8:	3724      	adds	r7, #36	@ 0x24
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	40023800 	.word	0x40023800
 8001ad8:	40013800 	.word	0x40013800
 8001adc:	40020000 	.word	0x40020000
 8001ae0:	40020400 	.word	0x40020400
 8001ae4:	40020800 	.word	0x40020800
 8001ae8:	40020c00 	.word	0x40020c00
 8001aec:	40021000 	.word	0x40021000
 8001af0:	40013c00 	.word	0x40013c00

08001af4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b085      	sub	sp, #20
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	460b      	mov	r3, r1
 8001afe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	691a      	ldr	r2, [r3, #16]
 8001b04:	887b      	ldrh	r3, [r7, #2]
 8001b06:	4013      	ands	r3, r2
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d002      	beq.n	8001b12 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	73fb      	strb	r3, [r7, #15]
 8001b10:	e001      	b.n	8001b16 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b12:	2300      	movs	r3, #0
 8001b14:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b16:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3714      	adds	r7, #20
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	807b      	strh	r3, [r7, #2]
 8001b30:	4613      	mov	r3, r2
 8001b32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b34:	787b      	ldrb	r3, [r7, #1]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d003      	beq.n	8001b42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b3a:	887a      	ldrh	r2, [r7, #2]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b40:	e003      	b.n	8001b4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b42:	887b      	ldrh	r3, [r7, #2]
 8001b44:	041a      	lsls	r2, r3, #16
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	619a      	str	r2, [r3, #24]
}
 8001b4a:	bf00      	nop
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
	...

08001b58 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b086      	sub	sp, #24
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d101      	bne.n	8001b6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e267      	b.n	800203a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0301 	and.w	r3, r3, #1
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d075      	beq.n	8001c62 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001b76:	4b88      	ldr	r3, [pc, #544]	@ (8001d98 <HAL_RCC_OscConfig+0x240>)
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f003 030c 	and.w	r3, r3, #12
 8001b7e:	2b04      	cmp	r3, #4
 8001b80:	d00c      	beq.n	8001b9c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b82:	4b85      	ldr	r3, [pc, #532]	@ (8001d98 <HAL_RCC_OscConfig+0x240>)
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001b8a:	2b08      	cmp	r3, #8
 8001b8c:	d112      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b8e:	4b82      	ldr	r3, [pc, #520]	@ (8001d98 <HAL_RCC_OscConfig+0x240>)
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b96:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001b9a:	d10b      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b9c:	4b7e      	ldr	r3, [pc, #504]	@ (8001d98 <HAL_RCC_OscConfig+0x240>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d05b      	beq.n	8001c60 <HAL_RCC_OscConfig+0x108>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d157      	bne.n	8001c60 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e242      	b.n	800203a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bbc:	d106      	bne.n	8001bcc <HAL_RCC_OscConfig+0x74>
 8001bbe:	4b76      	ldr	r3, [pc, #472]	@ (8001d98 <HAL_RCC_OscConfig+0x240>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a75      	ldr	r2, [pc, #468]	@ (8001d98 <HAL_RCC_OscConfig+0x240>)
 8001bc4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bc8:	6013      	str	r3, [r2, #0]
 8001bca:	e01d      	b.n	8001c08 <HAL_RCC_OscConfig+0xb0>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001bd4:	d10c      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x98>
 8001bd6:	4b70      	ldr	r3, [pc, #448]	@ (8001d98 <HAL_RCC_OscConfig+0x240>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a6f      	ldr	r2, [pc, #444]	@ (8001d98 <HAL_RCC_OscConfig+0x240>)
 8001bdc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001be0:	6013      	str	r3, [r2, #0]
 8001be2:	4b6d      	ldr	r3, [pc, #436]	@ (8001d98 <HAL_RCC_OscConfig+0x240>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a6c      	ldr	r2, [pc, #432]	@ (8001d98 <HAL_RCC_OscConfig+0x240>)
 8001be8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bec:	6013      	str	r3, [r2, #0]
 8001bee:	e00b      	b.n	8001c08 <HAL_RCC_OscConfig+0xb0>
 8001bf0:	4b69      	ldr	r3, [pc, #420]	@ (8001d98 <HAL_RCC_OscConfig+0x240>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a68      	ldr	r2, [pc, #416]	@ (8001d98 <HAL_RCC_OscConfig+0x240>)
 8001bf6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001bfa:	6013      	str	r3, [r2, #0]
 8001bfc:	4b66      	ldr	r3, [pc, #408]	@ (8001d98 <HAL_RCC_OscConfig+0x240>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a65      	ldr	r2, [pc, #404]	@ (8001d98 <HAL_RCC_OscConfig+0x240>)
 8001c02:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d013      	beq.n	8001c38 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c10:	f7ff fcaa 	bl	8001568 <HAL_GetTick>
 8001c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c16:	e008      	b.n	8001c2a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c18:	f7ff fca6 	bl	8001568 <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	2b64      	cmp	r3, #100	@ 0x64
 8001c24:	d901      	bls.n	8001c2a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c26:	2303      	movs	r3, #3
 8001c28:	e207      	b.n	800203a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c2a:	4b5b      	ldr	r3, [pc, #364]	@ (8001d98 <HAL_RCC_OscConfig+0x240>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d0f0      	beq.n	8001c18 <HAL_RCC_OscConfig+0xc0>
 8001c36:	e014      	b.n	8001c62 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c38:	f7ff fc96 	bl	8001568 <HAL_GetTick>
 8001c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c3e:	e008      	b.n	8001c52 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c40:	f7ff fc92 	bl	8001568 <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	2b64      	cmp	r3, #100	@ 0x64
 8001c4c:	d901      	bls.n	8001c52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e1f3      	b.n	800203a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c52:	4b51      	ldr	r3, [pc, #324]	@ (8001d98 <HAL_RCC_OscConfig+0x240>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d1f0      	bne.n	8001c40 <HAL_RCC_OscConfig+0xe8>
 8001c5e:	e000      	b.n	8001c62 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d063      	beq.n	8001d36 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001c6e:	4b4a      	ldr	r3, [pc, #296]	@ (8001d98 <HAL_RCC_OscConfig+0x240>)
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	f003 030c 	and.w	r3, r3, #12
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d00b      	beq.n	8001c92 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c7a:	4b47      	ldr	r3, [pc, #284]	@ (8001d98 <HAL_RCC_OscConfig+0x240>)
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001c82:	2b08      	cmp	r3, #8
 8001c84:	d11c      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c86:	4b44      	ldr	r3, [pc, #272]	@ (8001d98 <HAL_RCC_OscConfig+0x240>)
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d116      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c92:	4b41      	ldr	r3, [pc, #260]	@ (8001d98 <HAL_RCC_OscConfig+0x240>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 0302 	and.w	r3, r3, #2
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d005      	beq.n	8001caa <HAL_RCC_OscConfig+0x152>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	68db      	ldr	r3, [r3, #12]
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d001      	beq.n	8001caa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e1c7      	b.n	800203a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001caa:	4b3b      	ldr	r3, [pc, #236]	@ (8001d98 <HAL_RCC_OscConfig+0x240>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	691b      	ldr	r3, [r3, #16]
 8001cb6:	00db      	lsls	r3, r3, #3
 8001cb8:	4937      	ldr	r1, [pc, #220]	@ (8001d98 <HAL_RCC_OscConfig+0x240>)
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cbe:	e03a      	b.n	8001d36 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d020      	beq.n	8001d0a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cc8:	4b34      	ldr	r3, [pc, #208]	@ (8001d9c <HAL_RCC_OscConfig+0x244>)
 8001cca:	2201      	movs	r2, #1
 8001ccc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cce:	f7ff fc4b 	bl	8001568 <HAL_GetTick>
 8001cd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cd4:	e008      	b.n	8001ce8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cd6:	f7ff fc47 	bl	8001568 <HAL_GetTick>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d901      	bls.n	8001ce8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	e1a8      	b.n	800203a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ce8:	4b2b      	ldr	r3, [pc, #172]	@ (8001d98 <HAL_RCC_OscConfig+0x240>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0302 	and.w	r3, r3, #2
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d0f0      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cf4:	4b28      	ldr	r3, [pc, #160]	@ (8001d98 <HAL_RCC_OscConfig+0x240>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	691b      	ldr	r3, [r3, #16]
 8001d00:	00db      	lsls	r3, r3, #3
 8001d02:	4925      	ldr	r1, [pc, #148]	@ (8001d98 <HAL_RCC_OscConfig+0x240>)
 8001d04:	4313      	orrs	r3, r2
 8001d06:	600b      	str	r3, [r1, #0]
 8001d08:	e015      	b.n	8001d36 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d0a:	4b24      	ldr	r3, [pc, #144]	@ (8001d9c <HAL_RCC_OscConfig+0x244>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d10:	f7ff fc2a 	bl	8001568 <HAL_GetTick>
 8001d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d16:	e008      	b.n	8001d2a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d18:	f7ff fc26 	bl	8001568 <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d901      	bls.n	8001d2a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e187      	b.n	800203a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d2a:	4b1b      	ldr	r3, [pc, #108]	@ (8001d98 <HAL_RCC_OscConfig+0x240>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0302 	and.w	r3, r3, #2
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d1f0      	bne.n	8001d18 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0308 	and.w	r3, r3, #8
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d036      	beq.n	8001db0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	695b      	ldr	r3, [r3, #20]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d016      	beq.n	8001d78 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d4a:	4b15      	ldr	r3, [pc, #84]	@ (8001da0 <HAL_RCC_OscConfig+0x248>)
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d50:	f7ff fc0a 	bl	8001568 <HAL_GetTick>
 8001d54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d56:	e008      	b.n	8001d6a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d58:	f7ff fc06 	bl	8001568 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d901      	bls.n	8001d6a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e167      	b.n	800203a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d6a:	4b0b      	ldr	r3, [pc, #44]	@ (8001d98 <HAL_RCC_OscConfig+0x240>)
 8001d6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d0f0      	beq.n	8001d58 <HAL_RCC_OscConfig+0x200>
 8001d76:	e01b      	b.n	8001db0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d78:	4b09      	ldr	r3, [pc, #36]	@ (8001da0 <HAL_RCC_OscConfig+0x248>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d7e:	f7ff fbf3 	bl	8001568 <HAL_GetTick>
 8001d82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d84:	e00e      	b.n	8001da4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d86:	f7ff fbef 	bl	8001568 <HAL_GetTick>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d907      	bls.n	8001da4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001d94:	2303      	movs	r3, #3
 8001d96:	e150      	b.n	800203a <HAL_RCC_OscConfig+0x4e2>
 8001d98:	40023800 	.word	0x40023800
 8001d9c:	42470000 	.word	0x42470000
 8001da0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001da4:	4b88      	ldr	r3, [pc, #544]	@ (8001fc8 <HAL_RCC_OscConfig+0x470>)
 8001da6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001da8:	f003 0302 	and.w	r3, r3, #2
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d1ea      	bne.n	8001d86 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0304 	and.w	r3, r3, #4
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	f000 8097 	beq.w	8001eec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dc2:	4b81      	ldr	r3, [pc, #516]	@ (8001fc8 <HAL_RCC_OscConfig+0x470>)
 8001dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d10f      	bne.n	8001dee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dce:	2300      	movs	r3, #0
 8001dd0:	60bb      	str	r3, [r7, #8]
 8001dd2:	4b7d      	ldr	r3, [pc, #500]	@ (8001fc8 <HAL_RCC_OscConfig+0x470>)
 8001dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd6:	4a7c      	ldr	r2, [pc, #496]	@ (8001fc8 <HAL_RCC_OscConfig+0x470>)
 8001dd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ddc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dde:	4b7a      	ldr	r3, [pc, #488]	@ (8001fc8 <HAL_RCC_OscConfig+0x470>)
 8001de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001de6:	60bb      	str	r3, [r7, #8]
 8001de8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dea:	2301      	movs	r3, #1
 8001dec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dee:	4b77      	ldr	r3, [pc, #476]	@ (8001fcc <HAL_RCC_OscConfig+0x474>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d118      	bne.n	8001e2c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dfa:	4b74      	ldr	r3, [pc, #464]	@ (8001fcc <HAL_RCC_OscConfig+0x474>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a73      	ldr	r2, [pc, #460]	@ (8001fcc <HAL_RCC_OscConfig+0x474>)
 8001e00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e06:	f7ff fbaf 	bl	8001568 <HAL_GetTick>
 8001e0a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e0c:	e008      	b.n	8001e20 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e0e:	f7ff fbab 	bl	8001568 <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d901      	bls.n	8001e20 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	e10c      	b.n	800203a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e20:	4b6a      	ldr	r3, [pc, #424]	@ (8001fcc <HAL_RCC_OscConfig+0x474>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d0f0      	beq.n	8001e0e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d106      	bne.n	8001e42 <HAL_RCC_OscConfig+0x2ea>
 8001e34:	4b64      	ldr	r3, [pc, #400]	@ (8001fc8 <HAL_RCC_OscConfig+0x470>)
 8001e36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e38:	4a63      	ldr	r2, [pc, #396]	@ (8001fc8 <HAL_RCC_OscConfig+0x470>)
 8001e3a:	f043 0301 	orr.w	r3, r3, #1
 8001e3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e40:	e01c      	b.n	8001e7c <HAL_RCC_OscConfig+0x324>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	2b05      	cmp	r3, #5
 8001e48:	d10c      	bne.n	8001e64 <HAL_RCC_OscConfig+0x30c>
 8001e4a:	4b5f      	ldr	r3, [pc, #380]	@ (8001fc8 <HAL_RCC_OscConfig+0x470>)
 8001e4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e4e:	4a5e      	ldr	r2, [pc, #376]	@ (8001fc8 <HAL_RCC_OscConfig+0x470>)
 8001e50:	f043 0304 	orr.w	r3, r3, #4
 8001e54:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e56:	4b5c      	ldr	r3, [pc, #368]	@ (8001fc8 <HAL_RCC_OscConfig+0x470>)
 8001e58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e5a:	4a5b      	ldr	r2, [pc, #364]	@ (8001fc8 <HAL_RCC_OscConfig+0x470>)
 8001e5c:	f043 0301 	orr.w	r3, r3, #1
 8001e60:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e62:	e00b      	b.n	8001e7c <HAL_RCC_OscConfig+0x324>
 8001e64:	4b58      	ldr	r3, [pc, #352]	@ (8001fc8 <HAL_RCC_OscConfig+0x470>)
 8001e66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e68:	4a57      	ldr	r2, [pc, #348]	@ (8001fc8 <HAL_RCC_OscConfig+0x470>)
 8001e6a:	f023 0301 	bic.w	r3, r3, #1
 8001e6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e70:	4b55      	ldr	r3, [pc, #340]	@ (8001fc8 <HAL_RCC_OscConfig+0x470>)
 8001e72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e74:	4a54      	ldr	r2, [pc, #336]	@ (8001fc8 <HAL_RCC_OscConfig+0x470>)
 8001e76:	f023 0304 	bic.w	r3, r3, #4
 8001e7a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d015      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e84:	f7ff fb70 	bl	8001568 <HAL_GetTick>
 8001e88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e8a:	e00a      	b.n	8001ea2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e8c:	f7ff fb6c 	bl	8001568 <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d901      	bls.n	8001ea2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e0cb      	b.n	800203a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ea2:	4b49      	ldr	r3, [pc, #292]	@ (8001fc8 <HAL_RCC_OscConfig+0x470>)
 8001ea4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d0ee      	beq.n	8001e8c <HAL_RCC_OscConfig+0x334>
 8001eae:	e014      	b.n	8001eda <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eb0:	f7ff fb5a 	bl	8001568 <HAL_GetTick>
 8001eb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eb6:	e00a      	b.n	8001ece <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eb8:	f7ff fb56 	bl	8001568 <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d901      	bls.n	8001ece <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e0b5      	b.n	800203a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ece:	4b3e      	ldr	r3, [pc, #248]	@ (8001fc8 <HAL_RCC_OscConfig+0x470>)
 8001ed0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ed2:	f003 0302 	and.w	r3, r3, #2
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d1ee      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001eda:	7dfb      	ldrb	r3, [r7, #23]
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d105      	bne.n	8001eec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ee0:	4b39      	ldr	r3, [pc, #228]	@ (8001fc8 <HAL_RCC_OscConfig+0x470>)
 8001ee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ee4:	4a38      	ldr	r2, [pc, #224]	@ (8001fc8 <HAL_RCC_OscConfig+0x470>)
 8001ee6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001eea:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	699b      	ldr	r3, [r3, #24]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	f000 80a1 	beq.w	8002038 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ef6:	4b34      	ldr	r3, [pc, #208]	@ (8001fc8 <HAL_RCC_OscConfig+0x470>)
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	f003 030c 	and.w	r3, r3, #12
 8001efe:	2b08      	cmp	r3, #8
 8001f00:	d05c      	beq.n	8001fbc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	699b      	ldr	r3, [r3, #24]
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d141      	bne.n	8001f8e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f0a:	4b31      	ldr	r3, [pc, #196]	@ (8001fd0 <HAL_RCC_OscConfig+0x478>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f10:	f7ff fb2a 	bl	8001568 <HAL_GetTick>
 8001f14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f16:	e008      	b.n	8001f2a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f18:	f7ff fb26 	bl	8001568 <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d901      	bls.n	8001f2a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e087      	b.n	800203a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f2a:	4b27      	ldr	r3, [pc, #156]	@ (8001fc8 <HAL_RCC_OscConfig+0x470>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d1f0      	bne.n	8001f18 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	69da      	ldr	r2, [r3, #28]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6a1b      	ldr	r3, [r3, #32]
 8001f3e:	431a      	orrs	r2, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f44:	019b      	lsls	r3, r3, #6
 8001f46:	431a      	orrs	r2, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f4c:	085b      	lsrs	r3, r3, #1
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	041b      	lsls	r3, r3, #16
 8001f52:	431a      	orrs	r2, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f58:	061b      	lsls	r3, r3, #24
 8001f5a:	491b      	ldr	r1, [pc, #108]	@ (8001fc8 <HAL_RCC_OscConfig+0x470>)
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f60:	4b1b      	ldr	r3, [pc, #108]	@ (8001fd0 <HAL_RCC_OscConfig+0x478>)
 8001f62:	2201      	movs	r2, #1
 8001f64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f66:	f7ff faff 	bl	8001568 <HAL_GetTick>
 8001f6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f6c:	e008      	b.n	8001f80 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f6e:	f7ff fafb 	bl	8001568 <HAL_GetTick>
 8001f72:	4602      	mov	r2, r0
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d901      	bls.n	8001f80 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e05c      	b.n	800203a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f80:	4b11      	ldr	r3, [pc, #68]	@ (8001fc8 <HAL_RCC_OscConfig+0x470>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d0f0      	beq.n	8001f6e <HAL_RCC_OscConfig+0x416>
 8001f8c:	e054      	b.n	8002038 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f8e:	4b10      	ldr	r3, [pc, #64]	@ (8001fd0 <HAL_RCC_OscConfig+0x478>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f94:	f7ff fae8 	bl	8001568 <HAL_GetTick>
 8001f98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f9a:	e008      	b.n	8001fae <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f9c:	f7ff fae4 	bl	8001568 <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d901      	bls.n	8001fae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e045      	b.n	800203a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fae:	4b06      	ldr	r3, [pc, #24]	@ (8001fc8 <HAL_RCC_OscConfig+0x470>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d1f0      	bne.n	8001f9c <HAL_RCC_OscConfig+0x444>
 8001fba:	e03d      	b.n	8002038 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	699b      	ldr	r3, [r3, #24]
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d107      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e038      	b.n	800203a <HAL_RCC_OscConfig+0x4e2>
 8001fc8:	40023800 	.word	0x40023800
 8001fcc:	40007000 	.word	0x40007000
 8001fd0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001fd4:	4b1b      	ldr	r3, [pc, #108]	@ (8002044 <HAL_RCC_OscConfig+0x4ec>)
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	699b      	ldr	r3, [r3, #24]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d028      	beq.n	8002034 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d121      	bne.n	8002034 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d11a      	bne.n	8002034 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ffe:	68fa      	ldr	r2, [r7, #12]
 8002000:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002004:	4013      	ands	r3, r2
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800200a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800200c:	4293      	cmp	r3, r2
 800200e:	d111      	bne.n	8002034 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800201a:	085b      	lsrs	r3, r3, #1
 800201c:	3b01      	subs	r3, #1
 800201e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002020:	429a      	cmp	r2, r3
 8002022:	d107      	bne.n	8002034 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800202e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002030:	429a      	cmp	r2, r3
 8002032:	d001      	beq.n	8002038 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e000      	b.n	800203a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3718      	adds	r7, #24
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	40023800 	.word	0x40023800

08002048 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d101      	bne.n	800205c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e0cc      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800205c:	4b68      	ldr	r3, [pc, #416]	@ (8002200 <HAL_RCC_ClockConfig+0x1b8>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0307 	and.w	r3, r3, #7
 8002064:	683a      	ldr	r2, [r7, #0]
 8002066:	429a      	cmp	r2, r3
 8002068:	d90c      	bls.n	8002084 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800206a:	4b65      	ldr	r3, [pc, #404]	@ (8002200 <HAL_RCC_ClockConfig+0x1b8>)
 800206c:	683a      	ldr	r2, [r7, #0]
 800206e:	b2d2      	uxtb	r2, r2
 8002070:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002072:	4b63      	ldr	r3, [pc, #396]	@ (8002200 <HAL_RCC_ClockConfig+0x1b8>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0307 	and.w	r3, r3, #7
 800207a:	683a      	ldr	r2, [r7, #0]
 800207c:	429a      	cmp	r2, r3
 800207e:	d001      	beq.n	8002084 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e0b8      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0302 	and.w	r3, r3, #2
 800208c:	2b00      	cmp	r3, #0
 800208e:	d020      	beq.n	80020d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0304 	and.w	r3, r3, #4
 8002098:	2b00      	cmp	r3, #0
 800209a:	d005      	beq.n	80020a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800209c:	4b59      	ldr	r3, [pc, #356]	@ (8002204 <HAL_RCC_ClockConfig+0x1bc>)
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	4a58      	ldr	r2, [pc, #352]	@ (8002204 <HAL_RCC_ClockConfig+0x1bc>)
 80020a2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80020a6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0308 	and.w	r3, r3, #8
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d005      	beq.n	80020c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020b4:	4b53      	ldr	r3, [pc, #332]	@ (8002204 <HAL_RCC_ClockConfig+0x1bc>)
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	4a52      	ldr	r2, [pc, #328]	@ (8002204 <HAL_RCC_ClockConfig+0x1bc>)
 80020ba:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80020be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020c0:	4b50      	ldr	r3, [pc, #320]	@ (8002204 <HAL_RCC_ClockConfig+0x1bc>)
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	494d      	ldr	r1, [pc, #308]	@ (8002204 <HAL_RCC_ClockConfig+0x1bc>)
 80020ce:	4313      	orrs	r3, r2
 80020d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0301 	and.w	r3, r3, #1
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d044      	beq.n	8002168 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d107      	bne.n	80020f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020e6:	4b47      	ldr	r3, [pc, #284]	@ (8002204 <HAL_RCC_ClockConfig+0x1bc>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d119      	bne.n	8002126 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e07f      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d003      	beq.n	8002106 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002102:	2b03      	cmp	r3, #3
 8002104:	d107      	bne.n	8002116 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002106:	4b3f      	ldr	r3, [pc, #252]	@ (8002204 <HAL_RCC_ClockConfig+0x1bc>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d109      	bne.n	8002126 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e06f      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002116:	4b3b      	ldr	r3, [pc, #236]	@ (8002204 <HAL_RCC_ClockConfig+0x1bc>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0302 	and.w	r3, r3, #2
 800211e:	2b00      	cmp	r3, #0
 8002120:	d101      	bne.n	8002126 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e067      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002126:	4b37      	ldr	r3, [pc, #220]	@ (8002204 <HAL_RCC_ClockConfig+0x1bc>)
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	f023 0203 	bic.w	r2, r3, #3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	4934      	ldr	r1, [pc, #208]	@ (8002204 <HAL_RCC_ClockConfig+0x1bc>)
 8002134:	4313      	orrs	r3, r2
 8002136:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002138:	f7ff fa16 	bl	8001568 <HAL_GetTick>
 800213c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800213e:	e00a      	b.n	8002156 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002140:	f7ff fa12 	bl	8001568 <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800214e:	4293      	cmp	r3, r2
 8002150:	d901      	bls.n	8002156 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e04f      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002156:	4b2b      	ldr	r3, [pc, #172]	@ (8002204 <HAL_RCC_ClockConfig+0x1bc>)
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	f003 020c 	and.w	r2, r3, #12
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	429a      	cmp	r2, r3
 8002166:	d1eb      	bne.n	8002140 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002168:	4b25      	ldr	r3, [pc, #148]	@ (8002200 <HAL_RCC_ClockConfig+0x1b8>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0307 	and.w	r3, r3, #7
 8002170:	683a      	ldr	r2, [r7, #0]
 8002172:	429a      	cmp	r2, r3
 8002174:	d20c      	bcs.n	8002190 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002176:	4b22      	ldr	r3, [pc, #136]	@ (8002200 <HAL_RCC_ClockConfig+0x1b8>)
 8002178:	683a      	ldr	r2, [r7, #0]
 800217a:	b2d2      	uxtb	r2, r2
 800217c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800217e:	4b20      	ldr	r3, [pc, #128]	@ (8002200 <HAL_RCC_ClockConfig+0x1b8>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0307 	and.w	r3, r3, #7
 8002186:	683a      	ldr	r2, [r7, #0]
 8002188:	429a      	cmp	r2, r3
 800218a:	d001      	beq.n	8002190 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e032      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0304 	and.w	r3, r3, #4
 8002198:	2b00      	cmp	r3, #0
 800219a:	d008      	beq.n	80021ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800219c:	4b19      	ldr	r3, [pc, #100]	@ (8002204 <HAL_RCC_ClockConfig+0x1bc>)
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	4916      	ldr	r1, [pc, #88]	@ (8002204 <HAL_RCC_ClockConfig+0x1bc>)
 80021aa:	4313      	orrs	r3, r2
 80021ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0308 	and.w	r3, r3, #8
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d009      	beq.n	80021ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021ba:	4b12      	ldr	r3, [pc, #72]	@ (8002204 <HAL_RCC_ClockConfig+0x1bc>)
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	691b      	ldr	r3, [r3, #16]
 80021c6:	00db      	lsls	r3, r3, #3
 80021c8:	490e      	ldr	r1, [pc, #56]	@ (8002204 <HAL_RCC_ClockConfig+0x1bc>)
 80021ca:	4313      	orrs	r3, r2
 80021cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021ce:	f000 f821 	bl	8002214 <HAL_RCC_GetSysClockFreq>
 80021d2:	4602      	mov	r2, r0
 80021d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002204 <HAL_RCC_ClockConfig+0x1bc>)
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	091b      	lsrs	r3, r3, #4
 80021da:	f003 030f 	and.w	r3, r3, #15
 80021de:	490a      	ldr	r1, [pc, #40]	@ (8002208 <HAL_RCC_ClockConfig+0x1c0>)
 80021e0:	5ccb      	ldrb	r3, [r1, r3]
 80021e2:	fa22 f303 	lsr.w	r3, r2, r3
 80021e6:	4a09      	ldr	r2, [pc, #36]	@ (800220c <HAL_RCC_ClockConfig+0x1c4>)
 80021e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80021ea:	4b09      	ldr	r3, [pc, #36]	@ (8002210 <HAL_RCC_ClockConfig+0x1c8>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7ff f976 	bl	80014e0 <HAL_InitTick>

  return HAL_OK;
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3710      	adds	r7, #16
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	40023c00 	.word	0x40023c00
 8002204:	40023800 	.word	0x40023800
 8002208:	08003fec 	.word	0x08003fec
 800220c:	20000000 	.word	0x20000000
 8002210:	20000004 	.word	0x20000004

08002214 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002214:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002218:	b094      	sub	sp, #80	@ 0x50
 800221a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800221c:	2300      	movs	r3, #0
 800221e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002220:	2300      	movs	r3, #0
 8002222:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002224:	2300      	movs	r3, #0
 8002226:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002228:	2300      	movs	r3, #0
 800222a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800222c:	4b79      	ldr	r3, [pc, #484]	@ (8002414 <HAL_RCC_GetSysClockFreq+0x200>)
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	f003 030c 	and.w	r3, r3, #12
 8002234:	2b08      	cmp	r3, #8
 8002236:	d00d      	beq.n	8002254 <HAL_RCC_GetSysClockFreq+0x40>
 8002238:	2b08      	cmp	r3, #8
 800223a:	f200 80e1 	bhi.w	8002400 <HAL_RCC_GetSysClockFreq+0x1ec>
 800223e:	2b00      	cmp	r3, #0
 8002240:	d002      	beq.n	8002248 <HAL_RCC_GetSysClockFreq+0x34>
 8002242:	2b04      	cmp	r3, #4
 8002244:	d003      	beq.n	800224e <HAL_RCC_GetSysClockFreq+0x3a>
 8002246:	e0db      	b.n	8002400 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002248:	4b73      	ldr	r3, [pc, #460]	@ (8002418 <HAL_RCC_GetSysClockFreq+0x204>)
 800224a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800224c:	e0db      	b.n	8002406 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800224e:	4b73      	ldr	r3, [pc, #460]	@ (800241c <HAL_RCC_GetSysClockFreq+0x208>)
 8002250:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002252:	e0d8      	b.n	8002406 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002254:	4b6f      	ldr	r3, [pc, #444]	@ (8002414 <HAL_RCC_GetSysClockFreq+0x200>)
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800225c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800225e:	4b6d      	ldr	r3, [pc, #436]	@ (8002414 <HAL_RCC_GetSysClockFreq+0x200>)
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d063      	beq.n	8002332 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800226a:	4b6a      	ldr	r3, [pc, #424]	@ (8002414 <HAL_RCC_GetSysClockFreq+0x200>)
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	099b      	lsrs	r3, r3, #6
 8002270:	2200      	movs	r2, #0
 8002272:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002274:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002276:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002278:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800227c:	633b      	str	r3, [r7, #48]	@ 0x30
 800227e:	2300      	movs	r3, #0
 8002280:	637b      	str	r3, [r7, #52]	@ 0x34
 8002282:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002286:	4622      	mov	r2, r4
 8002288:	462b      	mov	r3, r5
 800228a:	f04f 0000 	mov.w	r0, #0
 800228e:	f04f 0100 	mov.w	r1, #0
 8002292:	0159      	lsls	r1, r3, #5
 8002294:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002298:	0150      	lsls	r0, r2, #5
 800229a:	4602      	mov	r2, r0
 800229c:	460b      	mov	r3, r1
 800229e:	4621      	mov	r1, r4
 80022a0:	1a51      	subs	r1, r2, r1
 80022a2:	6139      	str	r1, [r7, #16]
 80022a4:	4629      	mov	r1, r5
 80022a6:	eb63 0301 	sbc.w	r3, r3, r1
 80022aa:	617b      	str	r3, [r7, #20]
 80022ac:	f04f 0200 	mov.w	r2, #0
 80022b0:	f04f 0300 	mov.w	r3, #0
 80022b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80022b8:	4659      	mov	r1, fp
 80022ba:	018b      	lsls	r3, r1, #6
 80022bc:	4651      	mov	r1, sl
 80022be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80022c2:	4651      	mov	r1, sl
 80022c4:	018a      	lsls	r2, r1, #6
 80022c6:	4651      	mov	r1, sl
 80022c8:	ebb2 0801 	subs.w	r8, r2, r1
 80022cc:	4659      	mov	r1, fp
 80022ce:	eb63 0901 	sbc.w	r9, r3, r1
 80022d2:	f04f 0200 	mov.w	r2, #0
 80022d6:	f04f 0300 	mov.w	r3, #0
 80022da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80022de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80022e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80022e6:	4690      	mov	r8, r2
 80022e8:	4699      	mov	r9, r3
 80022ea:	4623      	mov	r3, r4
 80022ec:	eb18 0303 	adds.w	r3, r8, r3
 80022f0:	60bb      	str	r3, [r7, #8]
 80022f2:	462b      	mov	r3, r5
 80022f4:	eb49 0303 	adc.w	r3, r9, r3
 80022f8:	60fb      	str	r3, [r7, #12]
 80022fa:	f04f 0200 	mov.w	r2, #0
 80022fe:	f04f 0300 	mov.w	r3, #0
 8002302:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002306:	4629      	mov	r1, r5
 8002308:	024b      	lsls	r3, r1, #9
 800230a:	4621      	mov	r1, r4
 800230c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002310:	4621      	mov	r1, r4
 8002312:	024a      	lsls	r2, r1, #9
 8002314:	4610      	mov	r0, r2
 8002316:	4619      	mov	r1, r3
 8002318:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800231a:	2200      	movs	r2, #0
 800231c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800231e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002320:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002324:	f7fd ff58 	bl	80001d8 <__aeabi_uldivmod>
 8002328:	4602      	mov	r2, r0
 800232a:	460b      	mov	r3, r1
 800232c:	4613      	mov	r3, r2
 800232e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002330:	e058      	b.n	80023e4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002332:	4b38      	ldr	r3, [pc, #224]	@ (8002414 <HAL_RCC_GetSysClockFreq+0x200>)
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	099b      	lsrs	r3, r3, #6
 8002338:	2200      	movs	r2, #0
 800233a:	4618      	mov	r0, r3
 800233c:	4611      	mov	r1, r2
 800233e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002342:	623b      	str	r3, [r7, #32]
 8002344:	2300      	movs	r3, #0
 8002346:	627b      	str	r3, [r7, #36]	@ 0x24
 8002348:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800234c:	4642      	mov	r2, r8
 800234e:	464b      	mov	r3, r9
 8002350:	f04f 0000 	mov.w	r0, #0
 8002354:	f04f 0100 	mov.w	r1, #0
 8002358:	0159      	lsls	r1, r3, #5
 800235a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800235e:	0150      	lsls	r0, r2, #5
 8002360:	4602      	mov	r2, r0
 8002362:	460b      	mov	r3, r1
 8002364:	4641      	mov	r1, r8
 8002366:	ebb2 0a01 	subs.w	sl, r2, r1
 800236a:	4649      	mov	r1, r9
 800236c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002370:	f04f 0200 	mov.w	r2, #0
 8002374:	f04f 0300 	mov.w	r3, #0
 8002378:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800237c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002380:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002384:	ebb2 040a 	subs.w	r4, r2, sl
 8002388:	eb63 050b 	sbc.w	r5, r3, fp
 800238c:	f04f 0200 	mov.w	r2, #0
 8002390:	f04f 0300 	mov.w	r3, #0
 8002394:	00eb      	lsls	r3, r5, #3
 8002396:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800239a:	00e2      	lsls	r2, r4, #3
 800239c:	4614      	mov	r4, r2
 800239e:	461d      	mov	r5, r3
 80023a0:	4643      	mov	r3, r8
 80023a2:	18e3      	adds	r3, r4, r3
 80023a4:	603b      	str	r3, [r7, #0]
 80023a6:	464b      	mov	r3, r9
 80023a8:	eb45 0303 	adc.w	r3, r5, r3
 80023ac:	607b      	str	r3, [r7, #4]
 80023ae:	f04f 0200 	mov.w	r2, #0
 80023b2:	f04f 0300 	mov.w	r3, #0
 80023b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80023ba:	4629      	mov	r1, r5
 80023bc:	028b      	lsls	r3, r1, #10
 80023be:	4621      	mov	r1, r4
 80023c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80023c4:	4621      	mov	r1, r4
 80023c6:	028a      	lsls	r2, r1, #10
 80023c8:	4610      	mov	r0, r2
 80023ca:	4619      	mov	r1, r3
 80023cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023ce:	2200      	movs	r2, #0
 80023d0:	61bb      	str	r3, [r7, #24]
 80023d2:	61fa      	str	r2, [r7, #28]
 80023d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023d8:	f7fd fefe 	bl	80001d8 <__aeabi_uldivmod>
 80023dc:	4602      	mov	r2, r0
 80023de:	460b      	mov	r3, r1
 80023e0:	4613      	mov	r3, r2
 80023e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80023e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002414 <HAL_RCC_GetSysClockFreq+0x200>)
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	0c1b      	lsrs	r3, r3, #16
 80023ea:	f003 0303 	and.w	r3, r3, #3
 80023ee:	3301      	adds	r3, #1
 80023f0:	005b      	lsls	r3, r3, #1
 80023f2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80023f4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80023f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80023fc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80023fe:	e002      	b.n	8002406 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002400:	4b05      	ldr	r3, [pc, #20]	@ (8002418 <HAL_RCC_GetSysClockFreq+0x204>)
 8002402:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002404:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002406:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002408:	4618      	mov	r0, r3
 800240a:	3750      	adds	r7, #80	@ 0x50
 800240c:	46bd      	mov	sp, r7
 800240e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002412:	bf00      	nop
 8002414:	40023800 	.word	0x40023800
 8002418:	00f42400 	.word	0x00f42400
 800241c:	007a1200 	.word	0x007a1200

08002420 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002424:	4b03      	ldr	r3, [pc, #12]	@ (8002434 <HAL_RCC_GetHCLKFreq+0x14>)
 8002426:	681b      	ldr	r3, [r3, #0]
}
 8002428:	4618      	mov	r0, r3
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	20000000 	.word	0x20000000

08002438 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800243c:	f7ff fff0 	bl	8002420 <HAL_RCC_GetHCLKFreq>
 8002440:	4602      	mov	r2, r0
 8002442:	4b05      	ldr	r3, [pc, #20]	@ (8002458 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	0a9b      	lsrs	r3, r3, #10
 8002448:	f003 0307 	and.w	r3, r3, #7
 800244c:	4903      	ldr	r1, [pc, #12]	@ (800245c <HAL_RCC_GetPCLK1Freq+0x24>)
 800244e:	5ccb      	ldrb	r3, [r1, r3]
 8002450:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002454:	4618      	mov	r0, r3
 8002456:	bd80      	pop	{r7, pc}
 8002458:	40023800 	.word	0x40023800
 800245c:	08003ffc 	.word	0x08003ffc

08002460 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002464:	f7ff ffdc 	bl	8002420 <HAL_RCC_GetHCLKFreq>
 8002468:	4602      	mov	r2, r0
 800246a:	4b05      	ldr	r3, [pc, #20]	@ (8002480 <HAL_RCC_GetPCLK2Freq+0x20>)
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	0b5b      	lsrs	r3, r3, #13
 8002470:	f003 0307 	and.w	r3, r3, #7
 8002474:	4903      	ldr	r1, [pc, #12]	@ (8002484 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002476:	5ccb      	ldrb	r3, [r1, r3]
 8002478:	fa22 f303 	lsr.w	r3, r2, r3
}
 800247c:	4618      	mov	r0, r3
 800247e:	bd80      	pop	{r7, pc}
 8002480:	40023800 	.word	0x40023800
 8002484:	08003ffc 	.word	0x08003ffc

08002488 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b086      	sub	sp, #24
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002490:	2300      	movs	r3, #0
 8002492:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002494:	2300      	movs	r3, #0
 8002496:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0301 	and.w	r3, r3, #1
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d105      	bne.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d038      	beq.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80024b0:	4b68      	ldr	r3, [pc, #416]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80024b6:	f7ff f857 	bl	8001568 <HAL_GetTick>
 80024ba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80024bc:	e008      	b.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80024be:	f7ff f853 	bl	8001568 <HAL_GetTick>
 80024c2:	4602      	mov	r2, r0
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d901      	bls.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80024cc:	2303      	movs	r3, #3
 80024ce:	e0bd      	b.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80024d0:	4b61      	ldr	r3, [pc, #388]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d1f0      	bne.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	685a      	ldr	r2, [r3, #4]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	019b      	lsls	r3, r3, #6
 80024e6:	431a      	orrs	r2, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	071b      	lsls	r3, r3, #28
 80024ee:	495a      	ldr	r1, [pc, #360]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024f0:	4313      	orrs	r3, r2
 80024f2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80024f6:	4b57      	ldr	r3, [pc, #348]	@ (8002654 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80024f8:	2201      	movs	r2, #1
 80024fa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80024fc:	f7ff f834 	bl	8001568 <HAL_GetTick>
 8002500:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002502:	e008      	b.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002504:	f7ff f830 	bl	8001568 <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	2b02      	cmp	r3, #2
 8002510:	d901      	bls.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e09a      	b.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002516:	4b50      	ldr	r3, [pc, #320]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d0f0      	beq.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0302 	and.w	r3, r3, #2
 800252a:	2b00      	cmp	r3, #0
 800252c:	f000 8083 	beq.w	8002636 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002530:	2300      	movs	r3, #0
 8002532:	60fb      	str	r3, [r7, #12]
 8002534:	4b48      	ldr	r3, [pc, #288]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002538:	4a47      	ldr	r2, [pc, #284]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800253a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800253e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002540:	4b45      	ldr	r3, [pc, #276]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002544:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002548:	60fb      	str	r3, [r7, #12]
 800254a:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800254c:	4b43      	ldr	r3, [pc, #268]	@ (800265c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a42      	ldr	r2, [pc, #264]	@ (800265c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002552:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002556:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002558:	f7ff f806 	bl	8001568 <HAL_GetTick>
 800255c:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800255e:	e008      	b.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002560:	f7ff f802 	bl	8001568 <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	2b02      	cmp	r3, #2
 800256c:	d901      	bls.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e06c      	b.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8002572:	4b3a      	ldr	r3, [pc, #232]	@ (800265c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800257a:	2b00      	cmp	r3, #0
 800257c:	d0f0      	beq.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800257e:	4b36      	ldr	r3, [pc, #216]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002580:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002582:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002586:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d02f      	beq.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x166>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	691b      	ldr	r3, [r3, #16]
 8002592:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002596:	693a      	ldr	r2, [r7, #16]
 8002598:	429a      	cmp	r2, r3
 800259a:	d028      	beq.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800259c:	4b2e      	ldr	r3, [pc, #184]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800259e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80025a4:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80025a6:	4b2e      	ldr	r3, [pc, #184]	@ (8002660 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80025a8:	2201      	movs	r2, #1
 80025aa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80025ac:	4b2c      	ldr	r3, [pc, #176]	@ (8002660 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80025b2:	4a29      	ldr	r2, [pc, #164]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80025b8:	4b27      	ldr	r3, [pc, #156]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025bc:	f003 0301 	and.w	r3, r3, #1
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d114      	bne.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80025c4:	f7fe ffd0 	bl	8001568 <HAL_GetTick>
 80025c8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025ca:	e00a      	b.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025cc:	f7fe ffcc 	bl	8001568 <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025da:	4293      	cmp	r3, r2
 80025dc:	d901      	bls.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e034      	b.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025e2:	4b1d      	ldr	r3, [pc, #116]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025e6:	f003 0302 	and.w	r3, r3, #2
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d0ee      	beq.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025f6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80025fa:	d10d      	bne.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x190>
 80025fc:	4b16      	ldr	r3, [pc, #88]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	691b      	ldr	r3, [r3, #16]
 8002608:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800260c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002610:	4911      	ldr	r1, [pc, #68]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002612:	4313      	orrs	r3, r2
 8002614:	608b      	str	r3, [r1, #8]
 8002616:	e005      	b.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8002618:	4b0f      	ldr	r3, [pc, #60]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	4a0e      	ldr	r2, [pc, #56]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800261e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002622:	6093      	str	r3, [r2, #8]
 8002624:	4b0c      	ldr	r3, [pc, #48]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002626:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	691b      	ldr	r3, [r3, #16]
 800262c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002630:	4909      	ldr	r1, [pc, #36]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002632:	4313      	orrs	r3, r2
 8002634:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0308 	and.w	r3, r3, #8
 800263e:	2b00      	cmp	r3, #0
 8002640:	d003      	beq.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	7d1a      	ldrb	r2, [r3, #20]
 8002646:	4b07      	ldr	r3, [pc, #28]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8002648:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800264a:	2300      	movs	r3, #0
}
 800264c:	4618      	mov	r0, r3
 800264e:	3718      	adds	r7, #24
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	42470068 	.word	0x42470068
 8002658:	40023800 	.word	0x40023800
 800265c:	40007000 	.word	0x40007000
 8002660:	42470e40 	.word	0x42470e40
 8002664:	424711e0 	.word	0x424711e0

08002668 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d101      	bne.n	800267a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e041      	b.n	80026fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002680:	b2db      	uxtb	r3, r3
 8002682:	2b00      	cmp	r3, #0
 8002684:	d106      	bne.n	8002694 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f7fe fd0e 	bl	80010b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2202      	movs	r2, #2
 8002698:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	3304      	adds	r3, #4
 80026a4:	4619      	mov	r1, r3
 80026a6:	4610      	mov	r0, r2
 80026a8:	f000 fd7a 	bl	80031a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2201      	movs	r2, #1
 80026b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2201      	movs	r2, #1
 80026b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2201      	movs	r2, #1
 80026c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2201      	movs	r2, #1
 80026c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2201      	movs	r2, #1
 80026d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2201      	movs	r2, #1
 80026d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2201      	movs	r2, #1
 80026e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2201      	movs	r2, #1
 80026e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2201      	movs	r2, #1
 80026f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2201      	movs	r2, #1
 80026f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80026fc:	2300      	movs	r3, #0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3708      	adds	r7, #8
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002706:	b580      	push	{r7, lr}
 8002708:	b082      	sub	sp, #8
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d101      	bne.n	8002718 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e041      	b.n	800279c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800271e:	b2db      	uxtb	r3, r3
 8002720:	2b00      	cmp	r3, #0
 8002722:	d106      	bne.n	8002732 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2200      	movs	r2, #0
 8002728:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f7fe fc2f 	bl	8000f90 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2202      	movs	r2, #2
 8002736:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	3304      	adds	r3, #4
 8002742:	4619      	mov	r1, r3
 8002744:	4610      	mov	r0, r2
 8002746:	f000 fd2b 	bl	80031a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2201      	movs	r2, #1
 800274e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2201      	movs	r2, #1
 8002756:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2201      	movs	r2, #1
 800275e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2201      	movs	r2, #1
 8002766:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2201      	movs	r2, #1
 800276e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2201      	movs	r2, #1
 8002776:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2201      	movs	r2, #1
 800277e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2201      	movs	r2, #1
 8002786:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2201      	movs	r2, #1
 800278e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2201      	movs	r2, #1
 8002796:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800279a:	2300      	movs	r3, #0
}
 800279c:	4618      	mov	r0, r3
 800279e:	3708      	adds	r7, #8
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d109      	bne.n	80027c8 <HAL_TIM_PWM_Start+0x24>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	2b01      	cmp	r3, #1
 80027be:	bf14      	ite	ne
 80027c0:	2301      	movne	r3, #1
 80027c2:	2300      	moveq	r3, #0
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	e022      	b.n	800280e <HAL_TIM_PWM_Start+0x6a>
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	2b04      	cmp	r3, #4
 80027cc:	d109      	bne.n	80027e2 <HAL_TIM_PWM_Start+0x3e>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	bf14      	ite	ne
 80027da:	2301      	movne	r3, #1
 80027dc:	2300      	moveq	r3, #0
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	e015      	b.n	800280e <HAL_TIM_PWM_Start+0x6a>
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	2b08      	cmp	r3, #8
 80027e6:	d109      	bne.n	80027fc <HAL_TIM_PWM_Start+0x58>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	bf14      	ite	ne
 80027f4:	2301      	movne	r3, #1
 80027f6:	2300      	moveq	r3, #0
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	e008      	b.n	800280e <HAL_TIM_PWM_Start+0x6a>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002802:	b2db      	uxtb	r3, r3
 8002804:	2b01      	cmp	r3, #1
 8002806:	bf14      	ite	ne
 8002808:	2301      	movne	r3, #1
 800280a:	2300      	moveq	r3, #0
 800280c:	b2db      	uxtb	r3, r3
 800280e:	2b00      	cmp	r3, #0
 8002810:	d001      	beq.n	8002816 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e068      	b.n	80028e8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d104      	bne.n	8002826 <HAL_TIM_PWM_Start+0x82>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2202      	movs	r2, #2
 8002820:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002824:	e013      	b.n	800284e <HAL_TIM_PWM_Start+0xaa>
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	2b04      	cmp	r3, #4
 800282a:	d104      	bne.n	8002836 <HAL_TIM_PWM_Start+0x92>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2202      	movs	r2, #2
 8002830:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002834:	e00b      	b.n	800284e <HAL_TIM_PWM_Start+0xaa>
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	2b08      	cmp	r3, #8
 800283a:	d104      	bne.n	8002846 <HAL_TIM_PWM_Start+0xa2>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2202      	movs	r2, #2
 8002840:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002844:	e003      	b.n	800284e <HAL_TIM_PWM_Start+0xaa>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2202      	movs	r2, #2
 800284a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2201      	movs	r2, #1
 8002854:	6839      	ldr	r1, [r7, #0]
 8002856:	4618      	mov	r0, r3
 8002858:	f000 ffd2 	bl	8003800 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a23      	ldr	r2, [pc, #140]	@ (80028f0 <HAL_TIM_PWM_Start+0x14c>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d107      	bne.n	8002876 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002874:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a1d      	ldr	r2, [pc, #116]	@ (80028f0 <HAL_TIM_PWM_Start+0x14c>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d018      	beq.n	80028b2 <HAL_TIM_PWM_Start+0x10e>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002888:	d013      	beq.n	80028b2 <HAL_TIM_PWM_Start+0x10e>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a19      	ldr	r2, [pc, #100]	@ (80028f4 <HAL_TIM_PWM_Start+0x150>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d00e      	beq.n	80028b2 <HAL_TIM_PWM_Start+0x10e>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a17      	ldr	r2, [pc, #92]	@ (80028f8 <HAL_TIM_PWM_Start+0x154>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d009      	beq.n	80028b2 <HAL_TIM_PWM_Start+0x10e>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a16      	ldr	r2, [pc, #88]	@ (80028fc <HAL_TIM_PWM_Start+0x158>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d004      	beq.n	80028b2 <HAL_TIM_PWM_Start+0x10e>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a14      	ldr	r2, [pc, #80]	@ (8002900 <HAL_TIM_PWM_Start+0x15c>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d111      	bne.n	80028d6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	f003 0307 	and.w	r3, r3, #7
 80028bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2b06      	cmp	r3, #6
 80028c2:	d010      	beq.n	80028e6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f042 0201 	orr.w	r2, r2, #1
 80028d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028d4:	e007      	b.n	80028e6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f042 0201 	orr.w	r2, r2, #1
 80028e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028e6:	2300      	movs	r3, #0
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3710      	adds	r7, #16
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	40010000 	.word	0x40010000
 80028f4:	40000400 	.word	0x40000400
 80028f8:	40000800 	.word	0x40000800
 80028fc:	40000c00 	.word	0x40000c00
 8002900:	40014000 	.word	0x40014000

08002904 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d101      	bne.n	8002916 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e041      	b.n	800299a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800291c:	b2db      	uxtb	r3, r3
 800291e:	2b00      	cmp	r3, #0
 8002920:	d106      	bne.n	8002930 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2200      	movs	r2, #0
 8002926:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f000 f839 	bl	80029a2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2202      	movs	r2, #2
 8002934:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	3304      	adds	r3, #4
 8002940:	4619      	mov	r1, r3
 8002942:	4610      	mov	r0, r2
 8002944:	f000 fc2c 	bl	80031a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2201      	movs	r2, #1
 800297c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2201      	movs	r2, #1
 8002984:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2201      	movs	r2, #1
 800298c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	3708      	adds	r7, #8
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}

080029a2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80029a2:	b480      	push	{r7}
 80029a4:	b083      	sub	sp, #12
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80029aa:	bf00      	nop
 80029ac:	370c      	adds	r7, #12
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
	...

080029b8 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b084      	sub	sp, #16
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d104      	bne.n	80029d2 <HAL_TIM_IC_Start+0x1a>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	e013      	b.n	80029fa <HAL_TIM_IC_Start+0x42>
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	2b04      	cmp	r3, #4
 80029d6:	d104      	bne.n	80029e2 <HAL_TIM_IC_Start+0x2a>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	e00b      	b.n	80029fa <HAL_TIM_IC_Start+0x42>
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	2b08      	cmp	r3, #8
 80029e6:	d104      	bne.n	80029f2 <HAL_TIM_IC_Start+0x3a>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	e003      	b.n	80029fa <HAL_TIM_IC_Start+0x42>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d104      	bne.n	8002a0c <HAL_TIM_IC_Start+0x54>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	e013      	b.n	8002a34 <HAL_TIM_IC_Start+0x7c>
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	2b04      	cmp	r3, #4
 8002a10:	d104      	bne.n	8002a1c <HAL_TIM_IC_Start+0x64>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	e00b      	b.n	8002a34 <HAL_TIM_IC_Start+0x7c>
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	2b08      	cmp	r3, #8
 8002a20:	d104      	bne.n	8002a2c <HAL_TIM_IC_Start+0x74>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	e003      	b.n	8002a34 <HAL_TIM_IC_Start+0x7c>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002a36:	7bfb      	ldrb	r3, [r7, #15]
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d102      	bne.n	8002a42 <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002a3c:	7bbb      	ldrb	r3, [r7, #14]
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d001      	beq.n	8002a46 <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e077      	b.n	8002b36 <HAL_TIM_IC_Start+0x17e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d104      	bne.n	8002a56 <HAL_TIM_IC_Start+0x9e>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2202      	movs	r2, #2
 8002a50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002a54:	e013      	b.n	8002a7e <HAL_TIM_IC_Start+0xc6>
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	2b04      	cmp	r3, #4
 8002a5a:	d104      	bne.n	8002a66 <HAL_TIM_IC_Start+0xae>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2202      	movs	r2, #2
 8002a60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002a64:	e00b      	b.n	8002a7e <HAL_TIM_IC_Start+0xc6>
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	2b08      	cmp	r3, #8
 8002a6a:	d104      	bne.n	8002a76 <HAL_TIM_IC_Start+0xbe>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2202      	movs	r2, #2
 8002a70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002a74:	e003      	b.n	8002a7e <HAL_TIM_IC_Start+0xc6>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2202      	movs	r2, #2
 8002a7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d104      	bne.n	8002a8e <HAL_TIM_IC_Start+0xd6>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2202      	movs	r2, #2
 8002a88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002a8c:	e013      	b.n	8002ab6 <HAL_TIM_IC_Start+0xfe>
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	2b04      	cmp	r3, #4
 8002a92:	d104      	bne.n	8002a9e <HAL_TIM_IC_Start+0xe6>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2202      	movs	r2, #2
 8002a98:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002a9c:	e00b      	b.n	8002ab6 <HAL_TIM_IC_Start+0xfe>
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	2b08      	cmp	r3, #8
 8002aa2:	d104      	bne.n	8002aae <HAL_TIM_IC_Start+0xf6>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2202      	movs	r2, #2
 8002aa8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002aac:	e003      	b.n	8002ab6 <HAL_TIM_IC_Start+0xfe>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2202      	movs	r2, #2
 8002ab2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	2201      	movs	r2, #1
 8002abc:	6839      	ldr	r1, [r7, #0]
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f000 fe9e 	bl	8003800 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a1d      	ldr	r2, [pc, #116]	@ (8002b40 <HAL_TIM_IC_Start+0x188>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d018      	beq.n	8002b00 <HAL_TIM_IC_Start+0x148>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ad6:	d013      	beq.n	8002b00 <HAL_TIM_IC_Start+0x148>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a19      	ldr	r2, [pc, #100]	@ (8002b44 <HAL_TIM_IC_Start+0x18c>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d00e      	beq.n	8002b00 <HAL_TIM_IC_Start+0x148>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a18      	ldr	r2, [pc, #96]	@ (8002b48 <HAL_TIM_IC_Start+0x190>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d009      	beq.n	8002b00 <HAL_TIM_IC_Start+0x148>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a16      	ldr	r2, [pc, #88]	@ (8002b4c <HAL_TIM_IC_Start+0x194>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d004      	beq.n	8002b00 <HAL_TIM_IC_Start+0x148>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a15      	ldr	r2, [pc, #84]	@ (8002b50 <HAL_TIM_IC_Start+0x198>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d111      	bne.n	8002b24 <HAL_TIM_IC_Start+0x16c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	f003 0307 	and.w	r3, r3, #7
 8002b0a:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	2b06      	cmp	r3, #6
 8002b10:	d010      	beq.n	8002b34 <HAL_TIM_IC_Start+0x17c>
    {
      __HAL_TIM_ENABLE(htim);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f042 0201 	orr.w	r2, r2, #1
 8002b20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b22:	e007      	b.n	8002b34 <HAL_TIM_IC_Start+0x17c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f042 0201 	orr.w	r2, r2, #1
 8002b32:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b34:	2300      	movs	r3, #0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3710      	adds	r7, #16
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	40010000 	.word	0x40010000
 8002b44:	40000400 	.word	0x40000400
 8002b48:	40000800 	.word	0x40000800
 8002b4c:	40000c00 	.word	0x40000c00
 8002b50:	40014000 	.word	0x40014000

08002b54 <HAL_TIM_IC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2200      	movs	r2, #0
 8002b64:	6839      	ldr	r1, [r7, #0]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f000 fe4a 	bl	8003800 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	6a1a      	ldr	r2, [r3, #32]
 8002b72:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002b76:	4013      	ands	r3, r2
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d10f      	bne.n	8002b9c <HAL_TIM_IC_Stop+0x48>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	6a1a      	ldr	r2, [r3, #32]
 8002b82:	f240 4344 	movw	r3, #1092	@ 0x444
 8002b86:	4013      	ands	r3, r2
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d107      	bne.n	8002b9c <HAL_TIM_IC_Stop+0x48>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f022 0201 	bic.w	r2, r2, #1
 8002b9a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d104      	bne.n	8002bac <HAL_TIM_IC_Stop+0x58>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002baa:	e013      	b.n	8002bd4 <HAL_TIM_IC_Stop+0x80>
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	2b04      	cmp	r3, #4
 8002bb0:	d104      	bne.n	8002bbc <HAL_TIM_IC_Stop+0x68>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002bba:	e00b      	b.n	8002bd4 <HAL_TIM_IC_Stop+0x80>
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	2b08      	cmp	r3, #8
 8002bc0:	d104      	bne.n	8002bcc <HAL_TIM_IC_Stop+0x78>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002bca:	e003      	b.n	8002bd4 <HAL_TIM_IC_Stop+0x80>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d104      	bne.n	8002be4 <HAL_TIM_IC_Stop+0x90>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002be2:	e013      	b.n	8002c0c <HAL_TIM_IC_Stop+0xb8>
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	2b04      	cmp	r3, #4
 8002be8:	d104      	bne.n	8002bf4 <HAL_TIM_IC_Stop+0xa0>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2201      	movs	r2, #1
 8002bee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002bf2:	e00b      	b.n	8002c0c <HAL_TIM_IC_Stop+0xb8>
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	2b08      	cmp	r3, #8
 8002bf8:	d104      	bne.n	8002c04 <HAL_TIM_IC_Stop+0xb0>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002c02:	e003      	b.n	8002c0c <HAL_TIM_IC_Stop+0xb8>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2201      	movs	r2, #1
 8002c08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3708      	adds	r7, #8
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}

08002c16 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c16:	b580      	push	{r7, lr}
 8002c18:	b084      	sub	sp, #16
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	691b      	ldr	r3, [r3, #16]
 8002c2c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	f003 0302 	and.w	r3, r3, #2
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d020      	beq.n	8002c7a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f003 0302 	and.w	r3, r3, #2
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d01b      	beq.n	8002c7a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f06f 0202 	mvn.w	r2, #2
 8002c4a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	699b      	ldr	r3, [r3, #24]
 8002c58:	f003 0303 	and.w	r3, r3, #3
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d003      	beq.n	8002c68 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f000 fa7f 	bl	8003164 <HAL_TIM_IC_CaptureCallback>
 8002c66:	e005      	b.n	8002c74 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f000 fa71 	bl	8003150 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f000 fa82 	bl	8003178 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	f003 0304 	and.w	r3, r3, #4
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d020      	beq.n	8002cc6 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f003 0304 	and.w	r3, r3, #4
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d01b      	beq.n	8002cc6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f06f 0204 	mvn.w	r2, #4
 8002c96:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2202      	movs	r2, #2
 8002c9c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	699b      	ldr	r3, [r3, #24]
 8002ca4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d003      	beq.n	8002cb4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f000 fa59 	bl	8003164 <HAL_TIM_IC_CaptureCallback>
 8002cb2:	e005      	b.n	8002cc0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f000 fa4b 	bl	8003150 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f000 fa5c 	bl	8003178 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	f003 0308 	and.w	r3, r3, #8
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d020      	beq.n	8002d12 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f003 0308 	and.w	r3, r3, #8
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d01b      	beq.n	8002d12 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f06f 0208 	mvn.w	r2, #8
 8002ce2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2204      	movs	r2, #4
 8002ce8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	69db      	ldr	r3, [r3, #28]
 8002cf0:	f003 0303 	and.w	r3, r3, #3
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d003      	beq.n	8002d00 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f000 fa33 	bl	8003164 <HAL_TIM_IC_CaptureCallback>
 8002cfe:	e005      	b.n	8002d0c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f000 fa25 	bl	8003150 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f000 fa36 	bl	8003178 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	f003 0310 	and.w	r3, r3, #16
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d020      	beq.n	8002d5e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f003 0310 	and.w	r3, r3, #16
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d01b      	beq.n	8002d5e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f06f 0210 	mvn.w	r2, #16
 8002d2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2208      	movs	r2, #8
 8002d34:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	69db      	ldr	r3, [r3, #28]
 8002d3c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d003      	beq.n	8002d4c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f000 fa0d 	bl	8003164 <HAL_TIM_IC_CaptureCallback>
 8002d4a:	e005      	b.n	8002d58 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f000 f9ff 	bl	8003150 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f000 fa10 	bl	8003178 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	f003 0301 	and.w	r3, r3, #1
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d00c      	beq.n	8002d82 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f003 0301 	and.w	r3, r3, #1
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d007      	beq.n	8002d82 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f06f 0201 	mvn.w	r2, #1
 8002d7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f000 f9dd 	bl	800313c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d00c      	beq.n	8002da6 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d007      	beq.n	8002da6 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002d9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f000 fe1d 	bl	80039e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d00c      	beq.n	8002dca <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d007      	beq.n	8002dca <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002dc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f000 f9e1 	bl	800318c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	f003 0320 	and.w	r3, r3, #32
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d00c      	beq.n	8002dee <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f003 0320 	and.w	r3, r3, #32
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d007      	beq.n	8002dee <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f06f 0220 	mvn.w	r2, #32
 8002de6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f000 fdef 	bl	80039cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002dee:	bf00      	nop
 8002df0:	3710      	adds	r7, #16
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}

08002df6 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002df6:	b580      	push	{r7, lr}
 8002df8:	b086      	sub	sp, #24
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	60f8      	str	r0, [r7, #12]
 8002dfe:	60b9      	str	r1, [r7, #8]
 8002e00:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e02:	2300      	movs	r3, #0
 8002e04:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d101      	bne.n	8002e14 <HAL_TIM_IC_ConfigChannel+0x1e>
 8002e10:	2302      	movs	r3, #2
 8002e12:	e088      	b.n	8002f26 <HAL_TIM_IC_ConfigChannel+0x130>
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d11b      	bne.n	8002e5a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8002e32:	f000 fbc7 	bl	80035c4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	699a      	ldr	r2, [r3, #24]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f022 020c 	bic.w	r2, r2, #12
 8002e44:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	6999      	ldr	r1, [r3, #24]
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	689a      	ldr	r2, [r3, #8]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	430a      	orrs	r2, r1
 8002e56:	619a      	str	r2, [r3, #24]
 8002e58:	e060      	b.n	8002f1c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2b04      	cmp	r3, #4
 8002e5e:	d11c      	bne.n	8002e9a <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8002e70:	f000 fc10 	bl	8003694 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	699a      	ldr	r2, [r3, #24]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002e82:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	6999      	ldr	r1, [r3, #24]
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	021a      	lsls	r2, r3, #8
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	430a      	orrs	r2, r1
 8002e96:	619a      	str	r2, [r3, #24]
 8002e98:	e040      	b.n	8002f1c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2b08      	cmp	r3, #8
 8002e9e:	d11b      	bne.n	8002ed8 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8002eb0:	f000 fc2d 	bl	800370e <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	69da      	ldr	r2, [r3, #28]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f022 020c 	bic.w	r2, r2, #12
 8002ec2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	69d9      	ldr	r1, [r3, #28]
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	689a      	ldr	r2, [r3, #8]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	61da      	str	r2, [r3, #28]
 8002ed6:	e021      	b.n	8002f1c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2b0c      	cmp	r3, #12
 8002edc:	d11c      	bne.n	8002f18 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8002eee:	f000 fc4a 	bl	8003786 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	69da      	ldr	r2, [r3, #28]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002f00:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	69d9      	ldr	r1, [r3, #28]
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	021a      	lsls	r2, r3, #8
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	430a      	orrs	r2, r1
 8002f14:	61da      	str	r2, [r3, #28]
 8002f16:	e001      	b.n	8002f1c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002f24:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3718      	adds	r7, #24
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
	...

08002f30 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b086      	sub	sp, #24
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	60b9      	str	r1, [r7, #8]
 8002f3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d101      	bne.n	8002f4e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002f4a:	2302      	movs	r3, #2
 8002f4c:	e0ae      	b.n	80030ac <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2201      	movs	r2, #1
 8002f52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2b0c      	cmp	r3, #12
 8002f5a:	f200 809f 	bhi.w	800309c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002f5e:	a201      	add	r2, pc, #4	@ (adr r2, 8002f64 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f64:	08002f99 	.word	0x08002f99
 8002f68:	0800309d 	.word	0x0800309d
 8002f6c:	0800309d 	.word	0x0800309d
 8002f70:	0800309d 	.word	0x0800309d
 8002f74:	08002fd9 	.word	0x08002fd9
 8002f78:	0800309d 	.word	0x0800309d
 8002f7c:	0800309d 	.word	0x0800309d
 8002f80:	0800309d 	.word	0x0800309d
 8002f84:	0800301b 	.word	0x0800301b
 8002f88:	0800309d 	.word	0x0800309d
 8002f8c:	0800309d 	.word	0x0800309d
 8002f90:	0800309d 	.word	0x0800309d
 8002f94:	0800305b 	.word	0x0800305b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	68b9      	ldr	r1, [r7, #8]
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f000 f984 	bl	80032ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	699a      	ldr	r2, [r3, #24]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f042 0208 	orr.w	r2, r2, #8
 8002fb2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	699a      	ldr	r2, [r3, #24]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f022 0204 	bic.w	r2, r2, #4
 8002fc2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	6999      	ldr	r1, [r3, #24]
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	691a      	ldr	r2, [r3, #16]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	430a      	orrs	r2, r1
 8002fd4:	619a      	str	r2, [r3, #24]
      break;
 8002fd6:	e064      	b.n	80030a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	68b9      	ldr	r1, [r7, #8]
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f000 f9ca 	bl	8003378 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	699a      	ldr	r2, [r3, #24]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002ff2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	699a      	ldr	r2, [r3, #24]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003002:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	6999      	ldr	r1, [r3, #24]
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	691b      	ldr	r3, [r3, #16]
 800300e:	021a      	lsls	r2, r3, #8
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	430a      	orrs	r2, r1
 8003016:	619a      	str	r2, [r3, #24]
      break;
 8003018:	e043      	b.n	80030a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	68b9      	ldr	r1, [r7, #8]
 8003020:	4618      	mov	r0, r3
 8003022:	f000 fa15 	bl	8003450 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	69da      	ldr	r2, [r3, #28]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f042 0208 	orr.w	r2, r2, #8
 8003034:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	69da      	ldr	r2, [r3, #28]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f022 0204 	bic.w	r2, r2, #4
 8003044:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	69d9      	ldr	r1, [r3, #28]
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	691a      	ldr	r2, [r3, #16]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	430a      	orrs	r2, r1
 8003056:	61da      	str	r2, [r3, #28]
      break;
 8003058:	e023      	b.n	80030a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	68b9      	ldr	r1, [r7, #8]
 8003060:	4618      	mov	r0, r3
 8003062:	f000 fa5f 	bl	8003524 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	69da      	ldr	r2, [r3, #28]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003074:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	69da      	ldr	r2, [r3, #28]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003084:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	69d9      	ldr	r1, [r3, #28]
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	691b      	ldr	r3, [r3, #16]
 8003090:	021a      	lsls	r2, r3, #8
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	430a      	orrs	r2, r1
 8003098:	61da      	str	r2, [r3, #28]
      break;
 800309a:	e002      	b.n	80030a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	75fb      	strb	r3, [r7, #23]
      break;
 80030a0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80030aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3718      	adds	r7, #24
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b085      	sub	sp, #20
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80030be:	2300      	movs	r3, #0
 80030c0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	2b0c      	cmp	r3, #12
 80030c6:	d831      	bhi.n	800312c <HAL_TIM_ReadCapturedValue+0x78>
 80030c8:	a201      	add	r2, pc, #4	@ (adr r2, 80030d0 <HAL_TIM_ReadCapturedValue+0x1c>)
 80030ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ce:	bf00      	nop
 80030d0:	08003105 	.word	0x08003105
 80030d4:	0800312d 	.word	0x0800312d
 80030d8:	0800312d 	.word	0x0800312d
 80030dc:	0800312d 	.word	0x0800312d
 80030e0:	0800310f 	.word	0x0800310f
 80030e4:	0800312d 	.word	0x0800312d
 80030e8:	0800312d 	.word	0x0800312d
 80030ec:	0800312d 	.word	0x0800312d
 80030f0:	08003119 	.word	0x08003119
 80030f4:	0800312d 	.word	0x0800312d
 80030f8:	0800312d 	.word	0x0800312d
 80030fc:	0800312d 	.word	0x0800312d
 8003100:	08003123 	.word	0x08003123
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800310a:	60fb      	str	r3, [r7, #12]

      break;
 800310c:	e00f      	b.n	800312e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003114:	60fb      	str	r3, [r7, #12]

      break;
 8003116:	e00a      	b.n	800312e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800311e:	60fb      	str	r3, [r7, #12]

      break;
 8003120:	e005      	b.n	800312e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003128:	60fb      	str	r3, [r7, #12]

      break;
 800312a:	e000      	b.n	800312e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800312c:	bf00      	nop
  }

  return tmpreg;
 800312e:	68fb      	ldr	r3, [r7, #12]
}
 8003130:	4618      	mov	r0, r3
 8003132:	3714      	adds	r7, #20
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr

0800313c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003144:	bf00      	nop
 8003146:	370c      	adds	r7, #12
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr

08003150 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003158:	bf00      	nop
 800315a:	370c      	adds	r7, #12
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr

08003164 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800316c:	bf00      	nop
 800316e:	370c      	adds	r7, #12
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr

08003178 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003180:	bf00      	nop
 8003182:	370c      	adds	r7, #12
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr

0800318c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003194:	bf00      	nop
 8003196:	370c      	adds	r7, #12
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr

080031a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b085      	sub	sp, #20
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	4a37      	ldr	r2, [pc, #220]	@ (8003290 <TIM_Base_SetConfig+0xf0>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d00f      	beq.n	80031d8 <TIM_Base_SetConfig+0x38>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031be:	d00b      	beq.n	80031d8 <TIM_Base_SetConfig+0x38>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	4a34      	ldr	r2, [pc, #208]	@ (8003294 <TIM_Base_SetConfig+0xf4>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d007      	beq.n	80031d8 <TIM_Base_SetConfig+0x38>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	4a33      	ldr	r2, [pc, #204]	@ (8003298 <TIM_Base_SetConfig+0xf8>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d003      	beq.n	80031d8 <TIM_Base_SetConfig+0x38>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	4a32      	ldr	r2, [pc, #200]	@ (800329c <TIM_Base_SetConfig+0xfc>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d108      	bne.n	80031ea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	68fa      	ldr	r2, [r7, #12]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a28      	ldr	r2, [pc, #160]	@ (8003290 <TIM_Base_SetConfig+0xf0>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d01b      	beq.n	800322a <TIM_Base_SetConfig+0x8a>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031f8:	d017      	beq.n	800322a <TIM_Base_SetConfig+0x8a>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a25      	ldr	r2, [pc, #148]	@ (8003294 <TIM_Base_SetConfig+0xf4>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d013      	beq.n	800322a <TIM_Base_SetConfig+0x8a>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a24      	ldr	r2, [pc, #144]	@ (8003298 <TIM_Base_SetConfig+0xf8>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d00f      	beq.n	800322a <TIM_Base_SetConfig+0x8a>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4a23      	ldr	r2, [pc, #140]	@ (800329c <TIM_Base_SetConfig+0xfc>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d00b      	beq.n	800322a <TIM_Base_SetConfig+0x8a>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a22      	ldr	r2, [pc, #136]	@ (80032a0 <TIM_Base_SetConfig+0x100>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d007      	beq.n	800322a <TIM_Base_SetConfig+0x8a>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a21      	ldr	r2, [pc, #132]	@ (80032a4 <TIM_Base_SetConfig+0x104>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d003      	beq.n	800322a <TIM_Base_SetConfig+0x8a>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a20      	ldr	r2, [pc, #128]	@ (80032a8 <TIM_Base_SetConfig+0x108>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d108      	bne.n	800323c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003230:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	68fa      	ldr	r2, [r7, #12]
 8003238:	4313      	orrs	r3, r2
 800323a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	695b      	ldr	r3, [r3, #20]
 8003246:	4313      	orrs	r3, r2
 8003248:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	689a      	ldr	r2, [r3, #8]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a0c      	ldr	r2, [pc, #48]	@ (8003290 <TIM_Base_SetConfig+0xf0>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d103      	bne.n	800326a <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	691a      	ldr	r2, [r3, #16]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f043 0204 	orr.w	r2, r3, #4
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2201      	movs	r2, #1
 800327a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	68fa      	ldr	r2, [r7, #12]
 8003280:	601a      	str	r2, [r3, #0]
}
 8003282:	bf00      	nop
 8003284:	3714      	adds	r7, #20
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr
 800328e:	bf00      	nop
 8003290:	40010000 	.word	0x40010000
 8003294:	40000400 	.word	0x40000400
 8003298:	40000800 	.word	0x40000800
 800329c:	40000c00 	.word	0x40000c00
 80032a0:	40014000 	.word	0x40014000
 80032a4:	40014400 	.word	0x40014400
 80032a8:	40014800 	.word	0x40014800

080032ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b087      	sub	sp, #28
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a1b      	ldr	r3, [r3, #32]
 80032ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6a1b      	ldr	r3, [r3, #32]
 80032c0:	f023 0201 	bic.w	r2, r3, #1
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	699b      	ldr	r3, [r3, #24]
 80032d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f023 0303 	bic.w	r3, r3, #3
 80032e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	68fa      	ldr	r2, [r7, #12]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	f023 0302 	bic.w	r3, r3, #2
 80032f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	697a      	ldr	r2, [r7, #20]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	4a1c      	ldr	r2, [pc, #112]	@ (8003374 <TIM_OC1_SetConfig+0xc8>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d10c      	bne.n	8003322 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	f023 0308 	bic.w	r3, r3, #8
 800330e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	697a      	ldr	r2, [r7, #20]
 8003316:	4313      	orrs	r3, r2
 8003318:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	f023 0304 	bic.w	r3, r3, #4
 8003320:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a13      	ldr	r2, [pc, #76]	@ (8003374 <TIM_OC1_SetConfig+0xc8>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d111      	bne.n	800334e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003330:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003338:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	695b      	ldr	r3, [r3, #20]
 800333e:	693a      	ldr	r2, [r7, #16]
 8003340:	4313      	orrs	r3, r2
 8003342:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	699b      	ldr	r3, [r3, #24]
 8003348:	693a      	ldr	r2, [r7, #16]
 800334a:	4313      	orrs	r3, r2
 800334c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	693a      	ldr	r2, [r7, #16]
 8003352:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	68fa      	ldr	r2, [r7, #12]
 8003358:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	685a      	ldr	r2, [r3, #4]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	697a      	ldr	r2, [r7, #20]
 8003366:	621a      	str	r2, [r3, #32]
}
 8003368:	bf00      	nop
 800336a:	371c      	adds	r7, #28
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr
 8003374:	40010000 	.word	0x40010000

08003378 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003378:	b480      	push	{r7}
 800337a:	b087      	sub	sp, #28
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a1b      	ldr	r3, [r3, #32]
 8003386:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6a1b      	ldr	r3, [r3, #32]
 800338c:	f023 0210 	bic.w	r2, r3, #16
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	699b      	ldr	r3, [r3, #24]
 800339e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80033a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	021b      	lsls	r3, r3, #8
 80033b6:	68fa      	ldr	r2, [r7, #12]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	f023 0320 	bic.w	r3, r3, #32
 80033c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	011b      	lsls	r3, r3, #4
 80033ca:	697a      	ldr	r2, [r7, #20]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	4a1e      	ldr	r2, [pc, #120]	@ (800344c <TIM_OC2_SetConfig+0xd4>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d10d      	bne.n	80033f4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80033de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	011b      	lsls	r3, r3, #4
 80033e6:	697a      	ldr	r2, [r7, #20]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80033f2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	4a15      	ldr	r2, [pc, #84]	@ (800344c <TIM_OC2_SetConfig+0xd4>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d113      	bne.n	8003424 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003402:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800340a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	695b      	ldr	r3, [r3, #20]
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	693a      	ldr	r2, [r7, #16]
 8003414:	4313      	orrs	r3, r2
 8003416:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	699b      	ldr	r3, [r3, #24]
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	693a      	ldr	r2, [r7, #16]
 8003420:	4313      	orrs	r3, r2
 8003422:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	693a      	ldr	r2, [r7, #16]
 8003428:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	68fa      	ldr	r2, [r7, #12]
 800342e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	685a      	ldr	r2, [r3, #4]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	697a      	ldr	r2, [r7, #20]
 800343c:	621a      	str	r2, [r3, #32]
}
 800343e:	bf00      	nop
 8003440:	371c      	adds	r7, #28
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr
 800344a:	bf00      	nop
 800344c:	40010000 	.word	0x40010000

08003450 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003450:	b480      	push	{r7}
 8003452:	b087      	sub	sp, #28
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a1b      	ldr	r3, [r3, #32]
 800345e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6a1b      	ldr	r3, [r3, #32]
 8003464:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	69db      	ldr	r3, [r3, #28]
 8003476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800347e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f023 0303 	bic.w	r3, r3, #3
 8003486:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	68fa      	ldr	r2, [r7, #12]
 800348e:	4313      	orrs	r3, r2
 8003490:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003498:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	021b      	lsls	r3, r3, #8
 80034a0:	697a      	ldr	r2, [r7, #20]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a1d      	ldr	r2, [pc, #116]	@ (8003520 <TIM_OC3_SetConfig+0xd0>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d10d      	bne.n	80034ca <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80034b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	021b      	lsls	r3, r3, #8
 80034bc:	697a      	ldr	r2, [r7, #20]
 80034be:	4313      	orrs	r3, r2
 80034c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80034c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a14      	ldr	r2, [pc, #80]	@ (8003520 <TIM_OC3_SetConfig+0xd0>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d113      	bne.n	80034fa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80034d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80034e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	695b      	ldr	r3, [r3, #20]
 80034e6:	011b      	lsls	r3, r3, #4
 80034e8:	693a      	ldr	r2, [r7, #16]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	699b      	ldr	r3, [r3, #24]
 80034f2:	011b      	lsls	r3, r3, #4
 80034f4:	693a      	ldr	r2, [r7, #16]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	693a      	ldr	r2, [r7, #16]
 80034fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	68fa      	ldr	r2, [r7, #12]
 8003504:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	685a      	ldr	r2, [r3, #4]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	697a      	ldr	r2, [r7, #20]
 8003512:	621a      	str	r2, [r3, #32]
}
 8003514:	bf00      	nop
 8003516:	371c      	adds	r7, #28
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr
 8003520:	40010000 	.word	0x40010000

08003524 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003524:	b480      	push	{r7}
 8003526:	b087      	sub	sp, #28
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a1b      	ldr	r3, [r3, #32]
 8003532:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6a1b      	ldr	r3, [r3, #32]
 8003538:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	69db      	ldr	r3, [r3, #28]
 800354a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003552:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800355a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	021b      	lsls	r3, r3, #8
 8003562:	68fa      	ldr	r2, [r7, #12]
 8003564:	4313      	orrs	r3, r2
 8003566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800356e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	031b      	lsls	r3, r3, #12
 8003576:	693a      	ldr	r2, [r7, #16]
 8003578:	4313      	orrs	r3, r2
 800357a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	4a10      	ldr	r2, [pc, #64]	@ (80035c0 <TIM_OC4_SetConfig+0x9c>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d109      	bne.n	8003598 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800358a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	695b      	ldr	r3, [r3, #20]
 8003590:	019b      	lsls	r3, r3, #6
 8003592:	697a      	ldr	r2, [r7, #20]
 8003594:	4313      	orrs	r3, r2
 8003596:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	697a      	ldr	r2, [r7, #20]
 800359c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	68fa      	ldr	r2, [r7, #12]
 80035a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	685a      	ldr	r2, [r3, #4]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	693a      	ldr	r2, [r7, #16]
 80035b0:	621a      	str	r2, [r3, #32]
}
 80035b2:	bf00      	nop
 80035b4:	371c      	adds	r7, #28
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr
 80035be:	bf00      	nop
 80035c0:	40010000 	.word	0x40010000

080035c4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b087      	sub	sp, #28
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	60f8      	str	r0, [r7, #12]
 80035cc:	60b9      	str	r1, [r7, #8]
 80035ce:	607a      	str	r2, [r7, #4]
 80035d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	6a1b      	ldr	r3, [r3, #32]
 80035d6:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6a1b      	ldr	r3, [r3, #32]
 80035dc:	f023 0201 	bic.w	r2, r3, #1
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	699b      	ldr	r3, [r3, #24]
 80035e8:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	4a24      	ldr	r2, [pc, #144]	@ (8003680 <TIM_TI1_SetConfig+0xbc>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d013      	beq.n	800361a <TIM_TI1_SetConfig+0x56>
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035f8:	d00f      	beq.n	800361a <TIM_TI1_SetConfig+0x56>
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	4a21      	ldr	r2, [pc, #132]	@ (8003684 <TIM_TI1_SetConfig+0xc0>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d00b      	beq.n	800361a <TIM_TI1_SetConfig+0x56>
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	4a20      	ldr	r2, [pc, #128]	@ (8003688 <TIM_TI1_SetConfig+0xc4>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d007      	beq.n	800361a <TIM_TI1_SetConfig+0x56>
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	4a1f      	ldr	r2, [pc, #124]	@ (800368c <TIM_TI1_SetConfig+0xc8>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d003      	beq.n	800361a <TIM_TI1_SetConfig+0x56>
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	4a1e      	ldr	r2, [pc, #120]	@ (8003690 <TIM_TI1_SetConfig+0xcc>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d101      	bne.n	800361e <TIM_TI1_SetConfig+0x5a>
 800361a:	2301      	movs	r3, #1
 800361c:	e000      	b.n	8003620 <TIM_TI1_SetConfig+0x5c>
 800361e:	2300      	movs	r3, #0
 8003620:	2b00      	cmp	r3, #0
 8003622:	d008      	beq.n	8003636 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	f023 0303 	bic.w	r3, r3, #3
 800362a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800362c:	697a      	ldr	r2, [r7, #20]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4313      	orrs	r3, r2
 8003632:	617b      	str	r3, [r7, #20]
 8003634:	e003      	b.n	800363e <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	f043 0301 	orr.w	r3, r3, #1
 800363c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003644:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	011b      	lsls	r3, r3, #4
 800364a:	b2db      	uxtb	r3, r3
 800364c:	697a      	ldr	r2, [r7, #20]
 800364e:	4313      	orrs	r3, r2
 8003650:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	f023 030a 	bic.w	r3, r3, #10
 8003658:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	f003 030a 	and.w	r3, r3, #10
 8003660:	693a      	ldr	r2, [r7, #16]
 8003662:	4313      	orrs	r3, r2
 8003664:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	697a      	ldr	r2, [r7, #20]
 800366a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	693a      	ldr	r2, [r7, #16]
 8003670:	621a      	str	r2, [r3, #32]
}
 8003672:	bf00      	nop
 8003674:	371c      	adds	r7, #28
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr
 800367e:	bf00      	nop
 8003680:	40010000 	.word	0x40010000
 8003684:	40000400 	.word	0x40000400
 8003688:	40000800 	.word	0x40000800
 800368c:	40000c00 	.word	0x40000c00
 8003690:	40014000 	.word	0x40014000

08003694 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003694:	b480      	push	{r7}
 8003696:	b087      	sub	sp, #28
 8003698:	af00      	add	r7, sp, #0
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	60b9      	str	r1, [r7, #8]
 800369e:	607a      	str	r2, [r7, #4]
 80036a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	6a1b      	ldr	r3, [r3, #32]
 80036a6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6a1b      	ldr	r3, [r3, #32]
 80036ac:	f023 0210 	bic.w	r2, r3, #16
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	699b      	ldr	r3, [r3, #24]
 80036b8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	021b      	lsls	r3, r3, #8
 80036c6:	693a      	ldr	r2, [r7, #16]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80036d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	031b      	lsls	r3, r3, #12
 80036d8:	b29b      	uxth	r3, r3
 80036da:	693a      	ldr	r2, [r7, #16]
 80036dc:	4313      	orrs	r3, r2
 80036de:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80036e6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	011b      	lsls	r3, r3, #4
 80036ec:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80036f0:	697a      	ldr	r2, [r7, #20]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	693a      	ldr	r2, [r7, #16]
 80036fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	697a      	ldr	r2, [r7, #20]
 8003700:	621a      	str	r2, [r3, #32]
}
 8003702:	bf00      	nop
 8003704:	371c      	adds	r7, #28
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr

0800370e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800370e:	b480      	push	{r7}
 8003710:	b087      	sub	sp, #28
 8003712:	af00      	add	r7, sp, #0
 8003714:	60f8      	str	r0, [r7, #12]
 8003716:	60b9      	str	r1, [r7, #8]
 8003718:	607a      	str	r2, [r7, #4]
 800371a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6a1b      	ldr	r3, [r3, #32]
 8003720:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6a1b      	ldr	r3, [r3, #32]
 8003726:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	69db      	ldr	r3, [r3, #28]
 8003732:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	f023 0303 	bic.w	r3, r3, #3
 800373a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800373c:	693a      	ldr	r2, [r7, #16]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4313      	orrs	r3, r2
 8003742:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800374a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	011b      	lsls	r3, r3, #4
 8003750:	b2db      	uxtb	r3, r3
 8003752:	693a      	ldr	r2, [r7, #16]
 8003754:	4313      	orrs	r3, r2
 8003756:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800375e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	021b      	lsls	r3, r3, #8
 8003764:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8003768:	697a      	ldr	r2, [r7, #20]
 800376a:	4313      	orrs	r3, r2
 800376c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	693a      	ldr	r2, [r7, #16]
 8003772:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	697a      	ldr	r2, [r7, #20]
 8003778:	621a      	str	r2, [r3, #32]
}
 800377a:	bf00      	nop
 800377c:	371c      	adds	r7, #28
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr

08003786 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003786:	b480      	push	{r7}
 8003788:	b087      	sub	sp, #28
 800378a:	af00      	add	r7, sp, #0
 800378c:	60f8      	str	r0, [r7, #12]
 800378e:	60b9      	str	r1, [r7, #8]
 8003790:	607a      	str	r2, [r7, #4]
 8003792:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6a1b      	ldr	r3, [r3, #32]
 8003798:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	6a1b      	ldr	r3, [r3, #32]
 800379e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	69db      	ldr	r3, [r3, #28]
 80037aa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037b2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	021b      	lsls	r3, r3, #8
 80037b8:	693a      	ldr	r2, [r7, #16]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80037c4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	031b      	lsls	r3, r3, #12
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	693a      	ldr	r2, [r7, #16]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80037d8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	031b      	lsls	r3, r3, #12
 80037de:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80037e2:	697a      	ldr	r2, [r7, #20]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	693a      	ldr	r2, [r7, #16]
 80037ec:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	697a      	ldr	r2, [r7, #20]
 80037f2:	621a      	str	r2, [r3, #32]
}
 80037f4:	bf00      	nop
 80037f6:	371c      	adds	r7, #28
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr

08003800 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003800:	b480      	push	{r7}
 8003802:	b087      	sub	sp, #28
 8003804:	af00      	add	r7, sp, #0
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	60b9      	str	r1, [r7, #8]
 800380a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	f003 031f 	and.w	r3, r3, #31
 8003812:	2201      	movs	r2, #1
 8003814:	fa02 f303 	lsl.w	r3, r2, r3
 8003818:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	6a1a      	ldr	r2, [r3, #32]
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	43db      	mvns	r3, r3
 8003822:	401a      	ands	r2, r3
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6a1a      	ldr	r2, [r3, #32]
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	f003 031f 	and.w	r3, r3, #31
 8003832:	6879      	ldr	r1, [r7, #4]
 8003834:	fa01 f303 	lsl.w	r3, r1, r3
 8003838:	431a      	orrs	r2, r3
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	621a      	str	r2, [r3, #32]
}
 800383e:	bf00      	nop
 8003840:	371c      	adds	r7, #28
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr
	...

0800384c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800384c:	b480      	push	{r7}
 800384e:	b085      	sub	sp, #20
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800385c:	2b01      	cmp	r3, #1
 800385e:	d101      	bne.n	8003864 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003860:	2302      	movs	r3, #2
 8003862:	e050      	b.n	8003906 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2202      	movs	r2, #2
 8003870:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800388a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	68fa      	ldr	r2, [r7, #12]
 8003892:	4313      	orrs	r3, r2
 8003894:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	68fa      	ldr	r2, [r7, #12]
 800389c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a1c      	ldr	r2, [pc, #112]	@ (8003914 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d018      	beq.n	80038da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038b0:	d013      	beq.n	80038da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a18      	ldr	r2, [pc, #96]	@ (8003918 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d00e      	beq.n	80038da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a16      	ldr	r2, [pc, #88]	@ (800391c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d009      	beq.n	80038da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a15      	ldr	r2, [pc, #84]	@ (8003920 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d004      	beq.n	80038da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a13      	ldr	r2, [pc, #76]	@ (8003924 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d10c      	bne.n	80038f4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80038e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	68ba      	ldr	r2, [r7, #8]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	68ba      	ldr	r2, [r7, #8]
 80038f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2200      	movs	r2, #0
 8003900:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003904:	2300      	movs	r3, #0
}
 8003906:	4618      	mov	r0, r3
 8003908:	3714      	adds	r7, #20
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
 8003912:	bf00      	nop
 8003914:	40010000 	.word	0x40010000
 8003918:	40000400 	.word	0x40000400
 800391c:	40000800 	.word	0x40000800
 8003920:	40000c00 	.word	0x40000c00
 8003924:	40014000 	.word	0x40014000

08003928 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003928:	b480      	push	{r7}
 800392a:	b085      	sub	sp, #20
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003932:	2300      	movs	r3, #0
 8003934:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800393c:	2b01      	cmp	r3, #1
 800393e:	d101      	bne.n	8003944 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003940:	2302      	movs	r3, #2
 8003942:	e03d      	b.n	80039c0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	68db      	ldr	r3, [r3, #12]
 8003956:	4313      	orrs	r3, r2
 8003958:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	4313      	orrs	r3, r2
 8003966:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	4313      	orrs	r3, r2
 8003974:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4313      	orrs	r3, r2
 8003982:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	691b      	ldr	r3, [r3, #16]
 800398e:	4313      	orrs	r3, r2
 8003990:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	695b      	ldr	r3, [r3, #20]
 800399c:	4313      	orrs	r3, r2
 800399e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	69db      	ldr	r3, [r3, #28]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	68fa      	ldr	r2, [r7, #12]
 80039b4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80039be:	2300      	movs	r3, #0
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3714      	adds	r7, #20
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr

080039cc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b083      	sub	sp, #12
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80039d4:	bf00      	nop
 80039d6:	370c      	adds	r7, #12
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr

080039e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b083      	sub	sp, #12
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80039e8:	bf00      	nop
 80039ea:	370c      	adds	r7, #12
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr

080039f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d101      	bne.n	8003a06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e042      	b.n	8003a8c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d106      	bne.n	8003a20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2200      	movs	r2, #0
 8003a16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f7fd fc7c 	bl	8001318 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2224      	movs	r2, #36	@ 0x24
 8003a24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	68da      	ldr	r2, [r3, #12]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003a36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f000 f82b 	bl	8003a94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	691a      	ldr	r2, [r3, #16]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003a4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	695a      	ldr	r2, [r3, #20]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003a5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	68da      	ldr	r2, [r3, #12]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003a6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2220      	movs	r2, #32
 8003a78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2220      	movs	r2, #32
 8003a80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003a8a:	2300      	movs	r3, #0
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3708      	adds	r7, #8
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a98:	b0c0      	sub	sp, #256	@ 0x100
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003aa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	691b      	ldr	r3, [r3, #16]
 8003aa8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ab0:	68d9      	ldr	r1, [r3, #12]
 8003ab2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	ea40 0301 	orr.w	r3, r0, r1
 8003abc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003abe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ac2:	689a      	ldr	r2, [r3, #8]
 8003ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	431a      	orrs	r2, r3
 8003acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ad0:	695b      	ldr	r3, [r3, #20]
 8003ad2:	431a      	orrs	r2, r3
 8003ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ad8:	69db      	ldr	r3, [r3, #28]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003aec:	f021 010c 	bic.w	r1, r1, #12
 8003af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003afa:	430b      	orrs	r3, r1
 8003afc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003afe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	695b      	ldr	r3, [r3, #20]
 8003b06:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003b0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b0e:	6999      	ldr	r1, [r3, #24]
 8003b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	ea40 0301 	orr.w	r3, r0, r1
 8003b1a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	4b8f      	ldr	r3, [pc, #572]	@ (8003d60 <UART_SetConfig+0x2cc>)
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d005      	beq.n	8003b34 <UART_SetConfig+0xa0>
 8003b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	4b8d      	ldr	r3, [pc, #564]	@ (8003d64 <UART_SetConfig+0x2d0>)
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d104      	bne.n	8003b3e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b34:	f7fe fc94 	bl	8002460 <HAL_RCC_GetPCLK2Freq>
 8003b38:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003b3c:	e003      	b.n	8003b46 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b3e:	f7fe fc7b 	bl	8002438 <HAL_RCC_GetPCLK1Freq>
 8003b42:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b4a:	69db      	ldr	r3, [r3, #28]
 8003b4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b50:	f040 810c 	bne.w	8003d6c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003b5e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003b62:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003b66:	4622      	mov	r2, r4
 8003b68:	462b      	mov	r3, r5
 8003b6a:	1891      	adds	r1, r2, r2
 8003b6c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003b6e:	415b      	adcs	r3, r3
 8003b70:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003b72:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003b76:	4621      	mov	r1, r4
 8003b78:	eb12 0801 	adds.w	r8, r2, r1
 8003b7c:	4629      	mov	r1, r5
 8003b7e:	eb43 0901 	adc.w	r9, r3, r1
 8003b82:	f04f 0200 	mov.w	r2, #0
 8003b86:	f04f 0300 	mov.w	r3, #0
 8003b8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b96:	4690      	mov	r8, r2
 8003b98:	4699      	mov	r9, r3
 8003b9a:	4623      	mov	r3, r4
 8003b9c:	eb18 0303 	adds.w	r3, r8, r3
 8003ba0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003ba4:	462b      	mov	r3, r5
 8003ba6:	eb49 0303 	adc.w	r3, r9, r3
 8003baa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003bae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003bba:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003bbe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003bc2:	460b      	mov	r3, r1
 8003bc4:	18db      	adds	r3, r3, r3
 8003bc6:	653b      	str	r3, [r7, #80]	@ 0x50
 8003bc8:	4613      	mov	r3, r2
 8003bca:	eb42 0303 	adc.w	r3, r2, r3
 8003bce:	657b      	str	r3, [r7, #84]	@ 0x54
 8003bd0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003bd4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003bd8:	f7fc fafe 	bl	80001d8 <__aeabi_uldivmod>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	460b      	mov	r3, r1
 8003be0:	4b61      	ldr	r3, [pc, #388]	@ (8003d68 <UART_SetConfig+0x2d4>)
 8003be2:	fba3 2302 	umull	r2, r3, r3, r2
 8003be6:	095b      	lsrs	r3, r3, #5
 8003be8:	011c      	lsls	r4, r3, #4
 8003bea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003bf4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003bf8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003bfc:	4642      	mov	r2, r8
 8003bfe:	464b      	mov	r3, r9
 8003c00:	1891      	adds	r1, r2, r2
 8003c02:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003c04:	415b      	adcs	r3, r3
 8003c06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c08:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003c0c:	4641      	mov	r1, r8
 8003c0e:	eb12 0a01 	adds.w	sl, r2, r1
 8003c12:	4649      	mov	r1, r9
 8003c14:	eb43 0b01 	adc.w	fp, r3, r1
 8003c18:	f04f 0200 	mov.w	r2, #0
 8003c1c:	f04f 0300 	mov.w	r3, #0
 8003c20:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003c24:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003c28:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c2c:	4692      	mov	sl, r2
 8003c2e:	469b      	mov	fp, r3
 8003c30:	4643      	mov	r3, r8
 8003c32:	eb1a 0303 	adds.w	r3, sl, r3
 8003c36:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003c3a:	464b      	mov	r3, r9
 8003c3c:	eb4b 0303 	adc.w	r3, fp, r3
 8003c40:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003c50:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003c54:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003c58:	460b      	mov	r3, r1
 8003c5a:	18db      	adds	r3, r3, r3
 8003c5c:	643b      	str	r3, [r7, #64]	@ 0x40
 8003c5e:	4613      	mov	r3, r2
 8003c60:	eb42 0303 	adc.w	r3, r2, r3
 8003c64:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c66:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003c6a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003c6e:	f7fc fab3 	bl	80001d8 <__aeabi_uldivmod>
 8003c72:	4602      	mov	r2, r0
 8003c74:	460b      	mov	r3, r1
 8003c76:	4611      	mov	r1, r2
 8003c78:	4b3b      	ldr	r3, [pc, #236]	@ (8003d68 <UART_SetConfig+0x2d4>)
 8003c7a:	fba3 2301 	umull	r2, r3, r3, r1
 8003c7e:	095b      	lsrs	r3, r3, #5
 8003c80:	2264      	movs	r2, #100	@ 0x64
 8003c82:	fb02 f303 	mul.w	r3, r2, r3
 8003c86:	1acb      	subs	r3, r1, r3
 8003c88:	00db      	lsls	r3, r3, #3
 8003c8a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003c8e:	4b36      	ldr	r3, [pc, #216]	@ (8003d68 <UART_SetConfig+0x2d4>)
 8003c90:	fba3 2302 	umull	r2, r3, r3, r2
 8003c94:	095b      	lsrs	r3, r3, #5
 8003c96:	005b      	lsls	r3, r3, #1
 8003c98:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003c9c:	441c      	add	r4, r3
 8003c9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003ca8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003cac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003cb0:	4642      	mov	r2, r8
 8003cb2:	464b      	mov	r3, r9
 8003cb4:	1891      	adds	r1, r2, r2
 8003cb6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003cb8:	415b      	adcs	r3, r3
 8003cba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003cbc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003cc0:	4641      	mov	r1, r8
 8003cc2:	1851      	adds	r1, r2, r1
 8003cc4:	6339      	str	r1, [r7, #48]	@ 0x30
 8003cc6:	4649      	mov	r1, r9
 8003cc8:	414b      	adcs	r3, r1
 8003cca:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ccc:	f04f 0200 	mov.w	r2, #0
 8003cd0:	f04f 0300 	mov.w	r3, #0
 8003cd4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003cd8:	4659      	mov	r1, fp
 8003cda:	00cb      	lsls	r3, r1, #3
 8003cdc:	4651      	mov	r1, sl
 8003cde:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ce2:	4651      	mov	r1, sl
 8003ce4:	00ca      	lsls	r2, r1, #3
 8003ce6:	4610      	mov	r0, r2
 8003ce8:	4619      	mov	r1, r3
 8003cea:	4603      	mov	r3, r0
 8003cec:	4642      	mov	r2, r8
 8003cee:	189b      	adds	r3, r3, r2
 8003cf0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003cf4:	464b      	mov	r3, r9
 8003cf6:	460a      	mov	r2, r1
 8003cf8:	eb42 0303 	adc.w	r3, r2, r3
 8003cfc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003d00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003d0c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003d10:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003d14:	460b      	mov	r3, r1
 8003d16:	18db      	adds	r3, r3, r3
 8003d18:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d1a:	4613      	mov	r3, r2
 8003d1c:	eb42 0303 	adc.w	r3, r2, r3
 8003d20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d22:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003d26:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003d2a:	f7fc fa55 	bl	80001d8 <__aeabi_uldivmod>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	460b      	mov	r3, r1
 8003d32:	4b0d      	ldr	r3, [pc, #52]	@ (8003d68 <UART_SetConfig+0x2d4>)
 8003d34:	fba3 1302 	umull	r1, r3, r3, r2
 8003d38:	095b      	lsrs	r3, r3, #5
 8003d3a:	2164      	movs	r1, #100	@ 0x64
 8003d3c:	fb01 f303 	mul.w	r3, r1, r3
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	00db      	lsls	r3, r3, #3
 8003d44:	3332      	adds	r3, #50	@ 0x32
 8003d46:	4a08      	ldr	r2, [pc, #32]	@ (8003d68 <UART_SetConfig+0x2d4>)
 8003d48:	fba2 2303 	umull	r2, r3, r2, r3
 8003d4c:	095b      	lsrs	r3, r3, #5
 8003d4e:	f003 0207 	and.w	r2, r3, #7
 8003d52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4422      	add	r2, r4
 8003d5a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003d5c:	e106      	b.n	8003f6c <UART_SetConfig+0x4d8>
 8003d5e:	bf00      	nop
 8003d60:	40011000 	.word	0x40011000
 8003d64:	40011400 	.word	0x40011400
 8003d68:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d70:	2200      	movs	r2, #0
 8003d72:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003d76:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003d7a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003d7e:	4642      	mov	r2, r8
 8003d80:	464b      	mov	r3, r9
 8003d82:	1891      	adds	r1, r2, r2
 8003d84:	6239      	str	r1, [r7, #32]
 8003d86:	415b      	adcs	r3, r3
 8003d88:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d8a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003d8e:	4641      	mov	r1, r8
 8003d90:	1854      	adds	r4, r2, r1
 8003d92:	4649      	mov	r1, r9
 8003d94:	eb43 0501 	adc.w	r5, r3, r1
 8003d98:	f04f 0200 	mov.w	r2, #0
 8003d9c:	f04f 0300 	mov.w	r3, #0
 8003da0:	00eb      	lsls	r3, r5, #3
 8003da2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003da6:	00e2      	lsls	r2, r4, #3
 8003da8:	4614      	mov	r4, r2
 8003daa:	461d      	mov	r5, r3
 8003dac:	4643      	mov	r3, r8
 8003dae:	18e3      	adds	r3, r4, r3
 8003db0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003db4:	464b      	mov	r3, r9
 8003db6:	eb45 0303 	adc.w	r3, r5, r3
 8003dba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003dbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003dca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003dce:	f04f 0200 	mov.w	r2, #0
 8003dd2:	f04f 0300 	mov.w	r3, #0
 8003dd6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003dda:	4629      	mov	r1, r5
 8003ddc:	008b      	lsls	r3, r1, #2
 8003dde:	4621      	mov	r1, r4
 8003de0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003de4:	4621      	mov	r1, r4
 8003de6:	008a      	lsls	r2, r1, #2
 8003de8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003dec:	f7fc f9f4 	bl	80001d8 <__aeabi_uldivmod>
 8003df0:	4602      	mov	r2, r0
 8003df2:	460b      	mov	r3, r1
 8003df4:	4b60      	ldr	r3, [pc, #384]	@ (8003f78 <UART_SetConfig+0x4e4>)
 8003df6:	fba3 2302 	umull	r2, r3, r3, r2
 8003dfa:	095b      	lsrs	r3, r3, #5
 8003dfc:	011c      	lsls	r4, r3, #4
 8003dfe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e02:	2200      	movs	r2, #0
 8003e04:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003e08:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003e0c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003e10:	4642      	mov	r2, r8
 8003e12:	464b      	mov	r3, r9
 8003e14:	1891      	adds	r1, r2, r2
 8003e16:	61b9      	str	r1, [r7, #24]
 8003e18:	415b      	adcs	r3, r3
 8003e1a:	61fb      	str	r3, [r7, #28]
 8003e1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e20:	4641      	mov	r1, r8
 8003e22:	1851      	adds	r1, r2, r1
 8003e24:	6139      	str	r1, [r7, #16]
 8003e26:	4649      	mov	r1, r9
 8003e28:	414b      	adcs	r3, r1
 8003e2a:	617b      	str	r3, [r7, #20]
 8003e2c:	f04f 0200 	mov.w	r2, #0
 8003e30:	f04f 0300 	mov.w	r3, #0
 8003e34:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e38:	4659      	mov	r1, fp
 8003e3a:	00cb      	lsls	r3, r1, #3
 8003e3c:	4651      	mov	r1, sl
 8003e3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e42:	4651      	mov	r1, sl
 8003e44:	00ca      	lsls	r2, r1, #3
 8003e46:	4610      	mov	r0, r2
 8003e48:	4619      	mov	r1, r3
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	4642      	mov	r2, r8
 8003e4e:	189b      	adds	r3, r3, r2
 8003e50:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003e54:	464b      	mov	r3, r9
 8003e56:	460a      	mov	r2, r1
 8003e58:	eb42 0303 	adc.w	r3, r2, r3
 8003e5c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003e6a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003e6c:	f04f 0200 	mov.w	r2, #0
 8003e70:	f04f 0300 	mov.w	r3, #0
 8003e74:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003e78:	4649      	mov	r1, r9
 8003e7a:	008b      	lsls	r3, r1, #2
 8003e7c:	4641      	mov	r1, r8
 8003e7e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e82:	4641      	mov	r1, r8
 8003e84:	008a      	lsls	r2, r1, #2
 8003e86:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003e8a:	f7fc f9a5 	bl	80001d8 <__aeabi_uldivmod>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	460b      	mov	r3, r1
 8003e92:	4611      	mov	r1, r2
 8003e94:	4b38      	ldr	r3, [pc, #224]	@ (8003f78 <UART_SetConfig+0x4e4>)
 8003e96:	fba3 2301 	umull	r2, r3, r3, r1
 8003e9a:	095b      	lsrs	r3, r3, #5
 8003e9c:	2264      	movs	r2, #100	@ 0x64
 8003e9e:	fb02 f303 	mul.w	r3, r2, r3
 8003ea2:	1acb      	subs	r3, r1, r3
 8003ea4:	011b      	lsls	r3, r3, #4
 8003ea6:	3332      	adds	r3, #50	@ 0x32
 8003ea8:	4a33      	ldr	r2, [pc, #204]	@ (8003f78 <UART_SetConfig+0x4e4>)
 8003eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8003eae:	095b      	lsrs	r3, r3, #5
 8003eb0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003eb4:	441c      	add	r4, r3
 8003eb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003eba:	2200      	movs	r2, #0
 8003ebc:	673b      	str	r3, [r7, #112]	@ 0x70
 8003ebe:	677a      	str	r2, [r7, #116]	@ 0x74
 8003ec0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003ec4:	4642      	mov	r2, r8
 8003ec6:	464b      	mov	r3, r9
 8003ec8:	1891      	adds	r1, r2, r2
 8003eca:	60b9      	str	r1, [r7, #8]
 8003ecc:	415b      	adcs	r3, r3
 8003ece:	60fb      	str	r3, [r7, #12]
 8003ed0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ed4:	4641      	mov	r1, r8
 8003ed6:	1851      	adds	r1, r2, r1
 8003ed8:	6039      	str	r1, [r7, #0]
 8003eda:	4649      	mov	r1, r9
 8003edc:	414b      	adcs	r3, r1
 8003ede:	607b      	str	r3, [r7, #4]
 8003ee0:	f04f 0200 	mov.w	r2, #0
 8003ee4:	f04f 0300 	mov.w	r3, #0
 8003ee8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003eec:	4659      	mov	r1, fp
 8003eee:	00cb      	lsls	r3, r1, #3
 8003ef0:	4651      	mov	r1, sl
 8003ef2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ef6:	4651      	mov	r1, sl
 8003ef8:	00ca      	lsls	r2, r1, #3
 8003efa:	4610      	mov	r0, r2
 8003efc:	4619      	mov	r1, r3
 8003efe:	4603      	mov	r3, r0
 8003f00:	4642      	mov	r2, r8
 8003f02:	189b      	adds	r3, r3, r2
 8003f04:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003f06:	464b      	mov	r3, r9
 8003f08:	460a      	mov	r2, r1
 8003f0a:	eb42 0303 	adc.w	r3, r2, r3
 8003f0e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	2200      	movs	r2, #0
 8003f18:	663b      	str	r3, [r7, #96]	@ 0x60
 8003f1a:	667a      	str	r2, [r7, #100]	@ 0x64
 8003f1c:	f04f 0200 	mov.w	r2, #0
 8003f20:	f04f 0300 	mov.w	r3, #0
 8003f24:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003f28:	4649      	mov	r1, r9
 8003f2a:	008b      	lsls	r3, r1, #2
 8003f2c:	4641      	mov	r1, r8
 8003f2e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f32:	4641      	mov	r1, r8
 8003f34:	008a      	lsls	r2, r1, #2
 8003f36:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003f3a:	f7fc f94d 	bl	80001d8 <__aeabi_uldivmod>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	460b      	mov	r3, r1
 8003f42:	4b0d      	ldr	r3, [pc, #52]	@ (8003f78 <UART_SetConfig+0x4e4>)
 8003f44:	fba3 1302 	umull	r1, r3, r3, r2
 8003f48:	095b      	lsrs	r3, r3, #5
 8003f4a:	2164      	movs	r1, #100	@ 0x64
 8003f4c:	fb01 f303 	mul.w	r3, r1, r3
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	011b      	lsls	r3, r3, #4
 8003f54:	3332      	adds	r3, #50	@ 0x32
 8003f56:	4a08      	ldr	r2, [pc, #32]	@ (8003f78 <UART_SetConfig+0x4e4>)
 8003f58:	fba2 2303 	umull	r2, r3, r2, r3
 8003f5c:	095b      	lsrs	r3, r3, #5
 8003f5e:	f003 020f 	and.w	r2, r3, #15
 8003f62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4422      	add	r2, r4
 8003f6a:	609a      	str	r2, [r3, #8]
}
 8003f6c:	bf00      	nop
 8003f6e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003f72:	46bd      	mov	sp, r7
 8003f74:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f78:	51eb851f 	.word	0x51eb851f

08003f7c <memset>:
 8003f7c:	4402      	add	r2, r0
 8003f7e:	4603      	mov	r3, r0
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d100      	bne.n	8003f86 <memset+0xa>
 8003f84:	4770      	bx	lr
 8003f86:	f803 1b01 	strb.w	r1, [r3], #1
 8003f8a:	e7f9      	b.n	8003f80 <memset+0x4>

08003f8c <__libc_init_array>:
 8003f8c:	b570      	push	{r4, r5, r6, lr}
 8003f8e:	4d0d      	ldr	r5, [pc, #52]	@ (8003fc4 <__libc_init_array+0x38>)
 8003f90:	4c0d      	ldr	r4, [pc, #52]	@ (8003fc8 <__libc_init_array+0x3c>)
 8003f92:	1b64      	subs	r4, r4, r5
 8003f94:	10a4      	asrs	r4, r4, #2
 8003f96:	2600      	movs	r6, #0
 8003f98:	42a6      	cmp	r6, r4
 8003f9a:	d109      	bne.n	8003fb0 <__libc_init_array+0x24>
 8003f9c:	4d0b      	ldr	r5, [pc, #44]	@ (8003fcc <__libc_init_array+0x40>)
 8003f9e:	4c0c      	ldr	r4, [pc, #48]	@ (8003fd0 <__libc_init_array+0x44>)
 8003fa0:	f000 f818 	bl	8003fd4 <_init>
 8003fa4:	1b64      	subs	r4, r4, r5
 8003fa6:	10a4      	asrs	r4, r4, #2
 8003fa8:	2600      	movs	r6, #0
 8003faa:	42a6      	cmp	r6, r4
 8003fac:	d105      	bne.n	8003fba <__libc_init_array+0x2e>
 8003fae:	bd70      	pop	{r4, r5, r6, pc}
 8003fb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fb4:	4798      	blx	r3
 8003fb6:	3601      	adds	r6, #1
 8003fb8:	e7ee      	b.n	8003f98 <__libc_init_array+0xc>
 8003fba:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fbe:	4798      	blx	r3
 8003fc0:	3601      	adds	r6, #1
 8003fc2:	e7f2      	b.n	8003faa <__libc_init_array+0x1e>
 8003fc4:	0800400c 	.word	0x0800400c
 8003fc8:	0800400c 	.word	0x0800400c
 8003fcc:	0800400c 	.word	0x0800400c
 8003fd0:	08004010 	.word	0x08004010

08003fd4 <_init>:
 8003fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fd6:	bf00      	nop
 8003fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fda:	bc08      	pop	{r3}
 8003fdc:	469e      	mov	lr, r3
 8003fde:	4770      	bx	lr

08003fe0 <_fini>:
 8003fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fe2:	bf00      	nop
 8003fe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fe6:	bc08      	pop	{r3}
 8003fe8:	469e      	mov	lr, r3
 8003fea:	4770      	bx	lr
