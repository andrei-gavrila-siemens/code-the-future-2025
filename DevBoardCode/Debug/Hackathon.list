
Hackathon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003560  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080036f8  080036f8  000046f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003708  08003708  00005010  2**0
                  CONTENTS
  4 .ARM          00000008  08003708  08003708  00004708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003710  08003710  00005010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003710  08003710  00004710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003714  08003714  00004714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08003718  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a4  20000010  08003728  00005010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001b4  08003728  000051b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a27a  00000000  00000000  00005040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b04  00000000  00000000  0000f2ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a50  00000000  00000000  00010dc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007f5  00000000  00000000  00011810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000162eb  00000000  00000000  00012005  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ce5f  00000000  00000000  000282f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bf94  00000000  00000000  0003514f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c10e3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a4c  00000000  00000000  000c1128  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000c3b74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000010 	.word	0x20000010
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080036e0 	.word	0x080036e0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000014 	.word	0x20000014
 80001d4:	080036e0 	.word	0x080036e0

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <set_pwm_us>:
 #include "Braccio.h"

static void set_pwm_us(TIM_HandleTypeDef* htim, uint32_t channel, uint16_t us) {
 80004c8:	b480      	push	{r7}
 80004ca:	b085      	sub	sp, #20
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	60f8      	str	r0, [r7, #12]
 80004d0:	60b9      	str	r1, [r7, #8]
 80004d2:	4613      	mov	r3, r2
 80004d4:	80fb      	strh	r3, [r7, #6]
    if (us < 500) us = 500;
 80004d6:	88fb      	ldrh	r3, [r7, #6]
 80004d8:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80004dc:	d202      	bcs.n	80004e4 <set_pwm_us+0x1c>
 80004de:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80004e2:	80fb      	strh	r3, [r7, #6]
    if (us > 2500) us = 2500;
 80004e4:	88fb      	ldrh	r3, [r7, #6]
 80004e6:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 80004ea:	4293      	cmp	r3, r2
 80004ec:	d902      	bls.n	80004f4 <set_pwm_us+0x2c>
 80004ee:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80004f2:	80fb      	strh	r3, [r7, #6]

    __HAL_TIM_SET_COMPARE(htim, channel, us);
 80004f4:	68bb      	ldr	r3, [r7, #8]
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d104      	bne.n	8000504 <set_pwm_us+0x3c>
 80004fa:	68fb      	ldr	r3, [r7, #12]
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	88fa      	ldrh	r2, [r7, #6]
 8000500:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000502:	e013      	b.n	800052c <set_pwm_us+0x64>
    __HAL_TIM_SET_COMPARE(htim, channel, us);
 8000504:	68bb      	ldr	r3, [r7, #8]
 8000506:	2b04      	cmp	r3, #4
 8000508:	d104      	bne.n	8000514 <set_pwm_us+0x4c>
 800050a:	68fb      	ldr	r3, [r7, #12]
 800050c:	681a      	ldr	r2, [r3, #0]
 800050e:	88fb      	ldrh	r3, [r7, #6]
 8000510:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000512:	e00b      	b.n	800052c <set_pwm_us+0x64>
    __HAL_TIM_SET_COMPARE(htim, channel, us);
 8000514:	68bb      	ldr	r3, [r7, #8]
 8000516:	2b08      	cmp	r3, #8
 8000518:	d104      	bne.n	8000524 <set_pwm_us+0x5c>
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	681a      	ldr	r2, [r3, #0]
 800051e:	88fb      	ldrh	r3, [r7, #6]
 8000520:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8000522:	e003      	b.n	800052c <set_pwm_us+0x64>
    __HAL_TIM_SET_COMPARE(htim, channel, us);
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	681a      	ldr	r2, [r3, #0]
 8000528:	88fb      	ldrh	r3, [r7, #6]
 800052a:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800052c:	bf00      	nop
 800052e:	3714      	adds	r7, #20
 8000530:	46bd      	mov	sp, r7
 8000532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000536:	4770      	bx	lr

08000538 <Braccio_Init>:

void Braccio_Init(Braccio* arm)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
    HAL_TIM_PWM_Start(arm->timBase	  , TIM_CHANNEL_2);     // PA7
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	2104      	movs	r1, #4
 8000546:	4618      	mov	r0, r3
 8000548:	f002 fa20 	bl	800298c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(arm->timShoulder, TIM_CHANNEL_1); 	// PB6
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	685b      	ldr	r3, [r3, #4]
 8000550:	2100      	movs	r1, #0
 8000552:	4618      	mov	r0, r3
 8000554:	f002 fa1a 	bl	800298c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(arm->timElbow	  , TIM_CHANNEL_1);     // PA8
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	689b      	ldr	r3, [r3, #8]
 800055c:	2100      	movs	r1, #0
 800055e:	4618      	mov	r0, r3
 8000560:	f002 fa14 	bl	800298c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(arm->timWristV  , TIM_CHANNEL_3);     // PB10
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	68db      	ldr	r3, [r3, #12]
 8000568:	2108      	movs	r1, #8
 800056a:	4618      	mov	r0, r3
 800056c:	f002 fa0e 	bl	800298c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(arm->timWristR  , TIM_CHANNEL_1);     // PB4
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	691b      	ldr	r3, [r3, #16]
 8000574:	2100      	movs	r1, #0
 8000576:	4618      	mov	r0, r3
 8000578:	f002 fa08 	bl	800298c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(arm->timGripper , TIM_CHANNEL_2);     // PB3
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	695b      	ldr	r3, [r3, #20]
 8000580:	2104      	movs	r1, #4
 8000582:	4618      	mov	r0, r3
 8000584:	f002 fa02 	bl	800298c <HAL_TIM_PWM_Start>
}
 8000588:	bf00      	nop
 800058a:	3708      	adds	r7, #8
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}

08000590 <Braccio_Move>:

void Braccio_Move(Braccio* arm, int base, int shoulder, int elbow, int wristV, int wristR, int gripper)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b084      	sub	sp, #16
 8000594:	af00      	add	r7, sp, #0
 8000596:	60f8      	str	r0, [r7, #12]
 8000598:	60b9      	str	r1, [r7, #8]
 800059a:	607a      	str	r2, [r7, #4]
 800059c:	603b      	str	r3, [r7, #0]
    set_pwm_us(arm->timBase		, TIM_CHANNEL_2,     base);
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	68ba      	ldr	r2, [r7, #8]
 80005a4:	b292      	uxth	r2, r2
 80005a6:	2104      	movs	r1, #4
 80005a8:	4618      	mov	r0, r3
 80005aa:	f7ff ff8d 	bl	80004c8 <set_pwm_us>
    HAL_Delay(10);
 80005ae:	200a      	movs	r0, #10
 80005b0:	f001 f8b8 	bl	8001724 <HAL_Delay>
    set_pwm_us(arm->timShoulder , TIM_CHANNEL_1, shoulder);
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	685b      	ldr	r3, [r3, #4]
 80005b8:	687a      	ldr	r2, [r7, #4]
 80005ba:	b292      	uxth	r2, r2
 80005bc:	2100      	movs	r1, #0
 80005be:	4618      	mov	r0, r3
 80005c0:	f7ff ff82 	bl	80004c8 <set_pwm_us>
    HAL_Delay(10);
 80005c4:	200a      	movs	r0, #10
 80005c6:	f001 f8ad 	bl	8001724 <HAL_Delay>
    set_pwm_us(arm->timElbow	, TIM_CHANNEL_1,    elbow);
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	689b      	ldr	r3, [r3, #8]
 80005ce:	683a      	ldr	r2, [r7, #0]
 80005d0:	b292      	uxth	r2, r2
 80005d2:	2100      	movs	r1, #0
 80005d4:	4618      	mov	r0, r3
 80005d6:	f7ff ff77 	bl	80004c8 <set_pwm_us>
    HAL_Delay(10);
 80005da:	200a      	movs	r0, #10
 80005dc:	f001 f8a2 	bl	8001724 <HAL_Delay>
    set_pwm_us(arm->timWristV	, TIM_CHANNEL_3,   wristV);
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	68db      	ldr	r3, [r3, #12]
 80005e4:	69ba      	ldr	r2, [r7, #24]
 80005e6:	b292      	uxth	r2, r2
 80005e8:	2108      	movs	r1, #8
 80005ea:	4618      	mov	r0, r3
 80005ec:	f7ff ff6c 	bl	80004c8 <set_pwm_us>
    HAL_Delay(10);
 80005f0:	200a      	movs	r0, #10
 80005f2:	f001 f897 	bl	8001724 <HAL_Delay>
    set_pwm_us(arm->timWristR	, TIM_CHANNEL_1,   wristR);
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	691b      	ldr	r3, [r3, #16]
 80005fa:	69fa      	ldr	r2, [r7, #28]
 80005fc:	b292      	uxth	r2, r2
 80005fe:	2100      	movs	r1, #0
 8000600:	4618      	mov	r0, r3
 8000602:	f7ff ff61 	bl	80004c8 <set_pwm_us>
    HAL_Delay(10);
 8000606:	200a      	movs	r0, #10
 8000608:	f001 f88c 	bl	8001724 <HAL_Delay>
    set_pwm_us(arm->timGripper	, TIM_CHANNEL_2,  gripper);
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	695b      	ldr	r3, [r3, #20]
 8000610:	6a3a      	ldr	r2, [r7, #32]
 8000612:	b292      	uxth	r2, r2
 8000614:	2104      	movs	r1, #4
 8000616:	4618      	mov	r0, r3
 8000618:	f7ff ff56 	bl	80004c8 <set_pwm_us>
    HAL_Delay(10);
 800061c:	200a      	movs	r0, #10
 800061e:	f001 f881 	bl	8001724 <HAL_Delay>
}
 8000622:	bf00      	nop
 8000624:	3710      	adds	r7, #16
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}

0800062a <Braccio_RotateAndLiftGripperOpen>:
        Braccio_Move(arm, baseValue, shoulderValue, elbowValue, wristVerValue, gripper, wristRotValue);
        HAL_Delay(stepDelay);
    }
}

void Braccio_RotateAndLiftGripperOpen(Braccio* arm, int rot_start, int rot_end, int wristVer_start, int wristVer_end) {
 800062a:	b580      	push	{r7, lr}
 800062c:	b094      	sub	sp, #80	@ 0x50
 800062e:	af04      	add	r7, sp, #16
 8000630:	60f8      	str	r0, [r7, #12]
 8000632:	60b9      	str	r1, [r7, #8]
 8000634:	607a      	str	r2, [r7, #4]
 8000636:	603b      	str	r3, [r7, #0]
    int shoulderValue = 1500;
 8000638:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800063c:	63bb      	str	r3, [r7, #56]	@ 0x38
    int elbowValue = 1500;
 800063e:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000642:	637b      	str	r3, [r7, #52]	@ 0x34
    int wristRotValue = 1500;
 8000644:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000648:	633b      	str	r3, [r7, #48]	@ 0x30


    int gripperValue = 166;
 800064a:	23a6      	movs	r3, #166	@ 0xa6
 800064c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    int steps = 50;
 800064e:	2332      	movs	r3, #50	@ 0x32
 8000650:	62bb      	str	r3, [r7, #40]	@ 0x28
    int delayMs = 2;
 8000652:	2302      	movs	r3, #2
 8000654:	627b      	str	r3, [r7, #36]	@ 0x24

    float baseStep = (float)(rot_end - rot_start) / steps;
 8000656:	687a      	ldr	r2, [r7, #4]
 8000658:	68bb      	ldr	r3, [r7, #8]
 800065a:	1ad3      	subs	r3, r2, r3
 800065c:	ee07 3a90 	vmov	s15, r3
 8000660:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000664:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000666:	ee07 3a90 	vmov	s15, r3
 800066a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800066e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000672:	edc7 7a08 	vstr	s15, [r7, #32]
    float wristVerStep = (float)(wristVer_end - wristVer_start) / steps;
 8000676:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8000678:	683b      	ldr	r3, [r7, #0]
 800067a:	1ad3      	subs	r3, r2, r3
 800067c:	ee07 3a90 	vmov	s15, r3
 8000680:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000684:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000686:	ee07 3a90 	vmov	s15, r3
 800068a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800068e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000692:	edc7 7a07 	vstr	s15, [r7, #28]

    for (int i = 0; i <= steps; i++) {
 8000696:	2300      	movs	r3, #0
 8000698:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800069a:	e032      	b.n	8000702 <Braccio_RotateAndLiftGripperOpen+0xd8>
        int currentBase = rot_start + (int)(i * baseStep);
 800069c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800069e:	ee07 3a90 	vmov	s15, r3
 80006a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006a6:	edd7 7a08 	vldr	s15, [r7, #32]
 80006aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80006b2:	ee17 2a90 	vmov	r2, s15
 80006b6:	68bb      	ldr	r3, [r7, #8]
 80006b8:	4413      	add	r3, r2
 80006ba:	61bb      	str	r3, [r7, #24]
        int currentWristVer = wristVer_start + (int)(i * wristVerStep);
 80006bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80006be:	ee07 3a90 	vmov	s15, r3
 80006c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006c6:	edd7 7a07 	vldr	s15, [r7, #28]
 80006ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80006d2:	ee17 2a90 	vmov	r2, s15
 80006d6:	683b      	ldr	r3, [r7, #0]
 80006d8:	4413      	add	r3, r2
 80006da:	617b      	str	r3, [r7, #20]
        Braccio_Move(arm, currentBase, shoulderValue, elbowValue, currentWristVer, wristRotValue, gripperValue);
 80006dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80006de:	9302      	str	r3, [sp, #8]
 80006e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80006e2:	9301      	str	r3, [sp, #4]
 80006e4:	697b      	ldr	r3, [r7, #20]
 80006e6:	9300      	str	r3, [sp, #0]
 80006e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80006ea:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80006ec:	69b9      	ldr	r1, [r7, #24]
 80006ee:	68f8      	ldr	r0, [r7, #12]
 80006f0:	f7ff ff4e 	bl	8000590 <Braccio_Move>
        HAL_Delay(delayMs);
 80006f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006f6:	4618      	mov	r0, r3
 80006f8:	f001 f814 	bl	8001724 <HAL_Delay>
    for (int i = 0; i <= steps; i++) {
 80006fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80006fe:	3301      	adds	r3, #1
 8000700:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000702:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000706:	429a      	cmp	r2, r3
 8000708:	ddc8      	ble.n	800069c <Braccio_RotateAndLiftGripperOpen+0x72>
    }
}
 800070a:	bf00      	nop
 800070c:	bf00      	nop
 800070e:	3740      	adds	r7, #64	@ 0x40
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}

08000714 <Braccio_RotateAndLiftGripperClosed>:
void Braccio_RotateAndLiftGripperClosed(Braccio* arm, int rot_start, int rot_end, int wristVer_start, int wristVer_end) {
 8000714:	b580      	push	{r7, lr}
 8000716:	b094      	sub	sp, #80	@ 0x50
 8000718:	af04      	add	r7, sp, #16
 800071a:	60f8      	str	r0, [r7, #12]
 800071c:	60b9      	str	r1, [r7, #8]
 800071e:	607a      	str	r2, [r7, #4]
 8000720:	603b      	str	r3, [r7, #0]
    int shoulderValue = 1500;
 8000722:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000726:	63bb      	str	r3, [r7, #56]	@ 0x38
    int elbowValue = 1500;
 8000728:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800072c:	637b      	str	r3, [r7, #52]	@ 0x34
    int wristRotValue = 1500;
 800072e:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000732:	633b      	str	r3, [r7, #48]	@ 0x30


    int gripperValue = 2200;
 8000734:	f640 0398 	movw	r3, #2200	@ 0x898
 8000738:	62fb      	str	r3, [r7, #44]	@ 0x2c

    int steps = 50;
 800073a:	2332      	movs	r3, #50	@ 0x32
 800073c:	62bb      	str	r3, [r7, #40]	@ 0x28
    int delayMs = 2;
 800073e:	2302      	movs	r3, #2
 8000740:	627b      	str	r3, [r7, #36]	@ 0x24

    float baseStep = (float)(rot_end - rot_start) / steps;
 8000742:	687a      	ldr	r2, [r7, #4]
 8000744:	68bb      	ldr	r3, [r7, #8]
 8000746:	1ad3      	subs	r3, r2, r3
 8000748:	ee07 3a90 	vmov	s15, r3
 800074c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000750:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000752:	ee07 3a90 	vmov	s15, r3
 8000756:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800075a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800075e:	edc7 7a08 	vstr	s15, [r7, #32]
    float wristVerStep = (float)(wristVer_end - wristVer_start) / steps;
 8000762:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8000764:	683b      	ldr	r3, [r7, #0]
 8000766:	1ad3      	subs	r3, r2, r3
 8000768:	ee07 3a90 	vmov	s15, r3
 800076c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000770:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000772:	ee07 3a90 	vmov	s15, r3
 8000776:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800077a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800077e:	edc7 7a07 	vstr	s15, [r7, #28]

    for (int i = 0; i <= steps; i++) {
 8000782:	2300      	movs	r3, #0
 8000784:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000786:	e032      	b.n	80007ee <Braccio_RotateAndLiftGripperClosed+0xda>
        int currentBase = rot_start + (int)(i * baseStep);
 8000788:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800078a:	ee07 3a90 	vmov	s15, r3
 800078e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000792:	edd7 7a08 	vldr	s15, [r7, #32]
 8000796:	ee67 7a27 	vmul.f32	s15, s14, s15
 800079a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800079e:	ee17 2a90 	vmov	r2, s15
 80007a2:	68bb      	ldr	r3, [r7, #8]
 80007a4:	4413      	add	r3, r2
 80007a6:	61bb      	str	r3, [r7, #24]
        int currentWristVer = wristVer_start + (int)(i * wristVerStep);
 80007a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80007aa:	ee07 3a90 	vmov	s15, r3
 80007ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80007b2:	edd7 7a07 	vldr	s15, [r7, #28]
 80007b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80007ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80007be:	ee17 2a90 	vmov	r2, s15
 80007c2:	683b      	ldr	r3, [r7, #0]
 80007c4:	4413      	add	r3, r2
 80007c6:	617b      	str	r3, [r7, #20]
        Braccio_Move(arm, currentBase, shoulderValue, elbowValue, currentWristVer, wristRotValue, gripperValue);
 80007c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80007ca:	9302      	str	r3, [sp, #8]
 80007cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80007ce:	9301      	str	r3, [sp, #4]
 80007d0:	697b      	ldr	r3, [r7, #20]
 80007d2:	9300      	str	r3, [sp, #0]
 80007d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80007d6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80007d8:	69b9      	ldr	r1, [r7, #24]
 80007da:	68f8      	ldr	r0, [r7, #12]
 80007dc:	f7ff fed8 	bl	8000590 <Braccio_Move>
        HAL_Delay(delayMs);
 80007e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007e2:	4618      	mov	r0, r3
 80007e4:	f000 ff9e 	bl	8001724 <HAL_Delay>
    for (int i = 0; i <= steps; i++) {
 80007e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80007ea:	3301      	adds	r3, #1
 80007ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80007ee:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80007f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80007f2:	429a      	cmp	r2, r3
 80007f4:	ddc8      	ble.n	8000788 <Braccio_RotateAndLiftGripperClosed+0x74>
    }
}
 80007f6:	bf00      	nop
 80007f8:	bf00      	nop
 80007fa:	3740      	adds	r7, #64	@ 0x40
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}

08000800 <Braccio_MoveGripperSmooth>:
void Braccio_MoveGripperSmooth(Braccio* arm, int base, int shoulder, int elbow, int wristV, int wristR, int gripper_target) {
 8000800:	b580      	push	{r7, lr}
 8000802:	b08e      	sub	sp, #56	@ 0x38
 8000804:	af04      	add	r7, sp, #16
 8000806:	60f8      	str	r0, [r7, #12]
 8000808:	60b9      	str	r1, [r7, #8]
 800080a:	607a      	str	r2, [r7, #4]
 800080c:	603b      	str	r3, [r7, #0]
    int steps = 15;
 800080e:	230f      	movs	r3, #15
 8000810:	623b      	str	r3, [r7, #32]
    int delayMs = 1;
 8000812:	2301      	movs	r3, #1
 8000814:	61fb      	str	r3, [r7, #28]

    static int gripper_current = 1500;

    float gripperStep = (float)(gripper_target - gripper_current) / steps;
 8000816:	4b21      	ldr	r3, [pc, #132]	@ (800089c <Braccio_MoveGripperSmooth+0x9c>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800081c:	1ad3      	subs	r3, r2, r3
 800081e:	ee07 3a90 	vmov	s15, r3
 8000822:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000826:	6a3b      	ldr	r3, [r7, #32]
 8000828:	ee07 3a90 	vmov	s15, r3
 800082c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000830:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000834:	edc7 7a06 	vstr	s15, [r7, #24]

    for (int i = 0; i <= steps; i++) {
 8000838:	2300      	movs	r3, #0
 800083a:	627b      	str	r3, [r7, #36]	@ 0x24
 800083c:	e023      	b.n	8000886 <Braccio_MoveGripperSmooth+0x86>
        int currentGripper = gripper_current + (int)(i * gripperStep);
 800083e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000840:	ee07 3a90 	vmov	s15, r3
 8000844:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000848:	edd7 7a06 	vldr	s15, [r7, #24]
 800084c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000850:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000854:	ee17 2a90 	vmov	r2, s15
 8000858:	4b10      	ldr	r3, [pc, #64]	@ (800089c <Braccio_MoveGripperSmooth+0x9c>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4413      	add	r3, r2
 800085e:	617b      	str	r3, [r7, #20]
        Braccio_Move(arm, base, shoulder, elbow, wristV, wristR, currentGripper);
 8000860:	697b      	ldr	r3, [r7, #20]
 8000862:	9302      	str	r3, [sp, #8]
 8000864:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000866:	9301      	str	r3, [sp, #4]
 8000868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800086a:	9300      	str	r3, [sp, #0]
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	687a      	ldr	r2, [r7, #4]
 8000870:	68b9      	ldr	r1, [r7, #8]
 8000872:	68f8      	ldr	r0, [r7, #12]
 8000874:	f7ff fe8c 	bl	8000590 <Braccio_Move>
        HAL_Delay(delayMs);
 8000878:	69fb      	ldr	r3, [r7, #28]
 800087a:	4618      	mov	r0, r3
 800087c:	f000 ff52 	bl	8001724 <HAL_Delay>
    for (int i = 0; i <= steps; i++) {
 8000880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000882:	3301      	adds	r3, #1
 8000884:	627b      	str	r3, [r7, #36]	@ 0x24
 8000886:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000888:	6a3b      	ldr	r3, [r7, #32]
 800088a:	429a      	cmp	r2, r3
 800088c:	ddd7      	ble.n	800083e <Braccio_MoveGripperSmooth+0x3e>
    }


    gripper_current = gripper_target;
 800088e:	4a03      	ldr	r2, [pc, #12]	@ (800089c <Braccio_MoveGripperSmooth+0x9c>)
 8000890:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000892:	6013      	str	r3, [r2, #0]
}
 8000894:	bf00      	nop
 8000896:	3728      	adds	r7, #40	@ 0x28
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	20000000 	.word	0x20000000

080008a0 <Ultrasonic_ReadDistance>:
#define ULTRASONIC_TIMEOUT_MS    100U         // Timeout for waiting echo (in ms)
#define SPEED_OF_SOUND_CM_PER_US 0.0343f      // Speed of sound in cm/us
#define TRIG_PULSE_DURATION_US   10U          // Trigger pulse duration (10 µs)

uint16_t Ultrasonic_ReadDistance(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
    uint32_t tickStart = 0;
 80008a6:	2300      	movs	r3, #0
 80008a8:	607b      	str	r3, [r7, #4]
    uint32_t echoDuration = 0;
 80008aa:	2300      	movs	r3, #0
 80008ac:	603b      	str	r3, [r7, #0]

    // Ensure trigger is LOW before sending pulse
    HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);
 80008ae:	2200      	movs	r2, #0
 80008b0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80008b4:	4832      	ldr	r0, [pc, #200]	@ (8000980 <Ultrasonic_ReadDistance+0xe0>)
 80008b6:	f001 f9db 	bl	8001c70 <HAL_GPIO_WritePin>
    HAL_Delay(2);
 80008ba:	2002      	movs	r0, #2
 80008bc:	f000 ff32 	bl	8001724 <HAL_Delay>

    // Send 10 µs pulse to trigger pin
    HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);
 80008c0:	2201      	movs	r2, #1
 80008c2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80008c6:	482e      	ldr	r0, [pc, #184]	@ (8000980 <Ultrasonic_ReadDistance+0xe0>)
 80008c8:	f001 f9d2 	bl	8001c70 <HAL_GPIO_WritePin>
    HAL_Delay(1);  // Minimal delay to ensure proper pulse (>10 µs)
 80008cc:	2001      	movs	r0, #1
 80008ce:	f000 ff29 	bl	8001724 <HAL_Delay>
    HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);
 80008d2:	2200      	movs	r2, #0
 80008d4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80008d8:	4829      	ldr	r0, [pc, #164]	@ (8000980 <Ultrasonic_ReadDistance+0xe0>)
 80008da:	f001 f9c9 	bl	8001c70 <HAL_GPIO_WritePin>

    // Wait for ECHO pin to go HIGH
    tickStart = HAL_GetTick();
 80008de:	f000 ff15 	bl	800170c <HAL_GetTick>
 80008e2:	6078      	str	r0, [r7, #4]
    while (HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN) == GPIO_PIN_RESET)
 80008e4:	e008      	b.n	80008f8 <Ultrasonic_ReadDistance+0x58>
    {
        if ((HAL_GetTick() - tickStart) > ULTRASONIC_TIMEOUT_MS)
 80008e6:	f000 ff11 	bl	800170c <HAL_GetTick>
 80008ea:	4602      	mov	r2, r0
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	1ad3      	subs	r3, r2, r3
 80008f0:	2b64      	cmp	r3, #100	@ 0x64
 80008f2:	d901      	bls.n	80008f8 <Ultrasonic_ReadDistance+0x58>
            return 0;  // Timeout: no echo received
 80008f4:	2300      	movs	r3, #0
 80008f6:	e03f      	b.n	8000978 <Ultrasonic_ReadDistance+0xd8>
    while (HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN) == GPIO_PIN_RESET)
 80008f8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80008fc:	4821      	ldr	r0, [pc, #132]	@ (8000984 <Ultrasonic_ReadDistance+0xe4>)
 80008fe:	f001 f99f 	bl	8001c40 <HAL_GPIO_ReadPin>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d0ee      	beq.n	80008e6 <Ultrasonic_ReadDistance+0x46>
    }

    // Start timer to measure echo HIGH duration
    __HAL_TIM_SET_COUNTER(&htim11, 0);
 8000908:	4b1f      	ldr	r3, [pc, #124]	@ (8000988 <Ultrasonic_ReadDistance+0xe8>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	2200      	movs	r2, #0
 800090e:	625a      	str	r2, [r3, #36]	@ 0x24
    HAL_TIM_Base_Start(&htim11);
 8000910:	481d      	ldr	r0, [pc, #116]	@ (8000988 <Ultrasonic_ReadDistance+0xe8>)
 8000912:	f001 ff6b 	bl	80027ec <HAL_TIM_Base_Start>

    // Wait for ECHO pin to go LOW
    tickStart = HAL_GetTick();
 8000916:	f000 fef9 	bl	800170c <HAL_GetTick>
 800091a:	6078      	str	r0, [r7, #4]
    while (HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN) == GPIO_PIN_SET)
 800091c:	e00b      	b.n	8000936 <Ultrasonic_ReadDistance+0x96>
    {
        if ((HAL_GetTick() - tickStart) > ULTRASONIC_TIMEOUT_MS)
 800091e:	f000 fef5 	bl	800170c <HAL_GetTick>
 8000922:	4602      	mov	r2, r0
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	1ad3      	subs	r3, r2, r3
 8000928:	2b64      	cmp	r3, #100	@ 0x64
 800092a:	d904      	bls.n	8000936 <Ultrasonic_ReadDistance+0x96>
        {
            HAL_TIM_Base_Stop(&htim11);
 800092c:	4816      	ldr	r0, [pc, #88]	@ (8000988 <Ultrasonic_ReadDistance+0xe8>)
 800092e:	f001 ffb7 	bl	80028a0 <HAL_TIM_Base_Stop>
            return 0;  // Timeout while waiting for echo to end
 8000932:	2300      	movs	r3, #0
 8000934:	e020      	b.n	8000978 <Ultrasonic_ReadDistance+0xd8>
    while (HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN) == GPIO_PIN_SET)
 8000936:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800093a:	4812      	ldr	r0, [pc, #72]	@ (8000984 <Ultrasonic_ReadDistance+0xe4>)
 800093c:	f001 f980 	bl	8001c40 <HAL_GPIO_ReadPin>
 8000940:	4603      	mov	r3, r0
 8000942:	2b01      	cmp	r3, #1
 8000944:	d0eb      	beq.n	800091e <Ultrasonic_ReadDistance+0x7e>
        }
    }

    // Measure duration and stop timer
    echoDuration = __HAL_TIM_GET_COUNTER(&htim11);
 8000946:	4b10      	ldr	r3, [pc, #64]	@ (8000988 <Ultrasonic_ReadDistance+0xe8>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800094c:	603b      	str	r3, [r7, #0]
    HAL_TIM_Base_Stop(&htim11);
 800094e:	480e      	ldr	r0, [pc, #56]	@ (8000988 <Ultrasonic_ReadDistance+0xe8>)
 8000950:	f001 ffa6 	bl	80028a0 <HAL_TIM_Base_Stop>

    // Calculate distance (in cm): duration * speed of sound / 2
    return (uint16_t)((echoDuration * SPEED_OF_SOUND_CM_PER_US) / 2.0f);
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	ee07 3a90 	vmov	s15, r3
 800095a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800095e:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 800098c <Ultrasonic_ReadDistance+0xec>
 8000962:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000966:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800096a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800096e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000972:	ee17 3a90 	vmov	r3, s15
 8000976:	b29b      	uxth	r3, r3
}
 8000978:	4618      	mov	r0, r3
 800097a:	3708      	adds	r7, #8
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	40020000 	.word	0x40020000
 8000984:	40020400 	.word	0x40020400
 8000988:	2000014c 	.word	0x2000014c
 800098c:	3d0c7e28 	.word	0x3d0c7e28

08000990 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000996:	f000 fe53 	bl	8001640 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800099a:	f000 f907 	bl	8000bac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800099e:	f000 fb85 	bl	80010ac <MX_GPIO_Init>
  MX_TIM2_Init();
 80009a2:	f000 fa17 	bl	8000dd4 <MX_TIM2_Init>
  MX_TIM3_Init();
 80009a6:	f000 fa79 	bl	8000e9c <MX_TIM3_Init>
  MX_TIM4_Init();
 80009aa:	f000 fadd 	bl	8000f68 <MX_TIM4_Init>
  MX_TIM1_Init();
 80009ae:	f000 f969 	bl	8000c84 <MX_TIM1_Init>
  MX_TIM11_Init();
 80009b2:	f000 fb33 	bl	800101c <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */

  /* Initialize the Braccio arm struct with the appropriate TIM handles */
  arm.timBase 	  = &htim3;
 80009b6:	4b76      	ldr	r3, [pc, #472]	@ (8000b90 <main+0x200>)
 80009b8:	4a76      	ldr	r2, [pc, #472]	@ (8000b94 <main+0x204>)
 80009ba:	601a      	str	r2, [r3, #0]
  arm.timShoulder = &htim4;
 80009bc:	4b74      	ldr	r3, [pc, #464]	@ (8000b90 <main+0x200>)
 80009be:	4a76      	ldr	r2, [pc, #472]	@ (8000b98 <main+0x208>)
 80009c0:	605a      	str	r2, [r3, #4]
  arm.timElbow 	  = &htim1;
 80009c2:	4b73      	ldr	r3, [pc, #460]	@ (8000b90 <main+0x200>)
 80009c4:	4a75      	ldr	r2, [pc, #468]	@ (8000b9c <main+0x20c>)
 80009c6:	609a      	str	r2, [r3, #8]
  arm.timWristV   = &htim2;
 80009c8:	4b71      	ldr	r3, [pc, #452]	@ (8000b90 <main+0x200>)
 80009ca:	4a75      	ldr	r2, [pc, #468]	@ (8000ba0 <main+0x210>)
 80009cc:	60da      	str	r2, [r3, #12]
  arm.timWristR   = &htim3;
 80009ce:	4b70      	ldr	r3, [pc, #448]	@ (8000b90 <main+0x200>)
 80009d0:	4a70      	ldr	r2, [pc, #448]	@ (8000b94 <main+0x204>)
 80009d2:	611a      	str	r2, [r3, #16]
  arm.timGripper  = &htim2;
 80009d4:	4b6e      	ldr	r3, [pc, #440]	@ (8000b90 <main+0x200>)
 80009d6:	4a72      	ldr	r2, [pc, #456]	@ (8000ba0 <main+0x210>)
 80009d8:	615a      	str	r2, [r3, #20]

  /* Initialize Braccio servos (start PWM) */
  Braccio_Init(&arm);
 80009da:	486d      	ldr	r0, [pc, #436]	@ (8000b90 <main+0x200>)
 80009dc:	f7ff fdac 	bl	8000538 <Braccio_Init>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 80009e0:	2201      	movs	r2, #1
 80009e2:	2140      	movs	r1, #64	@ 0x40
 80009e4:	486f      	ldr	r0, [pc, #444]	@ (8000ba4 <main+0x214>)
 80009e6:	f001 f943 	bl	8001c70 <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
   {

	  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == GPIO_PIN_SET) // PA2 = 0 -> sistem activ
 80009ea:	2108      	movs	r1, #8
 80009ec:	486d      	ldr	r0, [pc, #436]	@ (8000ba4 <main+0x214>)
 80009ee:	f001 f927 	bl	8001c40 <HAL_GPIO_ReadPin>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b01      	cmp	r3, #1
 80009f6:	d1f8      	bne.n	80009ea <main+0x5a>
	  {
		  	  dist = Ultrasonic_ReadDistance();
 80009f8:	f7ff ff52 	bl	80008a0 <Ultrasonic_ReadDistance>
 80009fc:	4603      	mov	r3, r0
 80009fe:	461a      	mov	r2, r3
 8000a00:	4b69      	ldr	r3, [pc, #420]	@ (8000ba8 <main+0x218>)
 8000a02:	801a      	strh	r2, [r3, #0]

	  	  	  HAL_Delay(1000);
 8000a04:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a08:	f000 fe8c 	bl	8001724 <HAL_Delay>
	   		  Braccio_MoveGripperSmooth(&arm, 1500, 1500, 1500, 1500, 1500, 166);
 8000a0c:	23a6      	movs	r3, #166	@ 0xa6
 8000a0e:	9302      	str	r3, [sp, #8]
 8000a10:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000a14:	9301      	str	r3, [sp, #4]
 8000a16:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000a1a:	9300      	str	r3, [sp, #0]
 8000a1c:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000a20:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000a24:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 8000a28:	4859      	ldr	r0, [pc, #356]	@ (8000b90 <main+0x200>)
 8000a2a:	f7ff fee9 	bl	8000800 <Braccio_MoveGripperSmooth>

	   	  	  HAL_Delay(1000);
 8000a2e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a32:	f000 fe77 	bl	8001724 <HAL_Delay>
	   	  	  Braccio_RotateAndLiftGripperOpen(&arm, 1500, 1050, 1500, 1900);
 8000a36:	f240 736c 	movw	r3, #1900	@ 0x76c
 8000a3a:	9300      	str	r3, [sp, #0]
 8000a3c:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000a40:	f240 421a 	movw	r2, #1050	@ 0x41a
 8000a44:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 8000a48:	4851      	ldr	r0, [pc, #324]	@ (8000b90 <main+0x200>)
 8000a4a:	f7ff fdee 	bl	800062a <Braccio_RotateAndLiftGripperOpen>
	   	  	  HAL_Delay(1000);
 8000a4e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a52:	f000 fe67 	bl	8001724 <HAL_Delay>

	   	  	Braccio_RotateAndLiftGripperOpen(&arm, 1050, 1050, 1900, 1000);
 8000a56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a5a:	9300      	str	r3, [sp, #0]
 8000a5c:	f240 736c 	movw	r3, #1900	@ 0x76c
 8000a60:	f240 421a 	movw	r2, #1050	@ 0x41a
 8000a64:	f240 411a 	movw	r1, #1050	@ 0x41a
 8000a68:	4849      	ldr	r0, [pc, #292]	@ (8000b90 <main+0x200>)
 8000a6a:	f7ff fdde 	bl	800062a <Braccio_RotateAndLiftGripperOpen>
	   		  HAL_Delay(1000);
 8000a6e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a72:	f000 fe57 	bl	8001724 <HAL_Delay>
	   		  Braccio_MoveGripperSmooth(&arm, 1050, 1500, 1500, 1000, 1500, 2300);
 8000a76:	f640 03fc 	movw	r3, #2300	@ 0x8fc
 8000a7a:	9302      	str	r3, [sp, #8]
 8000a7c:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000a80:	9301      	str	r3, [sp, #4]
 8000a82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a86:	9300      	str	r3, [sp, #0]
 8000a88:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000a8c:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000a90:	f240 411a 	movw	r1, #1050	@ 0x41a
 8000a94:	483e      	ldr	r0, [pc, #248]	@ (8000b90 <main+0x200>)
 8000a96:	f7ff feb3 	bl	8000800 <Braccio_MoveGripperSmooth>
	   		  HAL_Delay(1000);
 8000a9a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a9e:	f000 fe41 	bl	8001724 <HAL_Delay>
	   		  Braccio_RotateAndLiftGripperClosed(&arm, 1050, 2150, 1000, 2300);
 8000aa2:	f640 03fc 	movw	r3, #2300	@ 0x8fc
 8000aa6:	9300      	str	r3, [sp, #0]
 8000aa8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000aac:	f640 0266 	movw	r2, #2150	@ 0x866
 8000ab0:	f240 411a 	movw	r1, #1050	@ 0x41a
 8000ab4:	4836      	ldr	r0, [pc, #216]	@ (8000b90 <main+0x200>)
 8000ab6:	f7ff fe2d 	bl	8000714 <Braccio_RotateAndLiftGripperClosed>
	   		  HAL_Delay(1000);
 8000aba:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000abe:	f000 fe31 	bl	8001724 <HAL_Delay>
	   		  Braccio_RotateAndLiftGripperClosed(&arm, 2150, 1900, 2300, 1000);
 8000ac2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ac6:	9300      	str	r3, [sp, #0]
 8000ac8:	f640 03fc 	movw	r3, #2300	@ 0x8fc
 8000acc:	f240 726c 	movw	r2, #1900	@ 0x76c
 8000ad0:	f640 0166 	movw	r1, #2150	@ 0x866
 8000ad4:	482e      	ldr	r0, [pc, #184]	@ (8000b90 <main+0x200>)
 8000ad6:	f7ff fe1d 	bl	8000714 <Braccio_RotateAndLiftGripperClosed>
	   		  HAL_Delay(1000);
 8000ada:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ade:	f000 fe21 	bl	8001724 <HAL_Delay>
	   		  Braccio_MoveGripperSmooth(&arm, 1900, 1500, 1500, 1000, 1500, 166);
 8000ae2:	23a6      	movs	r3, #166	@ 0xa6
 8000ae4:	9302      	str	r3, [sp, #8]
 8000ae6:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000aea:	9301      	str	r3, [sp, #4]
 8000aec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000af0:	9300      	str	r3, [sp, #0]
 8000af2:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000af6:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000afa:	f240 716c 	movw	r1, #1900	@ 0x76c
 8000afe:	4824      	ldr	r0, [pc, #144]	@ (8000b90 <main+0x200>)
 8000b00:	f7ff fe7e 	bl	8000800 <Braccio_MoveGripperSmooth>
	   		  HAL_Delay(1000);
 8000b04:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b08:	f000 fe0c 	bl	8001724 <HAL_Delay>
	   		  Braccio_RotateAndLiftGripperOpen(&arm, 1900 ,2150, 1000, 1500);
 8000b0c:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000b10:	9300      	str	r3, [sp, #0]
 8000b12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b16:	f640 0266 	movw	r2, #2150	@ 0x866
 8000b1a:	f240 716c 	movw	r1, #1900	@ 0x76c
 8000b1e:	481c      	ldr	r0, [pc, #112]	@ (8000b90 <main+0x200>)
 8000b20:	f7ff fd83 	bl	800062a <Braccio_RotateAndLiftGripperOpen>
	   		  HAL_Delay(1000);
 8000b24:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b28:	f000 fdfc 	bl	8001724 <HAL_Delay>
	   		  Braccio_RotateAndLiftGripperOpen(&arm, 2150, 2150, 1500, 2300);
 8000b2c:	f640 03fc 	movw	r3, #2300	@ 0x8fc
 8000b30:	9300      	str	r3, [sp, #0]
 8000b32:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000b36:	f640 0266 	movw	r2, #2150	@ 0x866
 8000b3a:	f640 0166 	movw	r1, #2150	@ 0x866
 8000b3e:	4814      	ldr	r0, [pc, #80]	@ (8000b90 <main+0x200>)
 8000b40:	f7ff fd73 	bl	800062a <Braccio_RotateAndLiftGripperOpen>
	   		  HAL_Delay(1000);
 8000b44:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b48:	f000 fdec 	bl	8001724 <HAL_Delay>
	   		  Braccio_RotateAndLiftGripperOpen(&arm, 2150, 1700, 2300, 2300);
 8000b4c:	f640 03fc 	movw	r3, #2300	@ 0x8fc
 8000b50:	9300      	str	r3, [sp, #0]
 8000b52:	f640 03fc 	movw	r3, #2300	@ 0x8fc
 8000b56:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 8000b5a:	f640 0166 	movw	r1, #2150	@ 0x866
 8000b5e:	480c      	ldr	r0, [pc, #48]	@ (8000b90 <main+0x200>)
 8000b60:	f7ff fd63 	bl	800062a <Braccio_RotateAndLiftGripperOpen>
	   		  HAL_Delay(1000);
 8000b64:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b68:	f000 fddc 	bl	8001724 <HAL_Delay>
	   		  Braccio_RotateAndLiftGripperClosed(&arm, 1700, 1500, 2300, 1500);
 8000b6c:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000b70:	9300      	str	r3, [sp, #0]
 8000b72:	f640 03fc 	movw	r3, #2300	@ 0x8fc
 8000b76:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000b7a:	f240 61a4 	movw	r1, #1700	@ 0x6a4
 8000b7e:	4804      	ldr	r0, [pc, #16]	@ (8000b90 <main+0x200>)
 8000b80:	f7ff fdc8 	bl	8000714 <Braccio_RotateAndLiftGripperClosed>
	   		  HAL_Delay(1000);
 8000b84:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b88:	f000 fdcc 	bl	8001724 <HAL_Delay>
	  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == GPIO_PIN_SET) // PA2 = 0 -> sistem activ
 8000b8c:	e72d      	b.n	80009ea <main+0x5a>
 8000b8e:	bf00      	nop
 8000b90:	20000194 	.word	0x20000194
 8000b94:	200000bc 	.word	0x200000bc
 8000b98:	20000104 	.word	0x20000104
 8000b9c:	2000002c 	.word	0x2000002c
 8000ba0:	20000074 	.word	0x20000074
 8000ba4:	40020000 	.word	0x40020000
 8000ba8:	200001ac 	.word	0x200001ac

08000bac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b094      	sub	sp, #80	@ 0x50
 8000bb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bb2:	f107 0320 	add.w	r3, r7, #32
 8000bb6:	2230      	movs	r2, #48	@ 0x30
 8000bb8:	2100      	movs	r1, #0
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f002 fd64 	bl	8003688 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bc0:	f107 030c 	add.w	r3, r7, #12
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	605a      	str	r2, [r3, #4]
 8000bca:	609a      	str	r2, [r3, #8]
 8000bcc:	60da      	str	r2, [r3, #12]
 8000bce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	60bb      	str	r3, [r7, #8]
 8000bd4:	4b29      	ldr	r3, [pc, #164]	@ (8000c7c <SystemClock_Config+0xd0>)
 8000bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bd8:	4a28      	ldr	r2, [pc, #160]	@ (8000c7c <SystemClock_Config+0xd0>)
 8000bda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bde:	6413      	str	r3, [r2, #64]	@ 0x40
 8000be0:	4b26      	ldr	r3, [pc, #152]	@ (8000c7c <SystemClock_Config+0xd0>)
 8000be2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000be4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000be8:	60bb      	str	r3, [r7, #8]
 8000bea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bec:	2300      	movs	r3, #0
 8000bee:	607b      	str	r3, [r7, #4]
 8000bf0:	4b23      	ldr	r3, [pc, #140]	@ (8000c80 <SystemClock_Config+0xd4>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a22      	ldr	r2, [pc, #136]	@ (8000c80 <SystemClock_Config+0xd4>)
 8000bf6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000bfa:	6013      	str	r3, [r2, #0]
 8000bfc:	4b20      	ldr	r3, [pc, #128]	@ (8000c80 <SystemClock_Config+0xd4>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c04:	607b      	str	r3, [r7, #4]
 8000c06:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000c08:	2303      	movs	r3, #3
 8000c0a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000c0c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000c10:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c12:	2301      	movs	r3, #1
 8000c14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c16:	2310      	movs	r3, #16
 8000c18:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000c22:	2310      	movs	r3, #16
 8000c24:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000c26:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000c2a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000c2c:	2304      	movs	r3, #4
 8000c2e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c30:	2304      	movs	r3, #4
 8000c32:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c34:	f107 0320 	add.w	r3, r7, #32
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f001 f833 	bl	8001ca4 <HAL_RCC_OscConfig>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000c44:	f000 faae 	bl	80011a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c48:	230f      	movs	r3, #15
 8000c4a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c50:	2300      	movs	r3, #0
 8000c52:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c54:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c58:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c5e:	f107 030c 	add.w	r3, r7, #12
 8000c62:	2102      	movs	r1, #2
 8000c64:	4618      	mov	r0, r3
 8000c66:	f001 fa95 	bl	8002194 <HAL_RCC_ClockConfig>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000c70:	f000 fa98 	bl	80011a4 <Error_Handler>
  }
}
 8000c74:	bf00      	nop
 8000c76:	3750      	adds	r7, #80	@ 0x50
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	40023800 	.word	0x40023800
 8000c80:	40007000 	.word	0x40007000

08000c84 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b096      	sub	sp, #88	@ 0x58
 8000c88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c8a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000c8e:	2200      	movs	r2, #0
 8000c90:	601a      	str	r2, [r3, #0]
 8000c92:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c94:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	605a      	str	r2, [r3, #4]
 8000c9e:	609a      	str	r2, [r3, #8]
 8000ca0:	60da      	str	r2, [r3, #12]
 8000ca2:	611a      	str	r2, [r3, #16]
 8000ca4:	615a      	str	r2, [r3, #20]
 8000ca6:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000ca8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	605a      	str	r2, [r3, #4]
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	60da      	str	r2, [r3, #12]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000cb6:	1d3b      	adds	r3, r7, #4
 8000cb8:	2220      	movs	r2, #32
 8000cba:	2100      	movs	r1, #0
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f002 fce3 	bl	8003688 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000cc2:	4b42      	ldr	r3, [pc, #264]	@ (8000dcc <MX_TIM1_Init+0x148>)
 8000cc4:	4a42      	ldr	r2, [pc, #264]	@ (8000dd0 <MX_TIM1_Init+0x14c>)
 8000cc6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 8000cc8:	4b40      	ldr	r3, [pc, #256]	@ (8000dcc <MX_TIM1_Init+0x148>)
 8000cca:	2253      	movs	r2, #83	@ 0x53
 8000ccc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cce:	4b3f      	ldr	r3, [pc, #252]	@ (8000dcc <MX_TIM1_Init+0x148>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000;
 8000cd4:	4b3d      	ldr	r3, [pc, #244]	@ (8000dcc <MX_TIM1_Init+0x148>)
 8000cd6:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000cda:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cdc:	4b3b      	ldr	r3, [pc, #236]	@ (8000dcc <MX_TIM1_Init+0x148>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ce2:	4b3a      	ldr	r3, [pc, #232]	@ (8000dcc <MX_TIM1_Init+0x148>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ce8:	4b38      	ldr	r3, [pc, #224]	@ (8000dcc <MX_TIM1_Init+0x148>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000cee:	4837      	ldr	r0, [pc, #220]	@ (8000dcc <MX_TIM1_Init+0x148>)
 8000cf0:	f001 fdfd 	bl	80028ee <HAL_TIM_PWM_Init>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000cfa:	f000 fa53 	bl	80011a4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000cfe:	4833      	ldr	r0, [pc, #204]	@ (8000dcc <MX_TIM1_Init+0x148>)
 8000d00:	f001 fef4 	bl	8002aec <HAL_TIM_IC_Init>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000d0a:	f000 fa4b 	bl	80011a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d12:	2300      	movs	r3, #0
 8000d14:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d16:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	482b      	ldr	r0, [pc, #172]	@ (8000dcc <MX_TIM1_Init+0x148>)
 8000d1e:	f002 fbf3 	bl	8003508 <HAL_TIMEx_MasterConfigSynchronization>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000d28:	f000 fa3c 	bl	80011a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d2c:	2360      	movs	r3, #96	@ 0x60
 8000d2e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 1500;
 8000d30:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000d34:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d36:	2300      	movs	r3, #0
 8000d38:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d42:	2300      	movs	r3, #0
 8000d44:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d46:	2300      	movs	r3, #0
 8000d48:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d4a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000d4e:	2200      	movs	r2, #0
 8000d50:	4619      	mov	r1, r3
 8000d52:	481e      	ldr	r0, [pc, #120]	@ (8000dcc <MX_TIM1_Init+0x148>)
 8000d54:	f001 ffc0 	bl	8002cd8 <HAL_TIM_PWM_ConfigChannel>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <MX_TIM1_Init+0xde>
  {
    Error_Handler();
 8000d5e:	f000 fa21 	bl	80011a4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000d62:	2300      	movs	r3, #0
 8000d64:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000d66:	2301      	movs	r3, #1
 8000d68:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigIC.ICFilter = 0;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000d72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d76:	2208      	movs	r2, #8
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4814      	ldr	r0, [pc, #80]	@ (8000dcc <MX_TIM1_Init+0x148>)
 8000d7c:	f001 ff0f 	bl	8002b9e <HAL_TIM_IC_ConfigChannel>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8000d86:	f000 fa0d 	bl	80011a4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d92:	2300      	movs	r3, #0
 8000d94:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d96:	2300      	movs	r3, #0
 8000d98:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d9e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000da2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000da4:	2300      	movs	r3, #0
 8000da6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000da8:	1d3b      	adds	r3, r7, #4
 8000daa:	4619      	mov	r1, r3
 8000dac:	4807      	ldr	r0, [pc, #28]	@ (8000dcc <MX_TIM1_Init+0x148>)
 8000dae:	f002 fc19 	bl	80035e4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8000db8:	f000 f9f4 	bl	80011a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000dbc:	4803      	ldr	r0, [pc, #12]	@ (8000dcc <MX_TIM1_Init+0x148>)
 8000dbe:	f000 fb07 	bl	80013d0 <HAL_TIM_MspPostInit>

}
 8000dc2:	bf00      	nop
 8000dc4:	3758      	adds	r7, #88	@ 0x58
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	2000002c 	.word	0x2000002c
 8000dd0:	40010000 	.word	0x40010000

08000dd4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b08a      	sub	sp, #40	@ 0x28
 8000dd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dda:	f107 0320 	add.w	r3, r7, #32
 8000dde:	2200      	movs	r2, #0
 8000de0:	601a      	str	r2, [r3, #0]
 8000de2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000de4:	1d3b      	adds	r3, r7, #4
 8000de6:	2200      	movs	r2, #0
 8000de8:	601a      	str	r2, [r3, #0]
 8000dea:	605a      	str	r2, [r3, #4]
 8000dec:	609a      	str	r2, [r3, #8]
 8000dee:	60da      	str	r2, [r3, #12]
 8000df0:	611a      	str	r2, [r3, #16]
 8000df2:	615a      	str	r2, [r3, #20]
 8000df4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000df6:	4b28      	ldr	r3, [pc, #160]	@ (8000e98 <MX_TIM2_Init+0xc4>)
 8000df8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000dfc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8000dfe:	4b26      	ldr	r3, [pc, #152]	@ (8000e98 <MX_TIM2_Init+0xc4>)
 8000e00:	2253      	movs	r2, #83	@ 0x53
 8000e02:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e04:	4b24      	ldr	r3, [pc, #144]	@ (8000e98 <MX_TIM2_Init+0xc4>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000;
 8000e0a:	4b23      	ldr	r3, [pc, #140]	@ (8000e98 <MX_TIM2_Init+0xc4>)
 8000e0c:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000e10:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e12:	4b21      	ldr	r3, [pc, #132]	@ (8000e98 <MX_TIM2_Init+0xc4>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e18:	4b1f      	ldr	r3, [pc, #124]	@ (8000e98 <MX_TIM2_Init+0xc4>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000e1e:	481e      	ldr	r0, [pc, #120]	@ (8000e98 <MX_TIM2_Init+0xc4>)
 8000e20:	f001 fd65 	bl	80028ee <HAL_TIM_PWM_Init>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000e2a:	f000 f9bb 	bl	80011a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e32:	2300      	movs	r3, #0
 8000e34:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e36:	f107 0320 	add.w	r3, r7, #32
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4816      	ldr	r0, [pc, #88]	@ (8000e98 <MX_TIM2_Init+0xc4>)
 8000e3e:	f002 fb63 	bl	8003508 <HAL_TIMEx_MasterConfigSynchronization>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000e48:	f000 f9ac 	bl	80011a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e4c:	2360      	movs	r3, #96	@ 0x60
 8000e4e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500;
 8000e50:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000e54:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e56:	2300      	movs	r3, #0
 8000e58:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e5e:	1d3b      	adds	r3, r7, #4
 8000e60:	2204      	movs	r2, #4
 8000e62:	4619      	mov	r1, r3
 8000e64:	480c      	ldr	r0, [pc, #48]	@ (8000e98 <MX_TIM2_Init+0xc4>)
 8000e66:	f001 ff37 	bl	8002cd8 <HAL_TIM_PWM_ConfigChannel>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000e70:	f000 f998 	bl	80011a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e74:	1d3b      	adds	r3, r7, #4
 8000e76:	2208      	movs	r2, #8
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4807      	ldr	r0, [pc, #28]	@ (8000e98 <MX_TIM2_Init+0xc4>)
 8000e7c:	f001 ff2c 	bl	8002cd8 <HAL_TIM_PWM_ConfigChannel>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000e86:	f000 f98d 	bl	80011a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000e8a:	4803      	ldr	r0, [pc, #12]	@ (8000e98 <MX_TIM2_Init+0xc4>)
 8000e8c:	f000 faa0 	bl	80013d0 <HAL_TIM_MspPostInit>

}
 8000e90:	bf00      	nop
 8000e92:	3728      	adds	r7, #40	@ 0x28
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	20000074 	.word	0x20000074

08000e9c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b08a      	sub	sp, #40	@ 0x28
 8000ea0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ea2:	f107 0320 	add.w	r3, r7, #32
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	601a      	str	r2, [r3, #0]
 8000eaa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000eac:	1d3b      	adds	r3, r7, #4
 8000eae:	2200      	movs	r2, #0
 8000eb0:	601a      	str	r2, [r3, #0]
 8000eb2:	605a      	str	r2, [r3, #4]
 8000eb4:	609a      	str	r2, [r3, #8]
 8000eb6:	60da      	str	r2, [r3, #12]
 8000eb8:	611a      	str	r2, [r3, #16]
 8000eba:	615a      	str	r2, [r3, #20]
 8000ebc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ebe:	4b28      	ldr	r3, [pc, #160]	@ (8000f60 <MX_TIM3_Init+0xc4>)
 8000ec0:	4a28      	ldr	r2, [pc, #160]	@ (8000f64 <MX_TIM3_Init+0xc8>)
 8000ec2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8000ec4:	4b26      	ldr	r3, [pc, #152]	@ (8000f60 <MX_TIM3_Init+0xc4>)
 8000ec6:	2253      	movs	r2, #83	@ 0x53
 8000ec8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eca:	4b25      	ldr	r3, [pc, #148]	@ (8000f60 <MX_TIM3_Init+0xc4>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000;
 8000ed0:	4b23      	ldr	r3, [pc, #140]	@ (8000f60 <MX_TIM3_Init+0xc4>)
 8000ed2:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000ed6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ed8:	4b21      	ldr	r3, [pc, #132]	@ (8000f60 <MX_TIM3_Init+0xc4>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ede:	4b20      	ldr	r3, [pc, #128]	@ (8000f60 <MX_TIM3_Init+0xc4>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000ee4:	481e      	ldr	r0, [pc, #120]	@ (8000f60 <MX_TIM3_Init+0xc4>)
 8000ee6:	f001 fd02 	bl	80028ee <HAL_TIM_PWM_Init>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000ef0:	f000 f958 	bl	80011a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000efc:	f107 0320 	add.w	r3, r7, #32
 8000f00:	4619      	mov	r1, r3
 8000f02:	4817      	ldr	r0, [pc, #92]	@ (8000f60 <MX_TIM3_Init+0xc4>)
 8000f04:	f002 fb00 	bl	8003508 <HAL_TIMEx_MasterConfigSynchronization>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000f0e:	f000 f949 	bl	80011a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f12:	2360      	movs	r3, #96	@ 0x60
 8000f14:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500;
 8000f16:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000f1a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f20:	2300      	movs	r3, #0
 8000f22:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f24:	1d3b      	adds	r3, r7, #4
 8000f26:	2200      	movs	r2, #0
 8000f28:	4619      	mov	r1, r3
 8000f2a:	480d      	ldr	r0, [pc, #52]	@ (8000f60 <MX_TIM3_Init+0xc4>)
 8000f2c:	f001 fed4 	bl	8002cd8 <HAL_TIM_PWM_ConfigChannel>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000f36:	f000 f935 	bl	80011a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f3a:	1d3b      	adds	r3, r7, #4
 8000f3c:	2204      	movs	r2, #4
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4807      	ldr	r0, [pc, #28]	@ (8000f60 <MX_TIM3_Init+0xc4>)
 8000f42:	f001 fec9 	bl	8002cd8 <HAL_TIM_PWM_ConfigChannel>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000f4c:	f000 f92a 	bl	80011a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000f50:	4803      	ldr	r0, [pc, #12]	@ (8000f60 <MX_TIM3_Init+0xc4>)
 8000f52:	f000 fa3d 	bl	80013d0 <HAL_TIM_MspPostInit>

}
 8000f56:	bf00      	nop
 8000f58:	3728      	adds	r7, #40	@ 0x28
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	200000bc 	.word	0x200000bc
 8000f64:	40000400 	.word	0x40000400

08000f68 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b08a      	sub	sp, #40	@ 0x28
 8000f6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f6e:	f107 0320 	add.w	r3, r7, #32
 8000f72:	2200      	movs	r2, #0
 8000f74:	601a      	str	r2, [r3, #0]
 8000f76:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f78:	1d3b      	adds	r3, r7, #4
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	601a      	str	r2, [r3, #0]
 8000f7e:	605a      	str	r2, [r3, #4]
 8000f80:	609a      	str	r2, [r3, #8]
 8000f82:	60da      	str	r2, [r3, #12]
 8000f84:	611a      	str	r2, [r3, #16]
 8000f86:	615a      	str	r2, [r3, #20]
 8000f88:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000f8a:	4b22      	ldr	r3, [pc, #136]	@ (8001014 <MX_TIM4_Init+0xac>)
 8000f8c:	4a22      	ldr	r2, [pc, #136]	@ (8001018 <MX_TIM4_Init+0xb0>)
 8000f8e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 8000f90:	4b20      	ldr	r3, [pc, #128]	@ (8001014 <MX_TIM4_Init+0xac>)
 8000f92:	2253      	movs	r2, #83	@ 0x53
 8000f94:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f96:	4b1f      	ldr	r3, [pc, #124]	@ (8001014 <MX_TIM4_Init+0xac>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000;
 8000f9c:	4b1d      	ldr	r3, [pc, #116]	@ (8001014 <MX_TIM4_Init+0xac>)
 8000f9e:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000fa2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fa4:	4b1b      	ldr	r3, [pc, #108]	@ (8001014 <MX_TIM4_Init+0xac>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000faa:	4b1a      	ldr	r3, [pc, #104]	@ (8001014 <MX_TIM4_Init+0xac>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000fb0:	4818      	ldr	r0, [pc, #96]	@ (8001014 <MX_TIM4_Init+0xac>)
 8000fb2:	f001 fc9c 	bl	80028ee <HAL_TIM_PWM_Init>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8000fbc:	f000 f8f2 	bl	80011a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000fc8:	f107 0320 	add.w	r3, r7, #32
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4811      	ldr	r0, [pc, #68]	@ (8001014 <MX_TIM4_Init+0xac>)
 8000fd0:	f002 fa9a 	bl	8003508 <HAL_TIMEx_MasterConfigSynchronization>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8000fda:	f000 f8e3 	bl	80011a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fde:	2360      	movs	r3, #96	@ 0x60
 8000fe0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500;
 8000fe2:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000fe6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fec:	2300      	movs	r3, #0
 8000fee:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ff0:	1d3b      	adds	r3, r7, #4
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4807      	ldr	r0, [pc, #28]	@ (8001014 <MX_TIM4_Init+0xac>)
 8000ff8:	f001 fe6e 	bl	8002cd8 <HAL_TIM_PWM_ConfigChannel>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8001002:	f000 f8cf 	bl	80011a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001006:	4803      	ldr	r0, [pc, #12]	@ (8001014 <MX_TIM4_Init+0xac>)
 8001008:	f000 f9e2 	bl	80013d0 <HAL_TIM_MspPostInit>

}
 800100c:	bf00      	nop
 800100e:	3728      	adds	r7, #40	@ 0x28
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20000104 	.word	0x20000104
 8001018:	40000800 	.word	0x40000800

0800101c <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8001022:	463b      	mov	r3, r7
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	605a      	str	r2, [r3, #4]
 800102a:	609a      	str	r2, [r3, #8]
 800102c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 800102e:	4b1d      	ldr	r3, [pc, #116]	@ (80010a4 <MX_TIM11_Init+0x88>)
 8001030:	4a1d      	ldr	r2, [pc, #116]	@ (80010a8 <MX_TIM11_Init+0x8c>)
 8001032:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 83;
 8001034:	4b1b      	ldr	r3, [pc, #108]	@ (80010a4 <MX_TIM11_Init+0x88>)
 8001036:	2253      	movs	r2, #83	@ 0x53
 8001038:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800103a:	4b1a      	ldr	r3, [pc, #104]	@ (80010a4 <MX_TIM11_Init+0x88>)
 800103c:	2200      	movs	r2, #0
 800103e:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8001040:	4b18      	ldr	r3, [pc, #96]	@ (80010a4 <MX_TIM11_Init+0x88>)
 8001042:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001046:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001048:	4b16      	ldr	r3, [pc, #88]	@ (80010a4 <MX_TIM11_Init+0x88>)
 800104a:	2200      	movs	r2, #0
 800104c:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800104e:	4b15      	ldr	r3, [pc, #84]	@ (80010a4 <MX_TIM11_Init+0x88>)
 8001050:	2200      	movs	r2, #0
 8001052:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001054:	4813      	ldr	r0, [pc, #76]	@ (80010a4 <MX_TIM11_Init+0x88>)
 8001056:	f001 fb79 	bl	800274c <HAL_TIM_Base_Init>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_TIM11_Init+0x48>
  {
    Error_Handler();
 8001060:	f000 f8a0 	bl	80011a4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim11) != HAL_OK)
 8001064:	480f      	ldr	r0, [pc, #60]	@ (80010a4 <MX_TIM11_Init+0x88>)
 8001066:	f001 fd41 	bl	8002aec <HAL_TIM_IC_Init>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_TIM11_Init+0x58>
  {
    Error_Handler();
 8001070:	f000 f898 	bl	80011a4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001074:	2300      	movs	r3, #0
 8001076:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001078:	2301      	movs	r3, #1
 800107a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800107c:	2300      	movs	r3, #0
 800107e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001080:	2300      	movs	r3, #0
 8001082:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim11, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001084:	463b      	mov	r3, r7
 8001086:	2200      	movs	r2, #0
 8001088:	4619      	mov	r1, r3
 800108a:	4806      	ldr	r0, [pc, #24]	@ (80010a4 <MX_TIM11_Init+0x88>)
 800108c:	f001 fd87 	bl	8002b9e <HAL_TIM_IC_ConfigChannel>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_TIM11_Init+0x7e>
  {
    Error_Handler();
 8001096:	f000 f885 	bl	80011a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800109a:	bf00      	nop
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	2000014c 	.word	0x2000014c
 80010a8:	40014800 	.word	0x40014800

080010ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b08a      	sub	sp, #40	@ 0x28
 80010b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b2:	f107 0314 	add.w	r3, r7, #20
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	605a      	str	r2, [r3, #4]
 80010bc:	609a      	str	r2, [r3, #8]
 80010be:	60da      	str	r2, [r3, #12]
 80010c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	613b      	str	r3, [r7, #16]
 80010c6:	4b34      	ldr	r3, [pc, #208]	@ (8001198 <MX_GPIO_Init+0xec>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ca:	4a33      	ldr	r2, [pc, #204]	@ (8001198 <MX_GPIO_Init+0xec>)
 80010cc:	f043 0304 	orr.w	r3, r3, #4
 80010d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010d2:	4b31      	ldr	r3, [pc, #196]	@ (8001198 <MX_GPIO_Init+0xec>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010d6:	f003 0304 	and.w	r3, r3, #4
 80010da:	613b      	str	r3, [r7, #16]
 80010dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	60fb      	str	r3, [r7, #12]
 80010e2:	4b2d      	ldr	r3, [pc, #180]	@ (8001198 <MX_GPIO_Init+0xec>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e6:	4a2c      	ldr	r2, [pc, #176]	@ (8001198 <MX_GPIO_Init+0xec>)
 80010e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ee:	4b2a      	ldr	r3, [pc, #168]	@ (8001198 <MX_GPIO_Init+0xec>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fa:	2300      	movs	r3, #0
 80010fc:	60bb      	str	r3, [r7, #8]
 80010fe:	4b26      	ldr	r3, [pc, #152]	@ (8001198 <MX_GPIO_Init+0xec>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001102:	4a25      	ldr	r2, [pc, #148]	@ (8001198 <MX_GPIO_Init+0xec>)
 8001104:	f043 0301 	orr.w	r3, r3, #1
 8001108:	6313      	str	r3, [r2, #48]	@ 0x30
 800110a:	4b23      	ldr	r3, [pc, #140]	@ (8001198 <MX_GPIO_Init+0xec>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800110e:	f003 0301 	and.w	r3, r3, #1
 8001112:	60bb      	str	r3, [r7, #8]
 8001114:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	607b      	str	r3, [r7, #4]
 800111a:	4b1f      	ldr	r3, [pc, #124]	@ (8001198 <MX_GPIO_Init+0xec>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800111e:	4a1e      	ldr	r2, [pc, #120]	@ (8001198 <MX_GPIO_Init+0xec>)
 8001120:	f043 0302 	orr.w	r3, r3, #2
 8001124:	6313      	str	r3, [r2, #48]	@ 0x30
 8001126:	4b1c      	ldr	r3, [pc, #112]	@ (8001198 <MX_GPIO_Init+0xec>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112a:	f003 0302 	and.w	r3, r3, #2
 800112e:	607b      	str	r3, [r7, #4]
 8001130:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_9, GPIO_PIN_RESET);
 8001132:	2200      	movs	r2, #0
 8001134:	f44f 7110 	mov.w	r1, #576	@ 0x240
 8001138:	4818      	ldr	r0, [pc, #96]	@ (800119c <MX_GPIO_Init+0xf0>)
 800113a:	f000 fd99 	bl	8001c70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800113e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001142:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001144:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001148:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114a:	2300      	movs	r3, #0
 800114c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800114e:	f107 0314 	add.w	r3, r7, #20
 8001152:	4619      	mov	r1, r3
 8001154:	4812      	ldr	r0, [pc, #72]	@ (80011a0 <MX_GPIO_Init+0xf4>)
 8001156:	f000 fbef 	bl	8001938 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800115a:	230c      	movs	r3, #12
 800115c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800115e:	2300      	movs	r3, #0
 8001160:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001162:	2302      	movs	r3, #2
 8001164:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001166:	f107 0314 	add.w	r3, r7, #20
 800116a:	4619      	mov	r1, r3
 800116c:	480b      	ldr	r0, [pc, #44]	@ (800119c <MX_GPIO_Init+0xf0>)
 800116e:	f000 fbe3 	bl	8001938 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001172:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001176:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001178:	2301      	movs	r3, #1
 800117a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117c:	2300      	movs	r3, #0
 800117e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001180:	2300      	movs	r3, #0
 8001182:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001184:	f107 0314 	add.w	r3, r7, #20
 8001188:	4619      	mov	r1, r3
 800118a:	4804      	ldr	r0, [pc, #16]	@ (800119c <MX_GPIO_Init+0xf0>)
 800118c:	f000 fbd4 	bl	8001938 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001190:	bf00      	nop
 8001192:	3728      	adds	r7, #40	@ 0x28
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	40023800 	.word	0x40023800
 800119c:	40020000 	.word	0x40020000
 80011a0:	40020800 	.word	0x40020800

080011a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011a8:	b672      	cpsid	i
}
 80011aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011ac:	bf00      	nop
 80011ae:	e7fd      	b.n	80011ac <Error_Handler+0x8>

080011b0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	607b      	str	r3, [r7, #4]
 80011ba:	4b10      	ldr	r3, [pc, #64]	@ (80011fc <HAL_MspInit+0x4c>)
 80011bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011be:	4a0f      	ldr	r2, [pc, #60]	@ (80011fc <HAL_MspInit+0x4c>)
 80011c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80011c6:	4b0d      	ldr	r3, [pc, #52]	@ (80011fc <HAL_MspInit+0x4c>)
 80011c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011ce:	607b      	str	r3, [r7, #4]
 80011d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	603b      	str	r3, [r7, #0]
 80011d6:	4b09      	ldr	r3, [pc, #36]	@ (80011fc <HAL_MspInit+0x4c>)
 80011d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011da:	4a08      	ldr	r2, [pc, #32]	@ (80011fc <HAL_MspInit+0x4c>)
 80011dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80011e2:	4b06      	ldr	r3, [pc, #24]	@ (80011fc <HAL_MspInit+0x4c>)
 80011e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011ea:	603b      	str	r3, [r7, #0]
 80011ec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80011ee:	2007      	movs	r0, #7
 80011f0:	f000 fb6e 	bl	80018d0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011f4:	bf00      	nop
 80011f6:	3708      	adds	r7, #8
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	40023800 	.word	0x40023800

08001200 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b08c      	sub	sp, #48	@ 0x30
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001208:	f107 031c 	add.w	r3, r7, #28
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
 8001212:	609a      	str	r2, [r3, #8]
 8001214:	60da      	str	r2, [r3, #12]
 8001216:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a37      	ldr	r2, [pc, #220]	@ (80012fc <HAL_TIM_PWM_MspInit+0xfc>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d12d      	bne.n	800127e <HAL_TIM_PWM_MspInit+0x7e>
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	61bb      	str	r3, [r7, #24]
 8001226:	4b36      	ldr	r3, [pc, #216]	@ (8001300 <HAL_TIM_PWM_MspInit+0x100>)
 8001228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800122a:	4a35      	ldr	r2, [pc, #212]	@ (8001300 <HAL_TIM_PWM_MspInit+0x100>)
 800122c:	f043 0301 	orr.w	r3, r3, #1
 8001230:	6453      	str	r3, [r2, #68]	@ 0x44
 8001232:	4b33      	ldr	r3, [pc, #204]	@ (8001300 <HAL_TIM_PWM_MspInit+0x100>)
 8001234:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001236:	f003 0301 	and.w	r3, r3, #1
 800123a:	61bb      	str	r3, [r7, #24]
 800123c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	617b      	str	r3, [r7, #20]
 8001242:	4b2f      	ldr	r3, [pc, #188]	@ (8001300 <HAL_TIM_PWM_MspInit+0x100>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001246:	4a2e      	ldr	r2, [pc, #184]	@ (8001300 <HAL_TIM_PWM_MspInit+0x100>)
 8001248:	f043 0301 	orr.w	r3, r3, #1
 800124c:	6313      	str	r3, [r2, #48]	@ 0x30
 800124e:	4b2c      	ldr	r3, [pc, #176]	@ (8001300 <HAL_TIM_PWM_MspInit+0x100>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001252:	f003 0301 	and.w	r3, r3, #1
 8001256:	617b      	str	r3, [r7, #20]
 8001258:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800125a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800125e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001260:	2302      	movs	r3, #2
 8001262:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001264:	2300      	movs	r3, #0
 8001266:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001268:	2300      	movs	r3, #0
 800126a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800126c:	2301      	movs	r3, #1
 800126e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001270:	f107 031c 	add.w	r3, r7, #28
 8001274:	4619      	mov	r1, r3
 8001276:	4823      	ldr	r0, [pc, #140]	@ (8001304 <HAL_TIM_PWM_MspInit+0x104>)
 8001278:	f000 fb5e 	bl	8001938 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800127c:	e03a      	b.n	80012f4 <HAL_TIM_PWM_MspInit+0xf4>
  else if(htim_pwm->Instance==TIM2)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001286:	d10e      	bne.n	80012a6 <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001288:	2300      	movs	r3, #0
 800128a:	613b      	str	r3, [r7, #16]
 800128c:	4b1c      	ldr	r3, [pc, #112]	@ (8001300 <HAL_TIM_PWM_MspInit+0x100>)
 800128e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001290:	4a1b      	ldr	r2, [pc, #108]	@ (8001300 <HAL_TIM_PWM_MspInit+0x100>)
 8001292:	f043 0301 	orr.w	r3, r3, #1
 8001296:	6413      	str	r3, [r2, #64]	@ 0x40
 8001298:	4b19      	ldr	r3, [pc, #100]	@ (8001300 <HAL_TIM_PWM_MspInit+0x100>)
 800129a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800129c:	f003 0301 	and.w	r3, r3, #1
 80012a0:	613b      	str	r3, [r7, #16]
 80012a2:	693b      	ldr	r3, [r7, #16]
}
 80012a4:	e026      	b.n	80012f4 <HAL_TIM_PWM_MspInit+0xf4>
  else if(htim_pwm->Instance==TIM3)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a17      	ldr	r2, [pc, #92]	@ (8001308 <HAL_TIM_PWM_MspInit+0x108>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d10e      	bne.n	80012ce <HAL_TIM_PWM_MspInit+0xce>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80012b0:	2300      	movs	r3, #0
 80012b2:	60fb      	str	r3, [r7, #12]
 80012b4:	4b12      	ldr	r3, [pc, #72]	@ (8001300 <HAL_TIM_PWM_MspInit+0x100>)
 80012b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012b8:	4a11      	ldr	r2, [pc, #68]	@ (8001300 <HAL_TIM_PWM_MspInit+0x100>)
 80012ba:	f043 0302 	orr.w	r3, r3, #2
 80012be:	6413      	str	r3, [r2, #64]	@ 0x40
 80012c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001300 <HAL_TIM_PWM_MspInit+0x100>)
 80012c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012c4:	f003 0302 	and.w	r3, r3, #2
 80012c8:	60fb      	str	r3, [r7, #12]
 80012ca:	68fb      	ldr	r3, [r7, #12]
}
 80012cc:	e012      	b.n	80012f4 <HAL_TIM_PWM_MspInit+0xf4>
  else if(htim_pwm->Instance==TIM4)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a0e      	ldr	r2, [pc, #56]	@ (800130c <HAL_TIM_PWM_MspInit+0x10c>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d10d      	bne.n	80012f4 <HAL_TIM_PWM_MspInit+0xf4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80012d8:	2300      	movs	r3, #0
 80012da:	60bb      	str	r3, [r7, #8]
 80012dc:	4b08      	ldr	r3, [pc, #32]	@ (8001300 <HAL_TIM_PWM_MspInit+0x100>)
 80012de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e0:	4a07      	ldr	r2, [pc, #28]	@ (8001300 <HAL_TIM_PWM_MspInit+0x100>)
 80012e2:	f043 0304 	orr.w	r3, r3, #4
 80012e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80012e8:	4b05      	ldr	r3, [pc, #20]	@ (8001300 <HAL_TIM_PWM_MspInit+0x100>)
 80012ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ec:	f003 0304 	and.w	r3, r3, #4
 80012f0:	60bb      	str	r3, [r7, #8]
 80012f2:	68bb      	ldr	r3, [r7, #8]
}
 80012f4:	bf00      	nop
 80012f6:	3730      	adds	r7, #48	@ 0x30
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	40010000 	.word	0x40010000
 8001300:	40023800 	.word	0x40023800
 8001304:	40020000 	.word	0x40020000
 8001308:	40000400 	.word	0x40000400
 800130c:	40000800 	.word	0x40000800

08001310 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b090      	sub	sp, #64	@ 0x40
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001318:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	605a      	str	r2, [r3, #4]
 8001322:	609a      	str	r2, [r3, #8]
 8001324:	60da      	str	r2, [r3, #12]
 8001326:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001328:	f107 0314 	add.w	r3, r7, #20
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]
 8001334:	60da      	str	r2, [r3, #12]
 8001336:	611a      	str	r2, [r3, #16]
 8001338:	615a      	str	r2, [r3, #20]
  if(htim_base->Instance==TIM11)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a21      	ldr	r2, [pc, #132]	@ (80013c4 <HAL_TIM_Base_MspInit+0xb4>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d13b      	bne.n	80013bc <HAL_TIM_Base_MspInit+0xac>

  /* USER CODE END TIM11_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001344:	2302      	movs	r3, #2
 8001346:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001348:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800134c:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800134e:	f107 0314 	add.w	r3, r7, #20
 8001352:	4618      	mov	r0, r3
 8001354:	f001 f90a 	bl	800256c <HAL_RCCEx_PeriphCLKConfig>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <HAL_TIM_Base_MspInit+0x52>
    {
      Error_Handler();
 800135e:	f7ff ff21 	bl	80011a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	613b      	str	r3, [r7, #16]
 8001366:	4b18      	ldr	r3, [pc, #96]	@ (80013c8 <HAL_TIM_Base_MspInit+0xb8>)
 8001368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800136a:	4a17      	ldr	r2, [pc, #92]	@ (80013c8 <HAL_TIM_Base_MspInit+0xb8>)
 800136c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001370:	6453      	str	r3, [r2, #68]	@ 0x44
 8001372:	4b15      	ldr	r3, [pc, #84]	@ (80013c8 <HAL_TIM_Base_MspInit+0xb8>)
 8001374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001376:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800137a:	613b      	str	r3, [r7, #16]
 800137c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	60fb      	str	r3, [r7, #12]
 8001382:	4b11      	ldr	r3, [pc, #68]	@ (80013c8 <HAL_TIM_Base_MspInit+0xb8>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001386:	4a10      	ldr	r2, [pc, #64]	@ (80013c8 <HAL_TIM_Base_MspInit+0xb8>)
 8001388:	f043 0302 	orr.w	r3, r3, #2
 800138c:	6313      	str	r3, [r2, #48]	@ 0x30
 800138e:	4b0e      	ldr	r3, [pc, #56]	@ (80013c8 <HAL_TIM_Base_MspInit+0xb8>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001392:	f003 0302 	and.w	r3, r3, #2
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	68fb      	ldr	r3, [r7, #12]
    /**TIM11 GPIO Configuration
    PB9     ------> TIM11_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800139a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800139e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a0:	2302      	movs	r3, #2
 80013a2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a4:	2300      	movs	r3, #0
 80013a6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a8:	2300      	movs	r3, #0
 80013aa:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 80013ac:	2303      	movs	r3, #3
 80013ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80013b4:	4619      	mov	r1, r3
 80013b6:	4805      	ldr	r0, [pc, #20]	@ (80013cc <HAL_TIM_Base_MspInit+0xbc>)
 80013b8:	f000 fabe 	bl	8001938 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80013bc:	bf00      	nop
 80013be:	3740      	adds	r7, #64	@ 0x40
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	40014800 	.word	0x40014800
 80013c8:	40023800 	.word	0x40023800
 80013cc:	40020400 	.word	0x40020400

080013d0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b08c      	sub	sp, #48	@ 0x30
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d8:	f107 031c 	add.w	r3, r7, #28
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	609a      	str	r2, [r3, #8]
 80013e4:	60da      	str	r2, [r3, #12]
 80013e6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a58      	ldr	r2, [pc, #352]	@ (8001550 <HAL_TIM_MspPostInit+0x180>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d11f      	bne.n	8001432 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	61bb      	str	r3, [r7, #24]
 80013f6:	4b57      	ldr	r3, [pc, #348]	@ (8001554 <HAL_TIM_MspPostInit+0x184>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013fa:	4a56      	ldr	r2, [pc, #344]	@ (8001554 <HAL_TIM_MspPostInit+0x184>)
 80013fc:	f043 0301 	orr.w	r3, r3, #1
 8001400:	6313      	str	r3, [r2, #48]	@ 0x30
 8001402:	4b54      	ldr	r3, [pc, #336]	@ (8001554 <HAL_TIM_MspPostInit+0x184>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001406:	f003 0301 	and.w	r3, r3, #1
 800140a:	61bb      	str	r3, [r7, #24]
 800140c:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800140e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001412:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001414:	2302      	movs	r3, #2
 8001416:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001418:	2300      	movs	r3, #0
 800141a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141c:	2300      	movs	r3, #0
 800141e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001420:	2301      	movs	r3, #1
 8001422:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001424:	f107 031c 	add.w	r3, r7, #28
 8001428:	4619      	mov	r1, r3
 800142a:	484b      	ldr	r0, [pc, #300]	@ (8001558 <HAL_TIM_MspPostInit+0x188>)
 800142c:	f000 fa84 	bl	8001938 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001430:	e089      	b.n	8001546 <HAL_TIM_MspPostInit+0x176>
  else if(htim->Instance==TIM2)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800143a:	d11f      	bne.n	800147c <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800143c:	2300      	movs	r3, #0
 800143e:	617b      	str	r3, [r7, #20]
 8001440:	4b44      	ldr	r3, [pc, #272]	@ (8001554 <HAL_TIM_MspPostInit+0x184>)
 8001442:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001444:	4a43      	ldr	r2, [pc, #268]	@ (8001554 <HAL_TIM_MspPostInit+0x184>)
 8001446:	f043 0302 	orr.w	r3, r3, #2
 800144a:	6313      	str	r3, [r2, #48]	@ 0x30
 800144c:	4b41      	ldr	r3, [pc, #260]	@ (8001554 <HAL_TIM_MspPostInit+0x184>)
 800144e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001450:	f003 0302 	and.w	r3, r3, #2
 8001454:	617b      	str	r3, [r7, #20]
 8001456:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
 8001458:	f44f 6381 	mov.w	r3, #1032	@ 0x408
 800145c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145e:	2302      	movs	r3, #2
 8001460:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001462:	2300      	movs	r3, #0
 8001464:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001466:	2300      	movs	r3, #0
 8001468:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800146a:	2301      	movs	r3, #1
 800146c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800146e:	f107 031c 	add.w	r3, r7, #28
 8001472:	4619      	mov	r1, r3
 8001474:	4839      	ldr	r0, [pc, #228]	@ (800155c <HAL_TIM_MspPostInit+0x18c>)
 8001476:	f000 fa5f 	bl	8001938 <HAL_GPIO_Init>
}
 800147a:	e064      	b.n	8001546 <HAL_TIM_MspPostInit+0x176>
  else if(htim->Instance==TIM3)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a37      	ldr	r2, [pc, #220]	@ (8001560 <HAL_TIM_MspPostInit+0x190>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d13c      	bne.n	8001500 <HAL_TIM_MspPostInit+0x130>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001486:	2300      	movs	r3, #0
 8001488:	613b      	str	r3, [r7, #16]
 800148a:	4b32      	ldr	r3, [pc, #200]	@ (8001554 <HAL_TIM_MspPostInit+0x184>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800148e:	4a31      	ldr	r2, [pc, #196]	@ (8001554 <HAL_TIM_MspPostInit+0x184>)
 8001490:	f043 0301 	orr.w	r3, r3, #1
 8001494:	6313      	str	r3, [r2, #48]	@ 0x30
 8001496:	4b2f      	ldr	r3, [pc, #188]	@ (8001554 <HAL_TIM_MspPostInit+0x184>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	613b      	str	r3, [r7, #16]
 80014a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014a2:	2300      	movs	r3, #0
 80014a4:	60fb      	str	r3, [r7, #12]
 80014a6:	4b2b      	ldr	r3, [pc, #172]	@ (8001554 <HAL_TIM_MspPostInit+0x184>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014aa:	4a2a      	ldr	r2, [pc, #168]	@ (8001554 <HAL_TIM_MspPostInit+0x184>)
 80014ac:	f043 0302 	orr.w	r3, r3, #2
 80014b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014b2:	4b28      	ldr	r3, [pc, #160]	@ (8001554 <HAL_TIM_MspPostInit+0x184>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b6:	f003 0302 	and.w	r3, r3, #2
 80014ba:	60fb      	str	r3, [r7, #12]
 80014bc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80014be:	2380      	movs	r3, #128	@ 0x80
 80014c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c2:	2302      	movs	r3, #2
 80014c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c6:	2300      	movs	r3, #0
 80014c8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ca:	2300      	movs	r3, #0
 80014cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80014ce:	2302      	movs	r3, #2
 80014d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d2:	f107 031c 	add.w	r3, r7, #28
 80014d6:	4619      	mov	r1, r3
 80014d8:	481f      	ldr	r0, [pc, #124]	@ (8001558 <HAL_TIM_MspPostInit+0x188>)
 80014da:	f000 fa2d 	bl	8001938 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80014de:	2310      	movs	r3, #16
 80014e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e2:	2302      	movs	r3, #2
 80014e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e6:	2300      	movs	r3, #0
 80014e8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ea:	2300      	movs	r3, #0
 80014ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80014ee:	2302      	movs	r3, #2
 80014f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f2:	f107 031c 	add.w	r3, r7, #28
 80014f6:	4619      	mov	r1, r3
 80014f8:	4818      	ldr	r0, [pc, #96]	@ (800155c <HAL_TIM_MspPostInit+0x18c>)
 80014fa:	f000 fa1d 	bl	8001938 <HAL_GPIO_Init>
}
 80014fe:	e022      	b.n	8001546 <HAL_TIM_MspPostInit+0x176>
  else if(htim->Instance==TIM4)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a17      	ldr	r2, [pc, #92]	@ (8001564 <HAL_TIM_MspPostInit+0x194>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d11d      	bne.n	8001546 <HAL_TIM_MspPostInit+0x176>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800150a:	2300      	movs	r3, #0
 800150c:	60bb      	str	r3, [r7, #8]
 800150e:	4b11      	ldr	r3, [pc, #68]	@ (8001554 <HAL_TIM_MspPostInit+0x184>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001512:	4a10      	ldr	r2, [pc, #64]	@ (8001554 <HAL_TIM_MspPostInit+0x184>)
 8001514:	f043 0302 	orr.w	r3, r3, #2
 8001518:	6313      	str	r3, [r2, #48]	@ 0x30
 800151a:	4b0e      	ldr	r3, [pc, #56]	@ (8001554 <HAL_TIM_MspPostInit+0x184>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800151e:	f003 0302 	and.w	r3, r3, #2
 8001522:	60bb      	str	r3, [r7, #8]
 8001524:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001526:	2340      	movs	r3, #64	@ 0x40
 8001528:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800152a:	2302      	movs	r3, #2
 800152c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152e:	2300      	movs	r3, #0
 8001530:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001532:	2300      	movs	r3, #0
 8001534:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001536:	2302      	movs	r3, #2
 8001538:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800153a:	f107 031c 	add.w	r3, r7, #28
 800153e:	4619      	mov	r1, r3
 8001540:	4806      	ldr	r0, [pc, #24]	@ (800155c <HAL_TIM_MspPostInit+0x18c>)
 8001542:	f000 f9f9 	bl	8001938 <HAL_GPIO_Init>
}
 8001546:	bf00      	nop
 8001548:	3730      	adds	r7, #48	@ 0x30
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	40010000 	.word	0x40010000
 8001554:	40023800 	.word	0x40023800
 8001558:	40020000 	.word	0x40020000
 800155c:	40020400 	.word	0x40020400
 8001560:	40000400 	.word	0x40000400
 8001564:	40000800 	.word	0x40000800

08001568 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800156c:	bf00      	nop
 800156e:	e7fd      	b.n	800156c <NMI_Handler+0x4>

08001570 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001574:	bf00      	nop
 8001576:	e7fd      	b.n	8001574 <HardFault_Handler+0x4>

08001578 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800157c:	bf00      	nop
 800157e:	e7fd      	b.n	800157c <MemManage_Handler+0x4>

08001580 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001584:	bf00      	nop
 8001586:	e7fd      	b.n	8001584 <BusFault_Handler+0x4>

08001588 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800158c:	bf00      	nop
 800158e:	e7fd      	b.n	800158c <UsageFault_Handler+0x4>

08001590 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001594:	bf00      	nop
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr

0800159e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800159e:	b480      	push	{r7}
 80015a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015a2:	bf00      	nop
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015b0:	bf00      	nop
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr

080015ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015be:	f000 f891 	bl	80016e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015c2:	bf00      	nop
 80015c4:	bd80      	pop	{r7, pc}
	...

080015c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015cc:	4b06      	ldr	r3, [pc, #24]	@ (80015e8 <SystemInit+0x20>)
 80015ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015d2:	4a05      	ldr	r2, [pc, #20]	@ (80015e8 <SystemInit+0x20>)
 80015d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015dc:	bf00      	nop
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	e000ed00 	.word	0xe000ed00

080015ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80015ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001624 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015f0:	f7ff ffea 	bl	80015c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015f4:	480c      	ldr	r0, [pc, #48]	@ (8001628 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015f6:	490d      	ldr	r1, [pc, #52]	@ (800162c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001630 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015fc:	e002      	b.n	8001604 <LoopCopyDataInit>

080015fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001600:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001602:	3304      	adds	r3, #4

08001604 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001604:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001606:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001608:	d3f9      	bcc.n	80015fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800160a:	4a0a      	ldr	r2, [pc, #40]	@ (8001634 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800160c:	4c0a      	ldr	r4, [pc, #40]	@ (8001638 <LoopFillZerobss+0x22>)
  movs r3, #0
 800160e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001610:	e001      	b.n	8001616 <LoopFillZerobss>

08001612 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001612:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001614:	3204      	adds	r2, #4

08001616 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001616:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001618:	d3fb      	bcc.n	8001612 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800161a:	f002 f83d 	bl	8003698 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800161e:	f7ff f9b7 	bl	8000990 <main>
  bx  lr    
 8001622:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001624:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001628:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800162c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001630:	08003718 	.word	0x08003718
  ldr r2, =_sbss
 8001634:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001638:	200001b4 	.word	0x200001b4

0800163c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800163c:	e7fe      	b.n	800163c <ADC_IRQHandler>
	...

08001640 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001644:	4b0e      	ldr	r3, [pc, #56]	@ (8001680 <HAL_Init+0x40>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a0d      	ldr	r2, [pc, #52]	@ (8001680 <HAL_Init+0x40>)
 800164a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800164e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001650:	4b0b      	ldr	r3, [pc, #44]	@ (8001680 <HAL_Init+0x40>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a0a      	ldr	r2, [pc, #40]	@ (8001680 <HAL_Init+0x40>)
 8001656:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800165a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800165c:	4b08      	ldr	r3, [pc, #32]	@ (8001680 <HAL_Init+0x40>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a07      	ldr	r2, [pc, #28]	@ (8001680 <HAL_Init+0x40>)
 8001662:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001666:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001668:	2003      	movs	r0, #3
 800166a:	f000 f931 	bl	80018d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800166e:	2000      	movs	r0, #0
 8001670:	f000 f808 	bl	8001684 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001674:	f7ff fd9c 	bl	80011b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001678:	2300      	movs	r3, #0
}
 800167a:	4618      	mov	r0, r3
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	40023c00 	.word	0x40023c00

08001684 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800168c:	4b12      	ldr	r3, [pc, #72]	@ (80016d8 <HAL_InitTick+0x54>)
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	4b12      	ldr	r3, [pc, #72]	@ (80016dc <HAL_InitTick+0x58>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	4619      	mov	r1, r3
 8001696:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800169a:	fbb3 f3f1 	udiv	r3, r3, r1
 800169e:	fbb2 f3f3 	udiv	r3, r2, r3
 80016a2:	4618      	mov	r0, r3
 80016a4:	f000 f93b 	bl	800191e <HAL_SYSTICK_Config>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e00e      	b.n	80016d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2b0f      	cmp	r3, #15
 80016b6:	d80a      	bhi.n	80016ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016b8:	2200      	movs	r2, #0
 80016ba:	6879      	ldr	r1, [r7, #4]
 80016bc:	f04f 30ff 	mov.w	r0, #4294967295
 80016c0:	f000 f911 	bl	80018e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016c4:	4a06      	ldr	r2, [pc, #24]	@ (80016e0 <HAL_InitTick+0x5c>)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016ca:	2300      	movs	r3, #0
 80016cc:	e000      	b.n	80016d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3708      	adds	r7, #8
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	20000004 	.word	0x20000004
 80016dc:	2000000c 	.word	0x2000000c
 80016e0:	20000008 	.word	0x20000008

080016e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016e8:	4b06      	ldr	r3, [pc, #24]	@ (8001704 <HAL_IncTick+0x20>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	461a      	mov	r2, r3
 80016ee:	4b06      	ldr	r3, [pc, #24]	@ (8001708 <HAL_IncTick+0x24>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4413      	add	r3, r2
 80016f4:	4a04      	ldr	r2, [pc, #16]	@ (8001708 <HAL_IncTick+0x24>)
 80016f6:	6013      	str	r3, [r2, #0]
}
 80016f8:	bf00      	nop
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	2000000c 	.word	0x2000000c
 8001708:	200001b0 	.word	0x200001b0

0800170c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  return uwTick;
 8001710:	4b03      	ldr	r3, [pc, #12]	@ (8001720 <HAL_GetTick+0x14>)
 8001712:	681b      	ldr	r3, [r3, #0]
}
 8001714:	4618      	mov	r0, r3
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	200001b0 	.word	0x200001b0

08001724 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800172c:	f7ff ffee 	bl	800170c <HAL_GetTick>
 8001730:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800173c:	d005      	beq.n	800174a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800173e:	4b0a      	ldr	r3, [pc, #40]	@ (8001768 <HAL_Delay+0x44>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	461a      	mov	r2, r3
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	4413      	add	r3, r2
 8001748:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800174a:	bf00      	nop
 800174c:	f7ff ffde 	bl	800170c <HAL_GetTick>
 8001750:	4602      	mov	r2, r0
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	68fa      	ldr	r2, [r7, #12]
 8001758:	429a      	cmp	r2, r3
 800175a:	d8f7      	bhi.n	800174c <HAL_Delay+0x28>
  {
  }
}
 800175c:	bf00      	nop
 800175e:	bf00      	nop
 8001760:	3710      	adds	r7, #16
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	2000000c 	.word	0x2000000c

0800176c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800176c:	b480      	push	{r7}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	f003 0307 	and.w	r3, r3, #7
 800177a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800177c:	4b0c      	ldr	r3, [pc, #48]	@ (80017b0 <__NVIC_SetPriorityGrouping+0x44>)
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001782:	68ba      	ldr	r2, [r7, #8]
 8001784:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001788:	4013      	ands	r3, r2
 800178a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001794:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001798:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800179c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800179e:	4a04      	ldr	r2, [pc, #16]	@ (80017b0 <__NVIC_SetPriorityGrouping+0x44>)
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	60d3      	str	r3, [r2, #12]
}
 80017a4:	bf00      	nop
 80017a6:	3714      	adds	r7, #20
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr
 80017b0:	e000ed00 	.word	0xe000ed00

080017b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017b8:	4b04      	ldr	r3, [pc, #16]	@ (80017cc <__NVIC_GetPriorityGrouping+0x18>)
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	0a1b      	lsrs	r3, r3, #8
 80017be:	f003 0307 	and.w	r3, r3, #7
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr
 80017cc:	e000ed00 	.word	0xe000ed00

080017d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	4603      	mov	r3, r0
 80017d8:	6039      	str	r1, [r7, #0]
 80017da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	db0a      	blt.n	80017fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	b2da      	uxtb	r2, r3
 80017e8:	490c      	ldr	r1, [pc, #48]	@ (800181c <__NVIC_SetPriority+0x4c>)
 80017ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ee:	0112      	lsls	r2, r2, #4
 80017f0:	b2d2      	uxtb	r2, r2
 80017f2:	440b      	add	r3, r1
 80017f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017f8:	e00a      	b.n	8001810 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	b2da      	uxtb	r2, r3
 80017fe:	4908      	ldr	r1, [pc, #32]	@ (8001820 <__NVIC_SetPriority+0x50>)
 8001800:	79fb      	ldrb	r3, [r7, #7]
 8001802:	f003 030f 	and.w	r3, r3, #15
 8001806:	3b04      	subs	r3, #4
 8001808:	0112      	lsls	r2, r2, #4
 800180a:	b2d2      	uxtb	r2, r2
 800180c:	440b      	add	r3, r1
 800180e:	761a      	strb	r2, [r3, #24]
}
 8001810:	bf00      	nop
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr
 800181c:	e000e100 	.word	0xe000e100
 8001820:	e000ed00 	.word	0xe000ed00

08001824 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001824:	b480      	push	{r7}
 8001826:	b089      	sub	sp, #36	@ 0x24
 8001828:	af00      	add	r7, sp, #0
 800182a:	60f8      	str	r0, [r7, #12]
 800182c:	60b9      	str	r1, [r7, #8]
 800182e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	f003 0307 	and.w	r3, r3, #7
 8001836:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	f1c3 0307 	rsb	r3, r3, #7
 800183e:	2b04      	cmp	r3, #4
 8001840:	bf28      	it	cs
 8001842:	2304      	movcs	r3, #4
 8001844:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	3304      	adds	r3, #4
 800184a:	2b06      	cmp	r3, #6
 800184c:	d902      	bls.n	8001854 <NVIC_EncodePriority+0x30>
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	3b03      	subs	r3, #3
 8001852:	e000      	b.n	8001856 <NVIC_EncodePriority+0x32>
 8001854:	2300      	movs	r3, #0
 8001856:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001858:	f04f 32ff 	mov.w	r2, #4294967295
 800185c:	69bb      	ldr	r3, [r7, #24]
 800185e:	fa02 f303 	lsl.w	r3, r2, r3
 8001862:	43da      	mvns	r2, r3
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	401a      	ands	r2, r3
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800186c:	f04f 31ff 	mov.w	r1, #4294967295
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	fa01 f303 	lsl.w	r3, r1, r3
 8001876:	43d9      	mvns	r1, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800187c:	4313      	orrs	r3, r2
         );
}
 800187e:	4618      	mov	r0, r3
 8001880:	3724      	adds	r7, #36	@ 0x24
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
	...

0800188c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	3b01      	subs	r3, #1
 8001898:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800189c:	d301      	bcc.n	80018a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800189e:	2301      	movs	r3, #1
 80018a0:	e00f      	b.n	80018c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018a2:	4a0a      	ldr	r2, [pc, #40]	@ (80018cc <SysTick_Config+0x40>)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	3b01      	subs	r3, #1
 80018a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018aa:	210f      	movs	r1, #15
 80018ac:	f04f 30ff 	mov.w	r0, #4294967295
 80018b0:	f7ff ff8e 	bl	80017d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018b4:	4b05      	ldr	r3, [pc, #20]	@ (80018cc <SysTick_Config+0x40>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018ba:	4b04      	ldr	r3, [pc, #16]	@ (80018cc <SysTick_Config+0x40>)
 80018bc:	2207      	movs	r2, #7
 80018be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018c0:	2300      	movs	r3, #0
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3708      	adds	r7, #8
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	e000e010 	.word	0xe000e010

080018d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f7ff ff47 	bl	800176c <__NVIC_SetPriorityGrouping>
}
 80018de:	bf00      	nop
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b086      	sub	sp, #24
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	4603      	mov	r3, r0
 80018ee:	60b9      	str	r1, [r7, #8]
 80018f0:	607a      	str	r2, [r7, #4]
 80018f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018f4:	2300      	movs	r3, #0
 80018f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018f8:	f7ff ff5c 	bl	80017b4 <__NVIC_GetPriorityGrouping>
 80018fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	68b9      	ldr	r1, [r7, #8]
 8001902:	6978      	ldr	r0, [r7, #20]
 8001904:	f7ff ff8e 	bl	8001824 <NVIC_EncodePriority>
 8001908:	4602      	mov	r2, r0
 800190a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800190e:	4611      	mov	r1, r2
 8001910:	4618      	mov	r0, r3
 8001912:	f7ff ff5d 	bl	80017d0 <__NVIC_SetPriority>
}
 8001916:	bf00      	nop
 8001918:	3718      	adds	r7, #24
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}

0800191e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800191e:	b580      	push	{r7, lr}
 8001920:	b082      	sub	sp, #8
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f7ff ffb0 	bl	800188c <SysTick_Config>
 800192c:	4603      	mov	r3, r0
}
 800192e:	4618      	mov	r0, r3
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
	...

08001938 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001938:	b480      	push	{r7}
 800193a:	b089      	sub	sp, #36	@ 0x24
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001942:	2300      	movs	r3, #0
 8001944:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001946:	2300      	movs	r3, #0
 8001948:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800194a:	2300      	movs	r3, #0
 800194c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800194e:	2300      	movs	r3, #0
 8001950:	61fb      	str	r3, [r7, #28]
 8001952:	e159      	b.n	8001c08 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001954:	2201      	movs	r2, #1
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	697a      	ldr	r2, [r7, #20]
 8001964:	4013      	ands	r3, r2
 8001966:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001968:	693a      	ldr	r2, [r7, #16]
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	429a      	cmp	r2, r3
 800196e:	f040 8148 	bne.w	8001c02 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f003 0303 	and.w	r3, r3, #3
 800197a:	2b01      	cmp	r3, #1
 800197c:	d005      	beq.n	800198a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001986:	2b02      	cmp	r3, #2
 8001988:	d130      	bne.n	80019ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	2203      	movs	r2, #3
 8001996:	fa02 f303 	lsl.w	r3, r2, r3
 800199a:	43db      	mvns	r3, r3
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	4013      	ands	r3, r2
 80019a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	68da      	ldr	r2, [r3, #12]
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	fa02 f303 	lsl.w	r3, r2, r3
 80019ae:	69ba      	ldr	r2, [r7, #24]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	69ba      	ldr	r2, [r7, #24]
 80019b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019c0:	2201      	movs	r2, #1
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	43db      	mvns	r3, r3
 80019ca:	69ba      	ldr	r2, [r7, #24]
 80019cc:	4013      	ands	r3, r2
 80019ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	091b      	lsrs	r3, r3, #4
 80019d6:	f003 0201 	and.w	r2, r3, #1
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	4313      	orrs	r3, r2
 80019e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f003 0303 	and.w	r3, r3, #3
 80019f4:	2b03      	cmp	r3, #3
 80019f6:	d017      	beq.n	8001a28 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	2203      	movs	r2, #3
 8001a04:	fa02 f303 	lsl.w	r3, r2, r3
 8001a08:	43db      	mvns	r3, r3
 8001a0a:	69ba      	ldr	r2, [r7, #24]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	689a      	ldr	r2, [r3, #8]
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	69ba      	ldr	r2, [r7, #24]
 8001a26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f003 0303 	and.w	r3, r3, #3
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d123      	bne.n	8001a7c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	08da      	lsrs	r2, r3, #3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	3208      	adds	r2, #8
 8001a3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	f003 0307 	and.w	r3, r3, #7
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	220f      	movs	r2, #15
 8001a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a50:	43db      	mvns	r3, r3
 8001a52:	69ba      	ldr	r2, [r7, #24]
 8001a54:	4013      	ands	r3, r2
 8001a56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	691a      	ldr	r2, [r3, #16]
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	f003 0307 	and.w	r3, r3, #7
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	08da      	lsrs	r2, r3, #3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	3208      	adds	r2, #8
 8001a76:	69b9      	ldr	r1, [r7, #24]
 8001a78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	005b      	lsls	r3, r3, #1
 8001a86:	2203      	movs	r2, #3
 8001a88:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8c:	43db      	mvns	r3, r3
 8001a8e:	69ba      	ldr	r2, [r7, #24]
 8001a90:	4013      	ands	r3, r2
 8001a92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f003 0203 	and.w	r2, r3, #3
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	005b      	lsls	r3, r3, #1
 8001aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	f000 80a2 	beq.w	8001c02 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001abe:	2300      	movs	r3, #0
 8001ac0:	60fb      	str	r3, [r7, #12]
 8001ac2:	4b57      	ldr	r3, [pc, #348]	@ (8001c20 <HAL_GPIO_Init+0x2e8>)
 8001ac4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ac6:	4a56      	ldr	r2, [pc, #344]	@ (8001c20 <HAL_GPIO_Init+0x2e8>)
 8001ac8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001acc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ace:	4b54      	ldr	r3, [pc, #336]	@ (8001c20 <HAL_GPIO_Init+0x2e8>)
 8001ad0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ad2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ad6:	60fb      	str	r3, [r7, #12]
 8001ad8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ada:	4a52      	ldr	r2, [pc, #328]	@ (8001c24 <HAL_GPIO_Init+0x2ec>)
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	089b      	lsrs	r3, r3, #2
 8001ae0:	3302      	adds	r3, #2
 8001ae2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	f003 0303 	and.w	r3, r3, #3
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	220f      	movs	r2, #15
 8001af2:	fa02 f303 	lsl.w	r3, r2, r3
 8001af6:	43db      	mvns	r3, r3
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	4013      	ands	r3, r2
 8001afc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4a49      	ldr	r2, [pc, #292]	@ (8001c28 <HAL_GPIO_Init+0x2f0>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d019      	beq.n	8001b3a <HAL_GPIO_Init+0x202>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4a48      	ldr	r2, [pc, #288]	@ (8001c2c <HAL_GPIO_Init+0x2f4>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d013      	beq.n	8001b36 <HAL_GPIO_Init+0x1fe>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4a47      	ldr	r2, [pc, #284]	@ (8001c30 <HAL_GPIO_Init+0x2f8>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d00d      	beq.n	8001b32 <HAL_GPIO_Init+0x1fa>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4a46      	ldr	r2, [pc, #280]	@ (8001c34 <HAL_GPIO_Init+0x2fc>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d007      	beq.n	8001b2e <HAL_GPIO_Init+0x1f6>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4a45      	ldr	r2, [pc, #276]	@ (8001c38 <HAL_GPIO_Init+0x300>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d101      	bne.n	8001b2a <HAL_GPIO_Init+0x1f2>
 8001b26:	2304      	movs	r3, #4
 8001b28:	e008      	b.n	8001b3c <HAL_GPIO_Init+0x204>
 8001b2a:	2307      	movs	r3, #7
 8001b2c:	e006      	b.n	8001b3c <HAL_GPIO_Init+0x204>
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e004      	b.n	8001b3c <HAL_GPIO_Init+0x204>
 8001b32:	2302      	movs	r3, #2
 8001b34:	e002      	b.n	8001b3c <HAL_GPIO_Init+0x204>
 8001b36:	2301      	movs	r3, #1
 8001b38:	e000      	b.n	8001b3c <HAL_GPIO_Init+0x204>
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	69fa      	ldr	r2, [r7, #28]
 8001b3e:	f002 0203 	and.w	r2, r2, #3
 8001b42:	0092      	lsls	r2, r2, #2
 8001b44:	4093      	lsls	r3, r2
 8001b46:	69ba      	ldr	r2, [r7, #24]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b4c:	4935      	ldr	r1, [pc, #212]	@ (8001c24 <HAL_GPIO_Init+0x2ec>)
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	089b      	lsrs	r3, r3, #2
 8001b52:	3302      	adds	r3, #2
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b5a:	4b38      	ldr	r3, [pc, #224]	@ (8001c3c <HAL_GPIO_Init+0x304>)
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	43db      	mvns	r3, r3
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	4013      	ands	r3, r2
 8001b68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d003      	beq.n	8001b7e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001b76:	69ba      	ldr	r2, [r7, #24]
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b7e:	4a2f      	ldr	r2, [pc, #188]	@ (8001c3c <HAL_GPIO_Init+0x304>)
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b84:	4b2d      	ldr	r3, [pc, #180]	@ (8001c3c <HAL_GPIO_Init+0x304>)
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	43db      	mvns	r3, r3
 8001b8e:	69ba      	ldr	r2, [r7, #24]
 8001b90:	4013      	ands	r3, r2
 8001b92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d003      	beq.n	8001ba8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ba8:	4a24      	ldr	r2, [pc, #144]	@ (8001c3c <HAL_GPIO_Init+0x304>)
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001bae:	4b23      	ldr	r3, [pc, #140]	@ (8001c3c <HAL_GPIO_Init+0x304>)
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	43db      	mvns	r3, r3
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	4013      	ands	r3, r2
 8001bbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d003      	beq.n	8001bd2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001bca:	69ba      	ldr	r2, [r7, #24]
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bd2:	4a1a      	ldr	r2, [pc, #104]	@ (8001c3c <HAL_GPIO_Init+0x304>)
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bd8:	4b18      	ldr	r3, [pc, #96]	@ (8001c3c <HAL_GPIO_Init+0x304>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	43db      	mvns	r3, r3
 8001be2:	69ba      	ldr	r2, [r7, #24]
 8001be4:	4013      	ands	r3, r2
 8001be6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d003      	beq.n	8001bfc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bfc:	4a0f      	ldr	r2, [pc, #60]	@ (8001c3c <HAL_GPIO_Init+0x304>)
 8001bfe:	69bb      	ldr	r3, [r7, #24]
 8001c00:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	3301      	adds	r3, #1
 8001c06:	61fb      	str	r3, [r7, #28]
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	2b0f      	cmp	r3, #15
 8001c0c:	f67f aea2 	bls.w	8001954 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c10:	bf00      	nop
 8001c12:	bf00      	nop
 8001c14:	3724      	adds	r7, #36	@ 0x24
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	40023800 	.word	0x40023800
 8001c24:	40013800 	.word	0x40013800
 8001c28:	40020000 	.word	0x40020000
 8001c2c:	40020400 	.word	0x40020400
 8001c30:	40020800 	.word	0x40020800
 8001c34:	40020c00 	.word	0x40020c00
 8001c38:	40021000 	.word	0x40021000
 8001c3c:	40013c00 	.word	0x40013c00

08001c40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b085      	sub	sp, #20
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	460b      	mov	r3, r1
 8001c4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	691a      	ldr	r2, [r3, #16]
 8001c50:	887b      	ldrh	r3, [r7, #2]
 8001c52:	4013      	ands	r3, r2
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d002      	beq.n	8001c5e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	73fb      	strb	r3, [r7, #15]
 8001c5c:	e001      	b.n	8001c62 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c62:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3714      	adds	r7, #20
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr

08001c70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	460b      	mov	r3, r1
 8001c7a:	807b      	strh	r3, [r7, #2]
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c80:	787b      	ldrb	r3, [r7, #1]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d003      	beq.n	8001c8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c86:	887a      	ldrh	r2, [r7, #2]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c8c:	e003      	b.n	8001c96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c8e:	887b      	ldrh	r3, [r7, #2]
 8001c90:	041a      	lsls	r2, r3, #16
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	619a      	str	r2, [r3, #24]
}
 8001c96:	bf00      	nop
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
	...

08001ca4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b086      	sub	sp, #24
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d101      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e267      	b.n	8002186 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0301 	and.w	r3, r3, #1
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d075      	beq.n	8001dae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001cc2:	4b88      	ldr	r3, [pc, #544]	@ (8001ee4 <HAL_RCC_OscConfig+0x240>)
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	f003 030c 	and.w	r3, r3, #12
 8001cca:	2b04      	cmp	r3, #4
 8001ccc:	d00c      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cce:	4b85      	ldr	r3, [pc, #532]	@ (8001ee4 <HAL_RCC_OscConfig+0x240>)
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001cd6:	2b08      	cmp	r3, #8
 8001cd8:	d112      	bne.n	8001d00 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cda:	4b82      	ldr	r3, [pc, #520]	@ (8001ee4 <HAL_RCC_OscConfig+0x240>)
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ce2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001ce6:	d10b      	bne.n	8001d00 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ce8:	4b7e      	ldr	r3, [pc, #504]	@ (8001ee4 <HAL_RCC_OscConfig+0x240>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d05b      	beq.n	8001dac <HAL_RCC_OscConfig+0x108>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d157      	bne.n	8001dac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e242      	b.n	8002186 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d08:	d106      	bne.n	8001d18 <HAL_RCC_OscConfig+0x74>
 8001d0a:	4b76      	ldr	r3, [pc, #472]	@ (8001ee4 <HAL_RCC_OscConfig+0x240>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a75      	ldr	r2, [pc, #468]	@ (8001ee4 <HAL_RCC_OscConfig+0x240>)
 8001d10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d14:	6013      	str	r3, [r2, #0]
 8001d16:	e01d      	b.n	8001d54 <HAL_RCC_OscConfig+0xb0>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d20:	d10c      	bne.n	8001d3c <HAL_RCC_OscConfig+0x98>
 8001d22:	4b70      	ldr	r3, [pc, #448]	@ (8001ee4 <HAL_RCC_OscConfig+0x240>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a6f      	ldr	r2, [pc, #444]	@ (8001ee4 <HAL_RCC_OscConfig+0x240>)
 8001d28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d2c:	6013      	str	r3, [r2, #0]
 8001d2e:	4b6d      	ldr	r3, [pc, #436]	@ (8001ee4 <HAL_RCC_OscConfig+0x240>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a6c      	ldr	r2, [pc, #432]	@ (8001ee4 <HAL_RCC_OscConfig+0x240>)
 8001d34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d38:	6013      	str	r3, [r2, #0]
 8001d3a:	e00b      	b.n	8001d54 <HAL_RCC_OscConfig+0xb0>
 8001d3c:	4b69      	ldr	r3, [pc, #420]	@ (8001ee4 <HAL_RCC_OscConfig+0x240>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a68      	ldr	r2, [pc, #416]	@ (8001ee4 <HAL_RCC_OscConfig+0x240>)
 8001d42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d46:	6013      	str	r3, [r2, #0]
 8001d48:	4b66      	ldr	r3, [pc, #408]	@ (8001ee4 <HAL_RCC_OscConfig+0x240>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a65      	ldr	r2, [pc, #404]	@ (8001ee4 <HAL_RCC_OscConfig+0x240>)
 8001d4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d013      	beq.n	8001d84 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d5c:	f7ff fcd6 	bl	800170c <HAL_GetTick>
 8001d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d62:	e008      	b.n	8001d76 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d64:	f7ff fcd2 	bl	800170c <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	2b64      	cmp	r3, #100	@ 0x64
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e207      	b.n	8002186 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d76:	4b5b      	ldr	r3, [pc, #364]	@ (8001ee4 <HAL_RCC_OscConfig+0x240>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d0f0      	beq.n	8001d64 <HAL_RCC_OscConfig+0xc0>
 8001d82:	e014      	b.n	8001dae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d84:	f7ff fcc2 	bl	800170c <HAL_GetTick>
 8001d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d8a:	e008      	b.n	8001d9e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d8c:	f7ff fcbe 	bl	800170c <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	2b64      	cmp	r3, #100	@ 0x64
 8001d98:	d901      	bls.n	8001d9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e1f3      	b.n	8002186 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d9e:	4b51      	ldr	r3, [pc, #324]	@ (8001ee4 <HAL_RCC_OscConfig+0x240>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d1f0      	bne.n	8001d8c <HAL_RCC_OscConfig+0xe8>
 8001daa:	e000      	b.n	8001dae <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0302 	and.w	r3, r3, #2
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d063      	beq.n	8001e82 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001dba:	4b4a      	ldr	r3, [pc, #296]	@ (8001ee4 <HAL_RCC_OscConfig+0x240>)
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	f003 030c 	and.w	r3, r3, #12
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d00b      	beq.n	8001dde <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001dc6:	4b47      	ldr	r3, [pc, #284]	@ (8001ee4 <HAL_RCC_OscConfig+0x240>)
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001dce:	2b08      	cmp	r3, #8
 8001dd0:	d11c      	bne.n	8001e0c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001dd2:	4b44      	ldr	r3, [pc, #272]	@ (8001ee4 <HAL_RCC_OscConfig+0x240>)
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d116      	bne.n	8001e0c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dde:	4b41      	ldr	r3, [pc, #260]	@ (8001ee4 <HAL_RCC_OscConfig+0x240>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0302 	and.w	r3, r3, #2
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d005      	beq.n	8001df6 <HAL_RCC_OscConfig+0x152>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	68db      	ldr	r3, [r3, #12]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d001      	beq.n	8001df6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e1c7      	b.n	8002186 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001df6:	4b3b      	ldr	r3, [pc, #236]	@ (8001ee4 <HAL_RCC_OscConfig+0x240>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	691b      	ldr	r3, [r3, #16]
 8001e02:	00db      	lsls	r3, r3, #3
 8001e04:	4937      	ldr	r1, [pc, #220]	@ (8001ee4 <HAL_RCC_OscConfig+0x240>)
 8001e06:	4313      	orrs	r3, r2
 8001e08:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e0a:	e03a      	b.n	8001e82 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d020      	beq.n	8001e56 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e14:	4b34      	ldr	r3, [pc, #208]	@ (8001ee8 <HAL_RCC_OscConfig+0x244>)
 8001e16:	2201      	movs	r2, #1
 8001e18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e1a:	f7ff fc77 	bl	800170c <HAL_GetTick>
 8001e1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e20:	e008      	b.n	8001e34 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e22:	f7ff fc73 	bl	800170c <HAL_GetTick>
 8001e26:	4602      	mov	r2, r0
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	2b02      	cmp	r3, #2
 8001e2e:	d901      	bls.n	8001e34 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001e30:	2303      	movs	r3, #3
 8001e32:	e1a8      	b.n	8002186 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e34:	4b2b      	ldr	r3, [pc, #172]	@ (8001ee4 <HAL_RCC_OscConfig+0x240>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 0302 	and.w	r3, r3, #2
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d0f0      	beq.n	8001e22 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e40:	4b28      	ldr	r3, [pc, #160]	@ (8001ee4 <HAL_RCC_OscConfig+0x240>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	691b      	ldr	r3, [r3, #16]
 8001e4c:	00db      	lsls	r3, r3, #3
 8001e4e:	4925      	ldr	r1, [pc, #148]	@ (8001ee4 <HAL_RCC_OscConfig+0x240>)
 8001e50:	4313      	orrs	r3, r2
 8001e52:	600b      	str	r3, [r1, #0]
 8001e54:	e015      	b.n	8001e82 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e56:	4b24      	ldr	r3, [pc, #144]	@ (8001ee8 <HAL_RCC_OscConfig+0x244>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e5c:	f7ff fc56 	bl	800170c <HAL_GetTick>
 8001e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e62:	e008      	b.n	8001e76 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e64:	f7ff fc52 	bl	800170c <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d901      	bls.n	8001e76 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e187      	b.n	8002186 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e76:	4b1b      	ldr	r3, [pc, #108]	@ (8001ee4 <HAL_RCC_OscConfig+0x240>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d1f0      	bne.n	8001e64 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0308 	and.w	r3, r3, #8
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d036      	beq.n	8001efc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	695b      	ldr	r3, [r3, #20]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d016      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e96:	4b15      	ldr	r3, [pc, #84]	@ (8001eec <HAL_RCC_OscConfig+0x248>)
 8001e98:	2201      	movs	r2, #1
 8001e9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e9c:	f7ff fc36 	bl	800170c <HAL_GetTick>
 8001ea0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ea2:	e008      	b.n	8001eb6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ea4:	f7ff fc32 	bl	800170c <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e167      	b.n	8002186 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eb6:	4b0b      	ldr	r3, [pc, #44]	@ (8001ee4 <HAL_RCC_OscConfig+0x240>)
 8001eb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001eba:	f003 0302 	and.w	r3, r3, #2
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d0f0      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x200>
 8001ec2:	e01b      	b.n	8001efc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ec4:	4b09      	ldr	r3, [pc, #36]	@ (8001eec <HAL_RCC_OscConfig+0x248>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eca:	f7ff fc1f 	bl	800170c <HAL_GetTick>
 8001ece:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ed0:	e00e      	b.n	8001ef0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ed2:	f7ff fc1b 	bl	800170c <HAL_GetTick>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	d907      	bls.n	8001ef0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	e150      	b.n	8002186 <HAL_RCC_OscConfig+0x4e2>
 8001ee4:	40023800 	.word	0x40023800
 8001ee8:	42470000 	.word	0x42470000
 8001eec:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ef0:	4b88      	ldr	r3, [pc, #544]	@ (8002114 <HAL_RCC_OscConfig+0x470>)
 8001ef2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ef4:	f003 0302 	and.w	r3, r3, #2
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d1ea      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0304 	and.w	r3, r3, #4
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	f000 8097 	beq.w	8002038 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f0e:	4b81      	ldr	r3, [pc, #516]	@ (8002114 <HAL_RCC_OscConfig+0x470>)
 8001f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d10f      	bne.n	8001f3a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	60bb      	str	r3, [r7, #8]
 8001f1e:	4b7d      	ldr	r3, [pc, #500]	@ (8002114 <HAL_RCC_OscConfig+0x470>)
 8001f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f22:	4a7c      	ldr	r2, [pc, #496]	@ (8002114 <HAL_RCC_OscConfig+0x470>)
 8001f24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f28:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f2a:	4b7a      	ldr	r3, [pc, #488]	@ (8002114 <HAL_RCC_OscConfig+0x470>)
 8001f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f32:	60bb      	str	r3, [r7, #8]
 8001f34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f36:	2301      	movs	r3, #1
 8001f38:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f3a:	4b77      	ldr	r3, [pc, #476]	@ (8002118 <HAL_RCC_OscConfig+0x474>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d118      	bne.n	8001f78 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f46:	4b74      	ldr	r3, [pc, #464]	@ (8002118 <HAL_RCC_OscConfig+0x474>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a73      	ldr	r2, [pc, #460]	@ (8002118 <HAL_RCC_OscConfig+0x474>)
 8001f4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f52:	f7ff fbdb 	bl	800170c <HAL_GetTick>
 8001f56:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f58:	e008      	b.n	8001f6c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f5a:	f7ff fbd7 	bl	800170c <HAL_GetTick>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d901      	bls.n	8001f6c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	e10c      	b.n	8002186 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f6c:	4b6a      	ldr	r3, [pc, #424]	@ (8002118 <HAL_RCC_OscConfig+0x474>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d0f0      	beq.n	8001f5a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d106      	bne.n	8001f8e <HAL_RCC_OscConfig+0x2ea>
 8001f80:	4b64      	ldr	r3, [pc, #400]	@ (8002114 <HAL_RCC_OscConfig+0x470>)
 8001f82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f84:	4a63      	ldr	r2, [pc, #396]	@ (8002114 <HAL_RCC_OscConfig+0x470>)
 8001f86:	f043 0301 	orr.w	r3, r3, #1
 8001f8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f8c:	e01c      	b.n	8001fc8 <HAL_RCC_OscConfig+0x324>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	2b05      	cmp	r3, #5
 8001f94:	d10c      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x30c>
 8001f96:	4b5f      	ldr	r3, [pc, #380]	@ (8002114 <HAL_RCC_OscConfig+0x470>)
 8001f98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f9a:	4a5e      	ldr	r2, [pc, #376]	@ (8002114 <HAL_RCC_OscConfig+0x470>)
 8001f9c:	f043 0304 	orr.w	r3, r3, #4
 8001fa0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fa2:	4b5c      	ldr	r3, [pc, #368]	@ (8002114 <HAL_RCC_OscConfig+0x470>)
 8001fa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fa6:	4a5b      	ldr	r2, [pc, #364]	@ (8002114 <HAL_RCC_OscConfig+0x470>)
 8001fa8:	f043 0301 	orr.w	r3, r3, #1
 8001fac:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fae:	e00b      	b.n	8001fc8 <HAL_RCC_OscConfig+0x324>
 8001fb0:	4b58      	ldr	r3, [pc, #352]	@ (8002114 <HAL_RCC_OscConfig+0x470>)
 8001fb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fb4:	4a57      	ldr	r2, [pc, #348]	@ (8002114 <HAL_RCC_OscConfig+0x470>)
 8001fb6:	f023 0301 	bic.w	r3, r3, #1
 8001fba:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fbc:	4b55      	ldr	r3, [pc, #340]	@ (8002114 <HAL_RCC_OscConfig+0x470>)
 8001fbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fc0:	4a54      	ldr	r2, [pc, #336]	@ (8002114 <HAL_RCC_OscConfig+0x470>)
 8001fc2:	f023 0304 	bic.w	r3, r3, #4
 8001fc6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d015      	beq.n	8001ffc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fd0:	f7ff fb9c 	bl	800170c <HAL_GetTick>
 8001fd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fd6:	e00a      	b.n	8001fee <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fd8:	f7ff fb98 	bl	800170c <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d901      	bls.n	8001fee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e0cb      	b.n	8002186 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fee:	4b49      	ldr	r3, [pc, #292]	@ (8002114 <HAL_RCC_OscConfig+0x470>)
 8001ff0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ff2:	f003 0302 	and.w	r3, r3, #2
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d0ee      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x334>
 8001ffa:	e014      	b.n	8002026 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ffc:	f7ff fb86 	bl	800170c <HAL_GetTick>
 8002000:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002002:	e00a      	b.n	800201a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002004:	f7ff fb82 	bl	800170c <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002012:	4293      	cmp	r3, r2
 8002014:	d901      	bls.n	800201a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e0b5      	b.n	8002186 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800201a:	4b3e      	ldr	r3, [pc, #248]	@ (8002114 <HAL_RCC_OscConfig+0x470>)
 800201c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800201e:	f003 0302 	and.w	r3, r3, #2
 8002022:	2b00      	cmp	r3, #0
 8002024:	d1ee      	bne.n	8002004 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002026:	7dfb      	ldrb	r3, [r7, #23]
 8002028:	2b01      	cmp	r3, #1
 800202a:	d105      	bne.n	8002038 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800202c:	4b39      	ldr	r3, [pc, #228]	@ (8002114 <HAL_RCC_OscConfig+0x470>)
 800202e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002030:	4a38      	ldr	r2, [pc, #224]	@ (8002114 <HAL_RCC_OscConfig+0x470>)
 8002032:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002036:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	699b      	ldr	r3, [r3, #24]
 800203c:	2b00      	cmp	r3, #0
 800203e:	f000 80a1 	beq.w	8002184 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002042:	4b34      	ldr	r3, [pc, #208]	@ (8002114 <HAL_RCC_OscConfig+0x470>)
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	f003 030c 	and.w	r3, r3, #12
 800204a:	2b08      	cmp	r3, #8
 800204c:	d05c      	beq.n	8002108 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	699b      	ldr	r3, [r3, #24]
 8002052:	2b02      	cmp	r3, #2
 8002054:	d141      	bne.n	80020da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002056:	4b31      	ldr	r3, [pc, #196]	@ (800211c <HAL_RCC_OscConfig+0x478>)
 8002058:	2200      	movs	r2, #0
 800205a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800205c:	f7ff fb56 	bl	800170c <HAL_GetTick>
 8002060:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002062:	e008      	b.n	8002076 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002064:	f7ff fb52 	bl	800170c <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	2b02      	cmp	r3, #2
 8002070:	d901      	bls.n	8002076 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e087      	b.n	8002186 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002076:	4b27      	ldr	r3, [pc, #156]	@ (8002114 <HAL_RCC_OscConfig+0x470>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d1f0      	bne.n	8002064 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	69da      	ldr	r2, [r3, #28]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6a1b      	ldr	r3, [r3, #32]
 800208a:	431a      	orrs	r2, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002090:	019b      	lsls	r3, r3, #6
 8002092:	431a      	orrs	r2, r3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002098:	085b      	lsrs	r3, r3, #1
 800209a:	3b01      	subs	r3, #1
 800209c:	041b      	lsls	r3, r3, #16
 800209e:	431a      	orrs	r2, r3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020a4:	061b      	lsls	r3, r3, #24
 80020a6:	491b      	ldr	r1, [pc, #108]	@ (8002114 <HAL_RCC_OscConfig+0x470>)
 80020a8:	4313      	orrs	r3, r2
 80020aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020ac:	4b1b      	ldr	r3, [pc, #108]	@ (800211c <HAL_RCC_OscConfig+0x478>)
 80020ae:	2201      	movs	r2, #1
 80020b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b2:	f7ff fb2b 	bl	800170c <HAL_GetTick>
 80020b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020b8:	e008      	b.n	80020cc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020ba:	f7ff fb27 	bl	800170c <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d901      	bls.n	80020cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	e05c      	b.n	8002186 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020cc:	4b11      	ldr	r3, [pc, #68]	@ (8002114 <HAL_RCC_OscConfig+0x470>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d0f0      	beq.n	80020ba <HAL_RCC_OscConfig+0x416>
 80020d8:	e054      	b.n	8002184 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020da:	4b10      	ldr	r3, [pc, #64]	@ (800211c <HAL_RCC_OscConfig+0x478>)
 80020dc:	2200      	movs	r2, #0
 80020de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e0:	f7ff fb14 	bl	800170c <HAL_GetTick>
 80020e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020e6:	e008      	b.n	80020fa <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020e8:	f7ff fb10 	bl	800170c <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d901      	bls.n	80020fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e045      	b.n	8002186 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020fa:	4b06      	ldr	r3, [pc, #24]	@ (8002114 <HAL_RCC_OscConfig+0x470>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d1f0      	bne.n	80020e8 <HAL_RCC_OscConfig+0x444>
 8002106:	e03d      	b.n	8002184 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	699b      	ldr	r3, [r3, #24]
 800210c:	2b01      	cmp	r3, #1
 800210e:	d107      	bne.n	8002120 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e038      	b.n	8002186 <HAL_RCC_OscConfig+0x4e2>
 8002114:	40023800 	.word	0x40023800
 8002118:	40007000 	.word	0x40007000
 800211c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002120:	4b1b      	ldr	r3, [pc, #108]	@ (8002190 <HAL_RCC_OscConfig+0x4ec>)
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	699b      	ldr	r3, [r3, #24]
 800212a:	2b01      	cmp	r3, #1
 800212c:	d028      	beq.n	8002180 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002138:	429a      	cmp	r2, r3
 800213a:	d121      	bne.n	8002180 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002146:	429a      	cmp	r2, r3
 8002148:	d11a      	bne.n	8002180 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800214a:	68fa      	ldr	r2, [r7, #12]
 800214c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002150:	4013      	ands	r3, r2
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002156:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002158:	4293      	cmp	r3, r2
 800215a:	d111      	bne.n	8002180 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002166:	085b      	lsrs	r3, r3, #1
 8002168:	3b01      	subs	r3, #1
 800216a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800216c:	429a      	cmp	r2, r3
 800216e:	d107      	bne.n	8002180 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800217a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800217c:	429a      	cmp	r2, r3
 800217e:	d001      	beq.n	8002184 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e000      	b.n	8002186 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002184:	2300      	movs	r3, #0
}
 8002186:	4618      	mov	r0, r3
 8002188:	3718      	adds	r7, #24
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	40023800 	.word	0x40023800

08002194 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d101      	bne.n	80021a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e0cc      	b.n	8002342 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021a8:	4b68      	ldr	r3, [pc, #416]	@ (800234c <HAL_RCC_ClockConfig+0x1b8>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0307 	and.w	r3, r3, #7
 80021b0:	683a      	ldr	r2, [r7, #0]
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d90c      	bls.n	80021d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021b6:	4b65      	ldr	r3, [pc, #404]	@ (800234c <HAL_RCC_ClockConfig+0x1b8>)
 80021b8:	683a      	ldr	r2, [r7, #0]
 80021ba:	b2d2      	uxtb	r2, r2
 80021bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021be:	4b63      	ldr	r3, [pc, #396]	@ (800234c <HAL_RCC_ClockConfig+0x1b8>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0307 	and.w	r3, r3, #7
 80021c6:	683a      	ldr	r2, [r7, #0]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d001      	beq.n	80021d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e0b8      	b.n	8002342 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0302 	and.w	r3, r3, #2
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d020      	beq.n	800221e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0304 	and.w	r3, r3, #4
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d005      	beq.n	80021f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021e8:	4b59      	ldr	r3, [pc, #356]	@ (8002350 <HAL_RCC_ClockConfig+0x1bc>)
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	4a58      	ldr	r2, [pc, #352]	@ (8002350 <HAL_RCC_ClockConfig+0x1bc>)
 80021ee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80021f2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0308 	and.w	r3, r3, #8
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d005      	beq.n	800220c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002200:	4b53      	ldr	r3, [pc, #332]	@ (8002350 <HAL_RCC_ClockConfig+0x1bc>)
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	4a52      	ldr	r2, [pc, #328]	@ (8002350 <HAL_RCC_ClockConfig+0x1bc>)
 8002206:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800220a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800220c:	4b50      	ldr	r3, [pc, #320]	@ (8002350 <HAL_RCC_ClockConfig+0x1bc>)
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	494d      	ldr	r1, [pc, #308]	@ (8002350 <HAL_RCC_ClockConfig+0x1bc>)
 800221a:	4313      	orrs	r3, r2
 800221c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	2b00      	cmp	r3, #0
 8002228:	d044      	beq.n	80022b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	2b01      	cmp	r3, #1
 8002230:	d107      	bne.n	8002242 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002232:	4b47      	ldr	r3, [pc, #284]	@ (8002350 <HAL_RCC_ClockConfig+0x1bc>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d119      	bne.n	8002272 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e07f      	b.n	8002342 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	2b02      	cmp	r3, #2
 8002248:	d003      	beq.n	8002252 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800224e:	2b03      	cmp	r3, #3
 8002250:	d107      	bne.n	8002262 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002252:	4b3f      	ldr	r3, [pc, #252]	@ (8002350 <HAL_RCC_ClockConfig+0x1bc>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d109      	bne.n	8002272 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e06f      	b.n	8002342 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002262:	4b3b      	ldr	r3, [pc, #236]	@ (8002350 <HAL_RCC_ClockConfig+0x1bc>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0302 	and.w	r3, r3, #2
 800226a:	2b00      	cmp	r3, #0
 800226c:	d101      	bne.n	8002272 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e067      	b.n	8002342 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002272:	4b37      	ldr	r3, [pc, #220]	@ (8002350 <HAL_RCC_ClockConfig+0x1bc>)
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f023 0203 	bic.w	r2, r3, #3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	4934      	ldr	r1, [pc, #208]	@ (8002350 <HAL_RCC_ClockConfig+0x1bc>)
 8002280:	4313      	orrs	r3, r2
 8002282:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002284:	f7ff fa42 	bl	800170c <HAL_GetTick>
 8002288:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800228a:	e00a      	b.n	80022a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800228c:	f7ff fa3e 	bl	800170c <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	f241 3288 	movw	r2, #5000	@ 0x1388
 800229a:	4293      	cmp	r3, r2
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e04f      	b.n	8002342 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022a2:	4b2b      	ldr	r3, [pc, #172]	@ (8002350 <HAL_RCC_ClockConfig+0x1bc>)
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	f003 020c 	and.w	r2, r3, #12
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d1eb      	bne.n	800228c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022b4:	4b25      	ldr	r3, [pc, #148]	@ (800234c <HAL_RCC_ClockConfig+0x1b8>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0307 	and.w	r3, r3, #7
 80022bc:	683a      	ldr	r2, [r7, #0]
 80022be:	429a      	cmp	r2, r3
 80022c0:	d20c      	bcs.n	80022dc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022c2:	4b22      	ldr	r3, [pc, #136]	@ (800234c <HAL_RCC_ClockConfig+0x1b8>)
 80022c4:	683a      	ldr	r2, [r7, #0]
 80022c6:	b2d2      	uxtb	r2, r2
 80022c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ca:	4b20      	ldr	r3, [pc, #128]	@ (800234c <HAL_RCC_ClockConfig+0x1b8>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0307 	and.w	r3, r3, #7
 80022d2:	683a      	ldr	r2, [r7, #0]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d001      	beq.n	80022dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e032      	b.n	8002342 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0304 	and.w	r3, r3, #4
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d008      	beq.n	80022fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022e8:	4b19      	ldr	r3, [pc, #100]	@ (8002350 <HAL_RCC_ClockConfig+0x1bc>)
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	4916      	ldr	r1, [pc, #88]	@ (8002350 <HAL_RCC_ClockConfig+0x1bc>)
 80022f6:	4313      	orrs	r3, r2
 80022f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0308 	and.w	r3, r3, #8
 8002302:	2b00      	cmp	r3, #0
 8002304:	d009      	beq.n	800231a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002306:	4b12      	ldr	r3, [pc, #72]	@ (8002350 <HAL_RCC_ClockConfig+0x1bc>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	691b      	ldr	r3, [r3, #16]
 8002312:	00db      	lsls	r3, r3, #3
 8002314:	490e      	ldr	r1, [pc, #56]	@ (8002350 <HAL_RCC_ClockConfig+0x1bc>)
 8002316:	4313      	orrs	r3, r2
 8002318:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800231a:	f000 f821 	bl	8002360 <HAL_RCC_GetSysClockFreq>
 800231e:	4602      	mov	r2, r0
 8002320:	4b0b      	ldr	r3, [pc, #44]	@ (8002350 <HAL_RCC_ClockConfig+0x1bc>)
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	091b      	lsrs	r3, r3, #4
 8002326:	f003 030f 	and.w	r3, r3, #15
 800232a:	490a      	ldr	r1, [pc, #40]	@ (8002354 <HAL_RCC_ClockConfig+0x1c0>)
 800232c:	5ccb      	ldrb	r3, [r1, r3]
 800232e:	fa22 f303 	lsr.w	r3, r2, r3
 8002332:	4a09      	ldr	r2, [pc, #36]	@ (8002358 <HAL_RCC_ClockConfig+0x1c4>)
 8002334:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002336:	4b09      	ldr	r3, [pc, #36]	@ (800235c <HAL_RCC_ClockConfig+0x1c8>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4618      	mov	r0, r3
 800233c:	f7ff f9a2 	bl	8001684 <HAL_InitTick>

  return HAL_OK;
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	3710      	adds	r7, #16
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	40023c00 	.word	0x40023c00
 8002350:	40023800 	.word	0x40023800
 8002354:	080036f8 	.word	0x080036f8
 8002358:	20000004 	.word	0x20000004
 800235c:	20000008 	.word	0x20000008

08002360 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002360:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002364:	b094      	sub	sp, #80	@ 0x50
 8002366:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002368:	2300      	movs	r3, #0
 800236a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800236c:	2300      	movs	r3, #0
 800236e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002370:	2300      	movs	r3, #0
 8002372:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002374:	2300      	movs	r3, #0
 8002376:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002378:	4b79      	ldr	r3, [pc, #484]	@ (8002560 <HAL_RCC_GetSysClockFreq+0x200>)
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	f003 030c 	and.w	r3, r3, #12
 8002380:	2b08      	cmp	r3, #8
 8002382:	d00d      	beq.n	80023a0 <HAL_RCC_GetSysClockFreq+0x40>
 8002384:	2b08      	cmp	r3, #8
 8002386:	f200 80e1 	bhi.w	800254c <HAL_RCC_GetSysClockFreq+0x1ec>
 800238a:	2b00      	cmp	r3, #0
 800238c:	d002      	beq.n	8002394 <HAL_RCC_GetSysClockFreq+0x34>
 800238e:	2b04      	cmp	r3, #4
 8002390:	d003      	beq.n	800239a <HAL_RCC_GetSysClockFreq+0x3a>
 8002392:	e0db      	b.n	800254c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002394:	4b73      	ldr	r3, [pc, #460]	@ (8002564 <HAL_RCC_GetSysClockFreq+0x204>)
 8002396:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002398:	e0db      	b.n	8002552 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800239a:	4b73      	ldr	r3, [pc, #460]	@ (8002568 <HAL_RCC_GetSysClockFreq+0x208>)
 800239c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800239e:	e0d8      	b.n	8002552 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023a0:	4b6f      	ldr	r3, [pc, #444]	@ (8002560 <HAL_RCC_GetSysClockFreq+0x200>)
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80023a8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023aa:	4b6d      	ldr	r3, [pc, #436]	@ (8002560 <HAL_RCC_GetSysClockFreq+0x200>)
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d063      	beq.n	800247e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023b6:	4b6a      	ldr	r3, [pc, #424]	@ (8002560 <HAL_RCC_GetSysClockFreq+0x200>)
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	099b      	lsrs	r3, r3, #6
 80023bc:	2200      	movs	r2, #0
 80023be:	63bb      	str	r3, [r7, #56]	@ 0x38
 80023c0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80023c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80023ca:	2300      	movs	r3, #0
 80023cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80023ce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80023d2:	4622      	mov	r2, r4
 80023d4:	462b      	mov	r3, r5
 80023d6:	f04f 0000 	mov.w	r0, #0
 80023da:	f04f 0100 	mov.w	r1, #0
 80023de:	0159      	lsls	r1, r3, #5
 80023e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023e4:	0150      	lsls	r0, r2, #5
 80023e6:	4602      	mov	r2, r0
 80023e8:	460b      	mov	r3, r1
 80023ea:	4621      	mov	r1, r4
 80023ec:	1a51      	subs	r1, r2, r1
 80023ee:	6139      	str	r1, [r7, #16]
 80023f0:	4629      	mov	r1, r5
 80023f2:	eb63 0301 	sbc.w	r3, r3, r1
 80023f6:	617b      	str	r3, [r7, #20]
 80023f8:	f04f 0200 	mov.w	r2, #0
 80023fc:	f04f 0300 	mov.w	r3, #0
 8002400:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002404:	4659      	mov	r1, fp
 8002406:	018b      	lsls	r3, r1, #6
 8002408:	4651      	mov	r1, sl
 800240a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800240e:	4651      	mov	r1, sl
 8002410:	018a      	lsls	r2, r1, #6
 8002412:	4651      	mov	r1, sl
 8002414:	ebb2 0801 	subs.w	r8, r2, r1
 8002418:	4659      	mov	r1, fp
 800241a:	eb63 0901 	sbc.w	r9, r3, r1
 800241e:	f04f 0200 	mov.w	r2, #0
 8002422:	f04f 0300 	mov.w	r3, #0
 8002426:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800242a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800242e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002432:	4690      	mov	r8, r2
 8002434:	4699      	mov	r9, r3
 8002436:	4623      	mov	r3, r4
 8002438:	eb18 0303 	adds.w	r3, r8, r3
 800243c:	60bb      	str	r3, [r7, #8]
 800243e:	462b      	mov	r3, r5
 8002440:	eb49 0303 	adc.w	r3, r9, r3
 8002444:	60fb      	str	r3, [r7, #12]
 8002446:	f04f 0200 	mov.w	r2, #0
 800244a:	f04f 0300 	mov.w	r3, #0
 800244e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002452:	4629      	mov	r1, r5
 8002454:	024b      	lsls	r3, r1, #9
 8002456:	4621      	mov	r1, r4
 8002458:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800245c:	4621      	mov	r1, r4
 800245e:	024a      	lsls	r2, r1, #9
 8002460:	4610      	mov	r0, r2
 8002462:	4619      	mov	r1, r3
 8002464:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002466:	2200      	movs	r2, #0
 8002468:	62bb      	str	r3, [r7, #40]	@ 0x28
 800246a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800246c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002470:	f7fd feb2 	bl	80001d8 <__aeabi_uldivmod>
 8002474:	4602      	mov	r2, r0
 8002476:	460b      	mov	r3, r1
 8002478:	4613      	mov	r3, r2
 800247a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800247c:	e058      	b.n	8002530 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800247e:	4b38      	ldr	r3, [pc, #224]	@ (8002560 <HAL_RCC_GetSysClockFreq+0x200>)
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	099b      	lsrs	r3, r3, #6
 8002484:	2200      	movs	r2, #0
 8002486:	4618      	mov	r0, r3
 8002488:	4611      	mov	r1, r2
 800248a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800248e:	623b      	str	r3, [r7, #32]
 8002490:	2300      	movs	r3, #0
 8002492:	627b      	str	r3, [r7, #36]	@ 0x24
 8002494:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002498:	4642      	mov	r2, r8
 800249a:	464b      	mov	r3, r9
 800249c:	f04f 0000 	mov.w	r0, #0
 80024a0:	f04f 0100 	mov.w	r1, #0
 80024a4:	0159      	lsls	r1, r3, #5
 80024a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024aa:	0150      	lsls	r0, r2, #5
 80024ac:	4602      	mov	r2, r0
 80024ae:	460b      	mov	r3, r1
 80024b0:	4641      	mov	r1, r8
 80024b2:	ebb2 0a01 	subs.w	sl, r2, r1
 80024b6:	4649      	mov	r1, r9
 80024b8:	eb63 0b01 	sbc.w	fp, r3, r1
 80024bc:	f04f 0200 	mov.w	r2, #0
 80024c0:	f04f 0300 	mov.w	r3, #0
 80024c4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80024c8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80024cc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80024d0:	ebb2 040a 	subs.w	r4, r2, sl
 80024d4:	eb63 050b 	sbc.w	r5, r3, fp
 80024d8:	f04f 0200 	mov.w	r2, #0
 80024dc:	f04f 0300 	mov.w	r3, #0
 80024e0:	00eb      	lsls	r3, r5, #3
 80024e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80024e6:	00e2      	lsls	r2, r4, #3
 80024e8:	4614      	mov	r4, r2
 80024ea:	461d      	mov	r5, r3
 80024ec:	4643      	mov	r3, r8
 80024ee:	18e3      	adds	r3, r4, r3
 80024f0:	603b      	str	r3, [r7, #0]
 80024f2:	464b      	mov	r3, r9
 80024f4:	eb45 0303 	adc.w	r3, r5, r3
 80024f8:	607b      	str	r3, [r7, #4]
 80024fa:	f04f 0200 	mov.w	r2, #0
 80024fe:	f04f 0300 	mov.w	r3, #0
 8002502:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002506:	4629      	mov	r1, r5
 8002508:	028b      	lsls	r3, r1, #10
 800250a:	4621      	mov	r1, r4
 800250c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002510:	4621      	mov	r1, r4
 8002512:	028a      	lsls	r2, r1, #10
 8002514:	4610      	mov	r0, r2
 8002516:	4619      	mov	r1, r3
 8002518:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800251a:	2200      	movs	r2, #0
 800251c:	61bb      	str	r3, [r7, #24]
 800251e:	61fa      	str	r2, [r7, #28]
 8002520:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002524:	f7fd fe58 	bl	80001d8 <__aeabi_uldivmod>
 8002528:	4602      	mov	r2, r0
 800252a:	460b      	mov	r3, r1
 800252c:	4613      	mov	r3, r2
 800252e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002530:	4b0b      	ldr	r3, [pc, #44]	@ (8002560 <HAL_RCC_GetSysClockFreq+0x200>)
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	0c1b      	lsrs	r3, r3, #16
 8002536:	f003 0303 	and.w	r3, r3, #3
 800253a:	3301      	adds	r3, #1
 800253c:	005b      	lsls	r3, r3, #1
 800253e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002540:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002542:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002544:	fbb2 f3f3 	udiv	r3, r2, r3
 8002548:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800254a:	e002      	b.n	8002552 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800254c:	4b05      	ldr	r3, [pc, #20]	@ (8002564 <HAL_RCC_GetSysClockFreq+0x204>)
 800254e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002550:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002552:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002554:	4618      	mov	r0, r3
 8002556:	3750      	adds	r7, #80	@ 0x50
 8002558:	46bd      	mov	sp, r7
 800255a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800255e:	bf00      	nop
 8002560:	40023800 	.word	0x40023800
 8002564:	00f42400 	.word	0x00f42400
 8002568:	007a1200 	.word	0x007a1200

0800256c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b086      	sub	sp, #24
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002574:	2300      	movs	r3, #0
 8002576:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002578:	2300      	movs	r3, #0
 800257a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0301 	and.w	r3, r3, #1
 8002584:	2b00      	cmp	r3, #0
 8002586:	d105      	bne.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002590:	2b00      	cmp	r3, #0
 8002592:	d038      	beq.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002594:	4b68      	ldr	r3, [pc, #416]	@ (8002738 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002596:	2200      	movs	r2, #0
 8002598:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800259a:	f7ff f8b7 	bl	800170c <HAL_GetTick>
 800259e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80025a0:	e008      	b.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80025a2:	f7ff f8b3 	bl	800170c <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d901      	bls.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80025b0:	2303      	movs	r3, #3
 80025b2:	e0bd      	b.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80025b4:	4b61      	ldr	r3, [pc, #388]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d1f0      	bne.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	685a      	ldr	r2, [r3, #4]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	019b      	lsls	r3, r3, #6
 80025ca:	431a      	orrs	r2, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	071b      	lsls	r3, r3, #28
 80025d2:	495a      	ldr	r1, [pc, #360]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025d4:	4313      	orrs	r3, r2
 80025d6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80025da:	4b57      	ldr	r3, [pc, #348]	@ (8002738 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80025dc:	2201      	movs	r2, #1
 80025de:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80025e0:	f7ff f894 	bl	800170c <HAL_GetTick>
 80025e4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80025e6:	e008      	b.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80025e8:	f7ff f890 	bl	800170c <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d901      	bls.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e09a      	b.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80025fa:	4b50      	ldr	r3, [pc, #320]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d0f0      	beq.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	2b00      	cmp	r3, #0
 8002610:	f000 8083 	beq.w	800271a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002614:	2300      	movs	r3, #0
 8002616:	60fb      	str	r3, [r7, #12]
 8002618:	4b48      	ldr	r3, [pc, #288]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800261a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800261c:	4a47      	ldr	r2, [pc, #284]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800261e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002622:	6413      	str	r3, [r2, #64]	@ 0x40
 8002624:	4b45      	ldr	r3, [pc, #276]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002628:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800262c:	60fb      	str	r3, [r7, #12]
 800262e:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002630:	4b43      	ldr	r3, [pc, #268]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a42      	ldr	r2, [pc, #264]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002636:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800263a:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800263c:	f7ff f866 	bl	800170c <HAL_GetTick>
 8002640:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8002642:	e008      	b.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002644:	f7ff f862 	bl	800170c <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b02      	cmp	r3, #2
 8002650:	d901      	bls.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e06c      	b.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8002656:	4b3a      	ldr	r3, [pc, #232]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800265e:	2b00      	cmp	r3, #0
 8002660:	d0f0      	beq.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002662:	4b36      	ldr	r3, [pc, #216]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002664:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002666:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800266a:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d02f      	beq.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	691b      	ldr	r3, [r3, #16]
 8002676:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800267a:	693a      	ldr	r2, [r7, #16]
 800267c:	429a      	cmp	r2, r3
 800267e:	d028      	beq.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002680:	4b2e      	ldr	r3, [pc, #184]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002682:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002684:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002688:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800268a:	4b2e      	ldr	r3, [pc, #184]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800268c:	2201      	movs	r2, #1
 800268e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002690:	4b2c      	ldr	r3, [pc, #176]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002692:	2200      	movs	r2, #0
 8002694:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002696:	4a29      	ldr	r2, [pc, #164]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800269c:	4b27      	ldr	r3, [pc, #156]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800269e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026a0:	f003 0301 	and.w	r3, r3, #1
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d114      	bne.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80026a8:	f7ff f830 	bl	800170c <HAL_GetTick>
 80026ac:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026ae:	e00a      	b.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026b0:	f7ff f82c 	bl	800170c <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026be:	4293      	cmp	r3, r2
 80026c0:	d901      	bls.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e034      	b.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026c6:	4b1d      	ldr	r3, [pc, #116]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026ca:	f003 0302 	and.w	r3, r3, #2
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d0ee      	beq.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	691b      	ldr	r3, [r3, #16]
 80026d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80026da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80026de:	d10d      	bne.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x190>
 80026e0:	4b16      	ldr	r3, [pc, #88]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	691b      	ldr	r3, [r3, #16]
 80026ec:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80026f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026f4:	4911      	ldr	r1, [pc, #68]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026f6:	4313      	orrs	r3, r2
 80026f8:	608b      	str	r3, [r1, #8]
 80026fa:	e005      	b.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80026fc:	4b0f      	ldr	r3, [pc, #60]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	4a0e      	ldr	r2, [pc, #56]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002702:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002706:	6093      	str	r3, [r2, #8]
 8002708:	4b0c      	ldr	r3, [pc, #48]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800270a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	691b      	ldr	r3, [r3, #16]
 8002710:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002714:	4909      	ldr	r1, [pc, #36]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002716:	4313      	orrs	r3, r2
 8002718:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0308 	and.w	r3, r3, #8
 8002722:	2b00      	cmp	r3, #0
 8002724:	d003      	beq.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	7d1a      	ldrb	r2, [r3, #20]
 800272a:	4b07      	ldr	r3, [pc, #28]	@ (8002748 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800272c:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800272e:	2300      	movs	r3, #0
}
 8002730:	4618      	mov	r0, r3
 8002732:	3718      	adds	r7, #24
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}
 8002738:	42470068 	.word	0x42470068
 800273c:	40023800 	.word	0x40023800
 8002740:	40007000 	.word	0x40007000
 8002744:	42470e40 	.word	0x42470e40
 8002748:	424711e0 	.word	0x424711e0

0800274c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d101      	bne.n	800275e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e041      	b.n	80027e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002764:	b2db      	uxtb	r3, r3
 8002766:	2b00      	cmp	r3, #0
 8002768:	d106      	bne.n	8002778 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f7fe fdcc 	bl	8001310 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2202      	movs	r2, #2
 800277c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	3304      	adds	r3, #4
 8002788:	4619      	mov	r1, r3
 800278a:	4610      	mov	r0, r2
 800278c:	f000 fb66 	bl	8002e5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2201      	movs	r2, #1
 8002794:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2201      	movs	r2, #1
 800279c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2201      	movs	r2, #1
 80027a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2201      	movs	r2, #1
 80027ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2201      	movs	r2, #1
 80027b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2201      	movs	r2, #1
 80027bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2201      	movs	r2, #1
 80027c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2201      	movs	r2, #1
 80027cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2201      	movs	r2, #1
 80027dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80027e0:	2300      	movs	r3, #0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3708      	adds	r7, #8
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
	...

080027ec <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b085      	sub	sp, #20
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d001      	beq.n	8002804 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e03c      	b.n	800287e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2202      	movs	r2, #2
 8002808:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a1e      	ldr	r2, [pc, #120]	@ (800288c <HAL_TIM_Base_Start+0xa0>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d018      	beq.n	8002848 <HAL_TIM_Base_Start+0x5c>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800281e:	d013      	beq.n	8002848 <HAL_TIM_Base_Start+0x5c>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a1a      	ldr	r2, [pc, #104]	@ (8002890 <HAL_TIM_Base_Start+0xa4>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d00e      	beq.n	8002848 <HAL_TIM_Base_Start+0x5c>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a19      	ldr	r2, [pc, #100]	@ (8002894 <HAL_TIM_Base_Start+0xa8>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d009      	beq.n	8002848 <HAL_TIM_Base_Start+0x5c>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a17      	ldr	r2, [pc, #92]	@ (8002898 <HAL_TIM_Base_Start+0xac>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d004      	beq.n	8002848 <HAL_TIM_Base_Start+0x5c>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a16      	ldr	r2, [pc, #88]	@ (800289c <HAL_TIM_Base_Start+0xb0>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d111      	bne.n	800286c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f003 0307 	and.w	r3, r3, #7
 8002852:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2b06      	cmp	r3, #6
 8002858:	d010      	beq.n	800287c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f042 0201 	orr.w	r2, r2, #1
 8002868:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800286a:	e007      	b.n	800287c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f042 0201 	orr.w	r2, r2, #1
 800287a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3714      	adds	r7, #20
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	40010000 	.word	0x40010000
 8002890:	40000400 	.word	0x40000400
 8002894:	40000800 	.word	0x40000800
 8002898:	40000c00 	.word	0x40000c00
 800289c:	40014000 	.word	0x40014000

080028a0 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	6a1a      	ldr	r2, [r3, #32]
 80028ae:	f241 1311 	movw	r3, #4369	@ 0x1111
 80028b2:	4013      	ands	r3, r2
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d10f      	bne.n	80028d8 <HAL_TIM_Base_Stop+0x38>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	6a1a      	ldr	r2, [r3, #32]
 80028be:	f240 4344 	movw	r3, #1092	@ 0x444
 80028c2:	4013      	ands	r3, r2
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d107      	bne.n	80028d8 <HAL_TIM_Base_Stop+0x38>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f022 0201 	bic.w	r2, r2, #1
 80028d6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80028e0:	2300      	movs	r3, #0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	370c      	adds	r7, #12
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr

080028ee <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80028ee:	b580      	push	{r7, lr}
 80028f0:	b082      	sub	sp, #8
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d101      	bne.n	8002900 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e041      	b.n	8002984 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002906:	b2db      	uxtb	r3, r3
 8002908:	2b00      	cmp	r3, #0
 800290a:	d106      	bne.n	800291a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f7fe fc73 	bl	8001200 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2202      	movs	r2, #2
 800291e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	3304      	adds	r3, #4
 800292a:	4619      	mov	r1, r3
 800292c:	4610      	mov	r0, r2
 800292e:	f000 fa95 	bl	8002e5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2201      	movs	r2, #1
 8002936:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2201      	movs	r2, #1
 800293e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2201      	movs	r2, #1
 8002946:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2201      	movs	r2, #1
 800294e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2201      	movs	r2, #1
 8002956:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2201      	movs	r2, #1
 800295e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2201      	movs	r2, #1
 8002966:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2201      	movs	r2, #1
 800296e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2201      	movs	r2, #1
 8002976:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2201      	movs	r2, #1
 800297e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002982:	2300      	movs	r3, #0
}
 8002984:	4618      	mov	r0, r3
 8002986:	3708      	adds	r7, #8
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}

0800298c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d109      	bne.n	80029b0 <HAL_TIM_PWM_Start+0x24>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	bf14      	ite	ne
 80029a8:	2301      	movne	r3, #1
 80029aa:	2300      	moveq	r3, #0
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	e022      	b.n	80029f6 <HAL_TIM_PWM_Start+0x6a>
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	2b04      	cmp	r3, #4
 80029b4:	d109      	bne.n	80029ca <HAL_TIM_PWM_Start+0x3e>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	2b01      	cmp	r3, #1
 80029c0:	bf14      	ite	ne
 80029c2:	2301      	movne	r3, #1
 80029c4:	2300      	moveq	r3, #0
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	e015      	b.n	80029f6 <HAL_TIM_PWM_Start+0x6a>
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	2b08      	cmp	r3, #8
 80029ce:	d109      	bne.n	80029e4 <HAL_TIM_PWM_Start+0x58>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	2b01      	cmp	r3, #1
 80029da:	bf14      	ite	ne
 80029dc:	2301      	movne	r3, #1
 80029de:	2300      	moveq	r3, #0
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	e008      	b.n	80029f6 <HAL_TIM_PWM_Start+0x6a>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	bf14      	ite	ne
 80029f0:	2301      	movne	r3, #1
 80029f2:	2300      	moveq	r3, #0
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d001      	beq.n	80029fe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e068      	b.n	8002ad0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d104      	bne.n	8002a0e <HAL_TIM_PWM_Start+0x82>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2202      	movs	r2, #2
 8002a08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002a0c:	e013      	b.n	8002a36 <HAL_TIM_PWM_Start+0xaa>
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	2b04      	cmp	r3, #4
 8002a12:	d104      	bne.n	8002a1e <HAL_TIM_PWM_Start+0x92>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2202      	movs	r2, #2
 8002a18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002a1c:	e00b      	b.n	8002a36 <HAL_TIM_PWM_Start+0xaa>
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	2b08      	cmp	r3, #8
 8002a22:	d104      	bne.n	8002a2e <HAL_TIM_PWM_Start+0xa2>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2202      	movs	r2, #2
 8002a28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002a2c:	e003      	b.n	8002a36 <HAL_TIM_PWM_Start+0xaa>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2202      	movs	r2, #2
 8002a32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	6839      	ldr	r1, [r7, #0]
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f000 fd3c 	bl	80034bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a23      	ldr	r2, [pc, #140]	@ (8002ad8 <HAL_TIM_PWM_Start+0x14c>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d107      	bne.n	8002a5e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002a5c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a1d      	ldr	r2, [pc, #116]	@ (8002ad8 <HAL_TIM_PWM_Start+0x14c>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d018      	beq.n	8002a9a <HAL_TIM_PWM_Start+0x10e>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a70:	d013      	beq.n	8002a9a <HAL_TIM_PWM_Start+0x10e>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a19      	ldr	r2, [pc, #100]	@ (8002adc <HAL_TIM_PWM_Start+0x150>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d00e      	beq.n	8002a9a <HAL_TIM_PWM_Start+0x10e>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a17      	ldr	r2, [pc, #92]	@ (8002ae0 <HAL_TIM_PWM_Start+0x154>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d009      	beq.n	8002a9a <HAL_TIM_PWM_Start+0x10e>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a16      	ldr	r2, [pc, #88]	@ (8002ae4 <HAL_TIM_PWM_Start+0x158>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d004      	beq.n	8002a9a <HAL_TIM_PWM_Start+0x10e>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a14      	ldr	r2, [pc, #80]	@ (8002ae8 <HAL_TIM_PWM_Start+0x15c>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d111      	bne.n	8002abe <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	f003 0307 	and.w	r3, r3, #7
 8002aa4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2b06      	cmp	r3, #6
 8002aaa:	d010      	beq.n	8002ace <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f042 0201 	orr.w	r2, r2, #1
 8002aba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002abc:	e007      	b.n	8002ace <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f042 0201 	orr.w	r2, r2, #1
 8002acc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ace:	2300      	movs	r3, #0
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3710      	adds	r7, #16
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	40010000 	.word	0x40010000
 8002adc:	40000400 	.word	0x40000400
 8002ae0:	40000800 	.word	0x40000800
 8002ae4:	40000c00 	.word	0x40000c00
 8002ae8:	40014000 	.word	0x40014000

08002aec <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d101      	bne.n	8002afe <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e041      	b.n	8002b82 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d106      	bne.n	8002b18 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f000 f839 	bl	8002b8a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2202      	movs	r2, #2
 8002b1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	3304      	adds	r3, #4
 8002b28:	4619      	mov	r1, r3
 8002b2a:	4610      	mov	r0, r2
 8002b2c:	f000 f996 	bl	8002e5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2201      	movs	r2, #1
 8002b34:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2201      	movs	r2, #1
 8002b44:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002b80:	2300      	movs	r3, #0
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3708      	adds	r7, #8
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}

08002b8a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002b8a:	b480      	push	{r7}
 8002b8c:	b083      	sub	sp, #12
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002b92:	bf00      	nop
 8002b94:	370c      	adds	r7, #12
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr

08002b9e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002b9e:	b580      	push	{r7, lr}
 8002ba0:	b086      	sub	sp, #24
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	60f8      	str	r0, [r7, #12]
 8002ba6:	60b9      	str	r1, [r7, #8]
 8002ba8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002baa:	2300      	movs	r3, #0
 8002bac:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d101      	bne.n	8002bbc <HAL_TIM_IC_ConfigChannel+0x1e>
 8002bb8:	2302      	movs	r3, #2
 8002bba:	e088      	b.n	8002cce <HAL_TIM_IC_ConfigChannel+0x130>
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d11b      	bne.n	8002c02 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8002bda:	f000 fb51 	bl	8003280 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	699a      	ldr	r2, [r3, #24]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f022 020c 	bic.w	r2, r2, #12
 8002bec:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	6999      	ldr	r1, [r3, #24]
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	689a      	ldr	r2, [r3, #8]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	430a      	orrs	r2, r1
 8002bfe:	619a      	str	r2, [r3, #24]
 8002c00:	e060      	b.n	8002cc4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2b04      	cmp	r3, #4
 8002c06:	d11c      	bne.n	8002c42 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8002c18:	f000 fb9a 	bl	8003350 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	699a      	ldr	r2, [r3, #24]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002c2a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	6999      	ldr	r1, [r3, #24]
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	021a      	lsls	r2, r3, #8
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	430a      	orrs	r2, r1
 8002c3e:	619a      	str	r2, [r3, #24]
 8002c40:	e040      	b.n	8002cc4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2b08      	cmp	r3, #8
 8002c46:	d11b      	bne.n	8002c80 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8002c58:	f000 fbb7 	bl	80033ca <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	69da      	ldr	r2, [r3, #28]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f022 020c 	bic.w	r2, r2, #12
 8002c6a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	69d9      	ldr	r1, [r3, #28]
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	689a      	ldr	r2, [r3, #8]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	430a      	orrs	r2, r1
 8002c7c:	61da      	str	r2, [r3, #28]
 8002c7e:	e021      	b.n	8002cc4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2b0c      	cmp	r3, #12
 8002c84:	d11c      	bne.n	8002cc0 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8002c96:	f000 fbd4 	bl	8003442 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	69da      	ldr	r2, [r3, #28]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002ca8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	69d9      	ldr	r1, [r3, #28]
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	021a      	lsls	r2, r3, #8
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	430a      	orrs	r2, r1
 8002cbc:	61da      	str	r2, [r3, #28]
 8002cbe:	e001      	b.n	8002cc4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002ccc:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3718      	adds	r7, #24
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
	...

08002cd8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b086      	sub	sp, #24
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	60b9      	str	r1, [r7, #8]
 8002ce2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d101      	bne.n	8002cf6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002cf2:	2302      	movs	r3, #2
 8002cf4:	e0ae      	b.n	8002e54 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2b0c      	cmp	r3, #12
 8002d02:	f200 809f 	bhi.w	8002e44 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002d06:	a201      	add	r2, pc, #4	@ (adr r2, 8002d0c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d0c:	08002d41 	.word	0x08002d41
 8002d10:	08002e45 	.word	0x08002e45
 8002d14:	08002e45 	.word	0x08002e45
 8002d18:	08002e45 	.word	0x08002e45
 8002d1c:	08002d81 	.word	0x08002d81
 8002d20:	08002e45 	.word	0x08002e45
 8002d24:	08002e45 	.word	0x08002e45
 8002d28:	08002e45 	.word	0x08002e45
 8002d2c:	08002dc3 	.word	0x08002dc3
 8002d30:	08002e45 	.word	0x08002e45
 8002d34:	08002e45 	.word	0x08002e45
 8002d38:	08002e45 	.word	0x08002e45
 8002d3c:	08002e03 	.word	0x08002e03
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	68b9      	ldr	r1, [r7, #8]
 8002d46:	4618      	mov	r0, r3
 8002d48:	f000 f90e 	bl	8002f68 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	699a      	ldr	r2, [r3, #24]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f042 0208 	orr.w	r2, r2, #8
 8002d5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	699a      	ldr	r2, [r3, #24]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f022 0204 	bic.w	r2, r2, #4
 8002d6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	6999      	ldr	r1, [r3, #24]
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	691a      	ldr	r2, [r3, #16]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	430a      	orrs	r2, r1
 8002d7c:	619a      	str	r2, [r3, #24]
      break;
 8002d7e:	e064      	b.n	8002e4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	68b9      	ldr	r1, [r7, #8]
 8002d86:	4618      	mov	r0, r3
 8002d88:	f000 f954 	bl	8003034 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	699a      	ldr	r2, [r3, #24]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	699a      	ldr	r2, [r3, #24]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002daa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	6999      	ldr	r1, [r3, #24]
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	691b      	ldr	r3, [r3, #16]
 8002db6:	021a      	lsls	r2, r3, #8
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	430a      	orrs	r2, r1
 8002dbe:	619a      	str	r2, [r3, #24]
      break;
 8002dc0:	e043      	b.n	8002e4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	68b9      	ldr	r1, [r7, #8]
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f000 f99f 	bl	800310c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	69da      	ldr	r2, [r3, #28]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f042 0208 	orr.w	r2, r2, #8
 8002ddc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	69da      	ldr	r2, [r3, #28]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f022 0204 	bic.w	r2, r2, #4
 8002dec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	69d9      	ldr	r1, [r3, #28]
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	691a      	ldr	r2, [r3, #16]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	430a      	orrs	r2, r1
 8002dfe:	61da      	str	r2, [r3, #28]
      break;
 8002e00:	e023      	b.n	8002e4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	68b9      	ldr	r1, [r7, #8]
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f000 f9e9 	bl	80031e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	69da      	ldr	r2, [r3, #28]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002e1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	69da      	ldr	r2, [r3, #28]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	69d9      	ldr	r1, [r3, #28]
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	691b      	ldr	r3, [r3, #16]
 8002e38:	021a      	lsls	r2, r3, #8
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	430a      	orrs	r2, r1
 8002e40:	61da      	str	r2, [r3, #28]
      break;
 8002e42:	e002      	b.n	8002e4a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	75fb      	strb	r3, [r7, #23]
      break;
 8002e48:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002e52:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3718      	adds	r7, #24
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b085      	sub	sp, #20
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	4a37      	ldr	r2, [pc, #220]	@ (8002f4c <TIM_Base_SetConfig+0xf0>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d00f      	beq.n	8002e94 <TIM_Base_SetConfig+0x38>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e7a:	d00b      	beq.n	8002e94 <TIM_Base_SetConfig+0x38>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	4a34      	ldr	r2, [pc, #208]	@ (8002f50 <TIM_Base_SetConfig+0xf4>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d007      	beq.n	8002e94 <TIM_Base_SetConfig+0x38>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	4a33      	ldr	r2, [pc, #204]	@ (8002f54 <TIM_Base_SetConfig+0xf8>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d003      	beq.n	8002e94 <TIM_Base_SetConfig+0x38>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	4a32      	ldr	r2, [pc, #200]	@ (8002f58 <TIM_Base_SetConfig+0xfc>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d108      	bne.n	8002ea6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	68fa      	ldr	r2, [r7, #12]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4a28      	ldr	r2, [pc, #160]	@ (8002f4c <TIM_Base_SetConfig+0xf0>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d01b      	beq.n	8002ee6 <TIM_Base_SetConfig+0x8a>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002eb4:	d017      	beq.n	8002ee6 <TIM_Base_SetConfig+0x8a>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4a25      	ldr	r2, [pc, #148]	@ (8002f50 <TIM_Base_SetConfig+0xf4>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d013      	beq.n	8002ee6 <TIM_Base_SetConfig+0x8a>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a24      	ldr	r2, [pc, #144]	@ (8002f54 <TIM_Base_SetConfig+0xf8>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d00f      	beq.n	8002ee6 <TIM_Base_SetConfig+0x8a>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a23      	ldr	r2, [pc, #140]	@ (8002f58 <TIM_Base_SetConfig+0xfc>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d00b      	beq.n	8002ee6 <TIM_Base_SetConfig+0x8a>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4a22      	ldr	r2, [pc, #136]	@ (8002f5c <TIM_Base_SetConfig+0x100>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d007      	beq.n	8002ee6 <TIM_Base_SetConfig+0x8a>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a21      	ldr	r2, [pc, #132]	@ (8002f60 <TIM_Base_SetConfig+0x104>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d003      	beq.n	8002ee6 <TIM_Base_SetConfig+0x8a>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a20      	ldr	r2, [pc, #128]	@ (8002f64 <TIM_Base_SetConfig+0x108>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d108      	bne.n	8002ef8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002eec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	68fa      	ldr	r2, [r7, #12]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	695b      	ldr	r3, [r3, #20]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	689a      	ldr	r2, [r3, #8]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a0c      	ldr	r2, [pc, #48]	@ (8002f4c <TIM_Base_SetConfig+0xf0>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d103      	bne.n	8002f26 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	691a      	ldr	r2, [r3, #16]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f043 0204 	orr.w	r2, r3, #4
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2201      	movs	r2, #1
 8002f36:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	68fa      	ldr	r2, [r7, #12]
 8002f3c:	601a      	str	r2, [r3, #0]
}
 8002f3e:	bf00      	nop
 8002f40:	3714      	adds	r7, #20
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr
 8002f4a:	bf00      	nop
 8002f4c:	40010000 	.word	0x40010000
 8002f50:	40000400 	.word	0x40000400
 8002f54:	40000800 	.word	0x40000800
 8002f58:	40000c00 	.word	0x40000c00
 8002f5c:	40014000 	.word	0x40014000
 8002f60:	40014400 	.word	0x40014400
 8002f64:	40014800 	.word	0x40014800

08002f68 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b087      	sub	sp, #28
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a1b      	ldr	r3, [r3, #32]
 8002f76:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6a1b      	ldr	r3, [r3, #32]
 8002f7c:	f023 0201 	bic.w	r2, r3, #1
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f023 0303 	bic.w	r3, r3, #3
 8002f9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	68fa      	ldr	r2, [r7, #12]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	f023 0302 	bic.w	r3, r3, #2
 8002fb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	697a      	ldr	r2, [r7, #20]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	4a1c      	ldr	r2, [pc, #112]	@ (8003030 <TIM_OC1_SetConfig+0xc8>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d10c      	bne.n	8002fde <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	f023 0308 	bic.w	r3, r3, #8
 8002fca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	697a      	ldr	r2, [r7, #20]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	f023 0304 	bic.w	r3, r3, #4
 8002fdc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a13      	ldr	r2, [pc, #76]	@ (8003030 <TIM_OC1_SetConfig+0xc8>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d111      	bne.n	800300a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002fec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002ff4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	695b      	ldr	r3, [r3, #20]
 8002ffa:	693a      	ldr	r2, [r7, #16]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	699b      	ldr	r3, [r3, #24]
 8003004:	693a      	ldr	r2, [r7, #16]
 8003006:	4313      	orrs	r3, r2
 8003008:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	693a      	ldr	r2, [r7, #16]
 800300e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	68fa      	ldr	r2, [r7, #12]
 8003014:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	685a      	ldr	r2, [r3, #4]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	697a      	ldr	r2, [r7, #20]
 8003022:	621a      	str	r2, [r3, #32]
}
 8003024:	bf00      	nop
 8003026:	371c      	adds	r7, #28
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr
 8003030:	40010000 	.word	0x40010000

08003034 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003034:	b480      	push	{r7}
 8003036:	b087      	sub	sp, #28
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6a1b      	ldr	r3, [r3, #32]
 8003042:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6a1b      	ldr	r3, [r3, #32]
 8003048:	f023 0210 	bic.w	r2, r3, #16
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	699b      	ldr	r3, [r3, #24]
 800305a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003062:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800306a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	021b      	lsls	r3, r3, #8
 8003072:	68fa      	ldr	r2, [r7, #12]
 8003074:	4313      	orrs	r3, r2
 8003076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	f023 0320 	bic.w	r3, r3, #32
 800307e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	011b      	lsls	r3, r3, #4
 8003086:	697a      	ldr	r2, [r7, #20]
 8003088:	4313      	orrs	r3, r2
 800308a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	4a1e      	ldr	r2, [pc, #120]	@ (8003108 <TIM_OC2_SetConfig+0xd4>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d10d      	bne.n	80030b0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800309a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	011b      	lsls	r3, r3, #4
 80030a2:	697a      	ldr	r2, [r7, #20]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80030ae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	4a15      	ldr	r2, [pc, #84]	@ (8003108 <TIM_OC2_SetConfig+0xd4>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d113      	bne.n	80030e0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80030be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80030c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	695b      	ldr	r3, [r3, #20]
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	693a      	ldr	r2, [r7, #16]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	699b      	ldr	r3, [r3, #24]
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	693a      	ldr	r2, [r7, #16]
 80030dc:	4313      	orrs	r3, r2
 80030de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	693a      	ldr	r2, [r7, #16]
 80030e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	68fa      	ldr	r2, [r7, #12]
 80030ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	685a      	ldr	r2, [r3, #4]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	697a      	ldr	r2, [r7, #20]
 80030f8:	621a      	str	r2, [r3, #32]
}
 80030fa:	bf00      	nop
 80030fc:	371c      	adds	r7, #28
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr
 8003106:	bf00      	nop
 8003108:	40010000 	.word	0x40010000

0800310c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800310c:	b480      	push	{r7}
 800310e:	b087      	sub	sp, #28
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a1b      	ldr	r3, [r3, #32]
 800311a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a1b      	ldr	r3, [r3, #32]
 8003120:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	69db      	ldr	r3, [r3, #28]
 8003132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800313a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f023 0303 	bic.w	r3, r3, #3
 8003142:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	68fa      	ldr	r2, [r7, #12]
 800314a:	4313      	orrs	r3, r2
 800314c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003154:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	021b      	lsls	r3, r3, #8
 800315c:	697a      	ldr	r2, [r7, #20]
 800315e:	4313      	orrs	r3, r2
 8003160:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a1d      	ldr	r2, [pc, #116]	@ (80031dc <TIM_OC3_SetConfig+0xd0>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d10d      	bne.n	8003186 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003170:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	68db      	ldr	r3, [r3, #12]
 8003176:	021b      	lsls	r3, r3, #8
 8003178:	697a      	ldr	r2, [r7, #20]
 800317a:	4313      	orrs	r3, r2
 800317c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003184:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a14      	ldr	r2, [pc, #80]	@ (80031dc <TIM_OC3_SetConfig+0xd0>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d113      	bne.n	80031b6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003194:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800319c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	695b      	ldr	r3, [r3, #20]
 80031a2:	011b      	lsls	r3, r3, #4
 80031a4:	693a      	ldr	r2, [r7, #16]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	699b      	ldr	r3, [r3, #24]
 80031ae:	011b      	lsls	r3, r3, #4
 80031b0:	693a      	ldr	r2, [r7, #16]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	693a      	ldr	r2, [r7, #16]
 80031ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	68fa      	ldr	r2, [r7, #12]
 80031c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	685a      	ldr	r2, [r3, #4]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	697a      	ldr	r2, [r7, #20]
 80031ce:	621a      	str	r2, [r3, #32]
}
 80031d0:	bf00      	nop
 80031d2:	371c      	adds	r7, #28
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr
 80031dc:	40010000 	.word	0x40010000

080031e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b087      	sub	sp, #28
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a1b      	ldr	r3, [r3, #32]
 80031ee:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6a1b      	ldr	r3, [r3, #32]
 80031f4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	69db      	ldr	r3, [r3, #28]
 8003206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800320e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003216:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	021b      	lsls	r3, r3, #8
 800321e:	68fa      	ldr	r2, [r7, #12]
 8003220:	4313      	orrs	r3, r2
 8003222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800322a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	031b      	lsls	r3, r3, #12
 8003232:	693a      	ldr	r2, [r7, #16]
 8003234:	4313      	orrs	r3, r2
 8003236:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	4a10      	ldr	r2, [pc, #64]	@ (800327c <TIM_OC4_SetConfig+0x9c>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d109      	bne.n	8003254 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003246:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	695b      	ldr	r3, [r3, #20]
 800324c:	019b      	lsls	r3, r3, #6
 800324e:	697a      	ldr	r2, [r7, #20]
 8003250:	4313      	orrs	r3, r2
 8003252:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	697a      	ldr	r2, [r7, #20]
 8003258:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	68fa      	ldr	r2, [r7, #12]
 800325e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	685a      	ldr	r2, [r3, #4]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	693a      	ldr	r2, [r7, #16]
 800326c:	621a      	str	r2, [r3, #32]
}
 800326e:	bf00      	nop
 8003270:	371c      	adds	r7, #28
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	40010000 	.word	0x40010000

08003280 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003280:	b480      	push	{r7}
 8003282:	b087      	sub	sp, #28
 8003284:	af00      	add	r7, sp, #0
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	607a      	str	r2, [r7, #4]
 800328c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6a1b      	ldr	r3, [r3, #32]
 8003292:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6a1b      	ldr	r3, [r3, #32]
 8003298:	f023 0201 	bic.w	r2, r3, #1
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	699b      	ldr	r3, [r3, #24]
 80032a4:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	4a24      	ldr	r2, [pc, #144]	@ (800333c <TIM_TI1_SetConfig+0xbc>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d013      	beq.n	80032d6 <TIM_TI1_SetConfig+0x56>
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032b4:	d00f      	beq.n	80032d6 <TIM_TI1_SetConfig+0x56>
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	4a21      	ldr	r2, [pc, #132]	@ (8003340 <TIM_TI1_SetConfig+0xc0>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d00b      	beq.n	80032d6 <TIM_TI1_SetConfig+0x56>
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	4a20      	ldr	r2, [pc, #128]	@ (8003344 <TIM_TI1_SetConfig+0xc4>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d007      	beq.n	80032d6 <TIM_TI1_SetConfig+0x56>
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	4a1f      	ldr	r2, [pc, #124]	@ (8003348 <TIM_TI1_SetConfig+0xc8>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d003      	beq.n	80032d6 <TIM_TI1_SetConfig+0x56>
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	4a1e      	ldr	r2, [pc, #120]	@ (800334c <TIM_TI1_SetConfig+0xcc>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d101      	bne.n	80032da <TIM_TI1_SetConfig+0x5a>
 80032d6:	2301      	movs	r3, #1
 80032d8:	e000      	b.n	80032dc <TIM_TI1_SetConfig+0x5c>
 80032da:	2300      	movs	r3, #0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d008      	beq.n	80032f2 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	f023 0303 	bic.w	r3, r3, #3
 80032e6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80032e8:	697a      	ldr	r2, [r7, #20]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	617b      	str	r3, [r7, #20]
 80032f0:	e003      	b.n	80032fa <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	f043 0301 	orr.w	r3, r3, #1
 80032f8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003300:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	011b      	lsls	r3, r3, #4
 8003306:	b2db      	uxtb	r3, r3
 8003308:	697a      	ldr	r2, [r7, #20]
 800330a:	4313      	orrs	r3, r2
 800330c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	f023 030a 	bic.w	r3, r3, #10
 8003314:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	f003 030a 	and.w	r3, r3, #10
 800331c:	693a      	ldr	r2, [r7, #16]
 800331e:	4313      	orrs	r3, r2
 8003320:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	697a      	ldr	r2, [r7, #20]
 8003326:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	693a      	ldr	r2, [r7, #16]
 800332c:	621a      	str	r2, [r3, #32]
}
 800332e:	bf00      	nop
 8003330:	371c      	adds	r7, #28
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr
 800333a:	bf00      	nop
 800333c:	40010000 	.word	0x40010000
 8003340:	40000400 	.word	0x40000400
 8003344:	40000800 	.word	0x40000800
 8003348:	40000c00 	.word	0x40000c00
 800334c:	40014000 	.word	0x40014000

08003350 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003350:	b480      	push	{r7}
 8003352:	b087      	sub	sp, #28
 8003354:	af00      	add	r7, sp, #0
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	60b9      	str	r1, [r7, #8]
 800335a:	607a      	str	r2, [r7, #4]
 800335c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6a1b      	ldr	r3, [r3, #32]
 8003362:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6a1b      	ldr	r3, [r3, #32]
 8003368:	f023 0210 	bic.w	r2, r3, #16
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	699b      	ldr	r3, [r3, #24]
 8003374:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800337c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	021b      	lsls	r3, r3, #8
 8003382:	693a      	ldr	r2, [r7, #16]
 8003384:	4313      	orrs	r3, r2
 8003386:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800338e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	031b      	lsls	r3, r3, #12
 8003394:	b29b      	uxth	r3, r3
 8003396:	693a      	ldr	r2, [r7, #16]
 8003398:	4313      	orrs	r3, r2
 800339a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80033a2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	011b      	lsls	r3, r3, #4
 80033a8:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80033ac:	697a      	ldr	r2, [r7, #20]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	693a      	ldr	r2, [r7, #16]
 80033b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	697a      	ldr	r2, [r7, #20]
 80033bc:	621a      	str	r2, [r3, #32]
}
 80033be:	bf00      	nop
 80033c0:	371c      	adds	r7, #28
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr

080033ca <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80033ca:	b480      	push	{r7}
 80033cc:	b087      	sub	sp, #28
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	60f8      	str	r0, [r7, #12]
 80033d2:	60b9      	str	r1, [r7, #8]
 80033d4:	607a      	str	r2, [r7, #4]
 80033d6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6a1b      	ldr	r3, [r3, #32]
 80033dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6a1b      	ldr	r3, [r3, #32]
 80033e2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	69db      	ldr	r3, [r3, #28]
 80033ee:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	f023 0303 	bic.w	r3, r3, #3
 80033f6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80033f8:	693a      	ldr	r2, [r7, #16]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003406:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	011b      	lsls	r3, r3, #4
 800340c:	b2db      	uxtb	r3, r3
 800340e:	693a      	ldr	r2, [r7, #16]
 8003410:	4313      	orrs	r3, r2
 8003412:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800341a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	021b      	lsls	r3, r3, #8
 8003420:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8003424:	697a      	ldr	r2, [r7, #20]
 8003426:	4313      	orrs	r3, r2
 8003428:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	693a      	ldr	r2, [r7, #16]
 800342e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	697a      	ldr	r2, [r7, #20]
 8003434:	621a      	str	r2, [r3, #32]
}
 8003436:	bf00      	nop
 8003438:	371c      	adds	r7, #28
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr

08003442 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003442:	b480      	push	{r7}
 8003444:	b087      	sub	sp, #28
 8003446:	af00      	add	r7, sp, #0
 8003448:	60f8      	str	r0, [r7, #12]
 800344a:	60b9      	str	r1, [r7, #8]
 800344c:	607a      	str	r2, [r7, #4]
 800344e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6a1b      	ldr	r3, [r3, #32]
 8003454:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6a1b      	ldr	r3, [r3, #32]
 800345a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	69db      	ldr	r3, [r3, #28]
 8003466:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800346e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	021b      	lsls	r3, r3, #8
 8003474:	693a      	ldr	r2, [r7, #16]
 8003476:	4313      	orrs	r3, r2
 8003478:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003480:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	031b      	lsls	r3, r3, #12
 8003486:	b29b      	uxth	r3, r3
 8003488:	693a      	ldr	r2, [r7, #16]
 800348a:	4313      	orrs	r3, r2
 800348c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8003494:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	031b      	lsls	r3, r3, #12
 800349a:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800349e:	697a      	ldr	r2, [r7, #20]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	693a      	ldr	r2, [r7, #16]
 80034a8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	697a      	ldr	r2, [r7, #20]
 80034ae:	621a      	str	r2, [r3, #32]
}
 80034b0:	bf00      	nop
 80034b2:	371c      	adds	r7, #28
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80034bc:	b480      	push	{r7}
 80034be:	b087      	sub	sp, #28
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	60f8      	str	r0, [r7, #12]
 80034c4:	60b9      	str	r1, [r7, #8]
 80034c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	f003 031f 	and.w	r3, r3, #31
 80034ce:	2201      	movs	r2, #1
 80034d0:	fa02 f303 	lsl.w	r3, r2, r3
 80034d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	6a1a      	ldr	r2, [r3, #32]
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	43db      	mvns	r3, r3
 80034de:	401a      	ands	r2, r3
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6a1a      	ldr	r2, [r3, #32]
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	f003 031f 	and.w	r3, r3, #31
 80034ee:	6879      	ldr	r1, [r7, #4]
 80034f0:	fa01 f303 	lsl.w	r3, r1, r3
 80034f4:	431a      	orrs	r2, r3
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	621a      	str	r2, [r3, #32]
}
 80034fa:	bf00      	nop
 80034fc:	371c      	adds	r7, #28
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr
	...

08003508 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003508:	b480      	push	{r7}
 800350a:	b085      	sub	sp, #20
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003518:	2b01      	cmp	r3, #1
 800351a:	d101      	bne.n	8003520 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800351c:	2302      	movs	r3, #2
 800351e:	e050      	b.n	80035c2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2202      	movs	r2, #2
 800352c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003546:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	68fa      	ldr	r2, [r7, #12]
 800354e:	4313      	orrs	r3, r2
 8003550:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	68fa      	ldr	r2, [r7, #12]
 8003558:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a1c      	ldr	r2, [pc, #112]	@ (80035d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d018      	beq.n	8003596 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800356c:	d013      	beq.n	8003596 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a18      	ldr	r2, [pc, #96]	@ (80035d4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d00e      	beq.n	8003596 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a16      	ldr	r2, [pc, #88]	@ (80035d8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d009      	beq.n	8003596 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a15      	ldr	r2, [pc, #84]	@ (80035dc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d004      	beq.n	8003596 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a13      	ldr	r2, [pc, #76]	@ (80035e0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d10c      	bne.n	80035b0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800359c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	68ba      	ldr	r2, [r7, #8]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	68ba      	ldr	r2, [r7, #8]
 80035ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80035c0:	2300      	movs	r3, #0
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3714      	adds	r7, #20
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr
 80035ce:	bf00      	nop
 80035d0:	40010000 	.word	0x40010000
 80035d4:	40000400 	.word	0x40000400
 80035d8:	40000800 	.word	0x40000800
 80035dc:	40000c00 	.word	0x40000c00
 80035e0:	40014000 	.word	0x40014000

080035e4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b085      	sub	sp, #20
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80035ee:	2300      	movs	r3, #0
 80035f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d101      	bne.n	8003600 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80035fc:	2302      	movs	r3, #2
 80035fe:	e03d      	b.n	800367c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	4313      	orrs	r3, r2
 8003614:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	4313      	orrs	r3, r2
 8003622:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	4313      	orrs	r3, r2
 8003630:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4313      	orrs	r3, r2
 800363e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	691b      	ldr	r3, [r3, #16]
 800364a:	4313      	orrs	r3, r2
 800364c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	695b      	ldr	r3, [r3, #20]
 8003658:	4313      	orrs	r3, r2
 800365a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	69db      	ldr	r3, [r3, #28]
 8003666:	4313      	orrs	r3, r2
 8003668:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	68fa      	ldr	r2, [r7, #12]
 8003670:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800367a:	2300      	movs	r3, #0
}
 800367c:	4618      	mov	r0, r3
 800367e:	3714      	adds	r7, #20
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr

08003688 <memset>:
 8003688:	4402      	add	r2, r0
 800368a:	4603      	mov	r3, r0
 800368c:	4293      	cmp	r3, r2
 800368e:	d100      	bne.n	8003692 <memset+0xa>
 8003690:	4770      	bx	lr
 8003692:	f803 1b01 	strb.w	r1, [r3], #1
 8003696:	e7f9      	b.n	800368c <memset+0x4>

08003698 <__libc_init_array>:
 8003698:	b570      	push	{r4, r5, r6, lr}
 800369a:	4d0d      	ldr	r5, [pc, #52]	@ (80036d0 <__libc_init_array+0x38>)
 800369c:	4c0d      	ldr	r4, [pc, #52]	@ (80036d4 <__libc_init_array+0x3c>)
 800369e:	1b64      	subs	r4, r4, r5
 80036a0:	10a4      	asrs	r4, r4, #2
 80036a2:	2600      	movs	r6, #0
 80036a4:	42a6      	cmp	r6, r4
 80036a6:	d109      	bne.n	80036bc <__libc_init_array+0x24>
 80036a8:	4d0b      	ldr	r5, [pc, #44]	@ (80036d8 <__libc_init_array+0x40>)
 80036aa:	4c0c      	ldr	r4, [pc, #48]	@ (80036dc <__libc_init_array+0x44>)
 80036ac:	f000 f818 	bl	80036e0 <_init>
 80036b0:	1b64      	subs	r4, r4, r5
 80036b2:	10a4      	asrs	r4, r4, #2
 80036b4:	2600      	movs	r6, #0
 80036b6:	42a6      	cmp	r6, r4
 80036b8:	d105      	bne.n	80036c6 <__libc_init_array+0x2e>
 80036ba:	bd70      	pop	{r4, r5, r6, pc}
 80036bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80036c0:	4798      	blx	r3
 80036c2:	3601      	adds	r6, #1
 80036c4:	e7ee      	b.n	80036a4 <__libc_init_array+0xc>
 80036c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80036ca:	4798      	blx	r3
 80036cc:	3601      	adds	r6, #1
 80036ce:	e7f2      	b.n	80036b6 <__libc_init_array+0x1e>
 80036d0:	08003710 	.word	0x08003710
 80036d4:	08003710 	.word	0x08003710
 80036d8:	08003710 	.word	0x08003710
 80036dc:	08003714 	.word	0x08003714

080036e0 <_init>:
 80036e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036e2:	bf00      	nop
 80036e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036e6:	bc08      	pop	{r3}
 80036e8:	469e      	mov	lr, r3
 80036ea:	4770      	bx	lr

080036ec <_fini>:
 80036ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036ee:	bf00      	nop
 80036f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036f2:	bc08      	pop	{r3}
 80036f4:	469e      	mov	lr, r3
 80036f6:	4770      	bx	lr
